[CRU, cru]
@ = 0x0FD7C0000, 0x00008000

V0PLL_CON0 = 0x0160 ; V0PLL configuration register 0
> 0, 10, V0PLL_M ; M: Division value of the 10-bit programmable main-divider. PLL has to be reset if M value is changed. 64 <= pll_m <= 1023.
> 15, 1, V0PLL_BP ; BYPASS: Bypass mode control signal.
= 0, NORMAL ; PLL operates normally.
= 1, BYPASS ; Bypass mode is enabled. (FOUT = FIN).

V0PLL_CON1 = 0x0164 ; V0PLL configuration register 1
> 0, 6, V0PLL_P ; P: Division value of the 6-bit programmable pre-divider. PLL has to be reset if P value is changed. 1 <= pll_p <= 63.
> 6, 3, V0PLL_S ; Division value of the 3-bit programmable scaler. 0 <= pll_s <= 6.
> 13, 1, V0PLL_RESETB ; RESETB: Power down control signal.
= 0, NORMAL ; RESETB=0 from 1, PLL starts its normal operation after lock time.
= 1, POWER_DOWN ; RESETB=1, power down mode is enabled and all digital blocks are reset.

V0PLL_CON2 = 0x0168 ; V0PLL configuration register 2
> 0, 16, V0PLL_K ; K: Value of 16-bit DSM. pll_k[15:0] is a two's complement integer.

V0PLL_CON3 = 0x016C ; V0PLL configuration register 3
> 0, 8, V0PLL_MFR ; MFR: Value of 8-bit modulation frequency control. PLL has to be reset if pll_mfr is changed.

> 8, 6, V0PLL_MRR ; MRR: Value of 6-bit modulation rate control. PLL has to be reset if pll_mrr is changed.

> 14, 2, V0PLL_SEL_PF ; SEL_PF: Value of 2-bit modulation method control. PLL has to be reset if pll_sel_pf is changed.
= 0, DOWN_SPREAD ; down spread
= 1, UP_SPREAD ; up spread
= 2, CENTER_SPREAD_2 ; center spread
= 3, CENTER_SPREAD_3 ; center spread

V0PLL_CON4 = 0x0170 ; V0PLL configuration register 4
> 0, 1, V0PLL_SSCG_EN ; SSCG_EN: Enable pin for dithered mode.
= 0, DISABLE ; disable dithered mode.
= 1, ENABLE ; enable dithered mode.

> 3, 1, V0PLL_AFC_ENB ; AFC_ENB: Monitoring pin.
= 0, ENABLED ; AFC is enabled and VCO is calibrated automatically.
= 1, DISABLED ; AFC is disabled and VCO is calibrated manually by pll_extafc[4:0] for the test of VCO range.

> 4, 4, V0PLL_EXTAFC ; EXTAFC: Monitoring pin. If pll_afc_enb=1, AFC is disabled and VCO is calibrated manually by pll_extafc[4:0] for the test of VCO range.

> 14, 1, V0PLL_FEED_EN ; FEED_EN: Monitoring pin.
= 0, DISABLED ; FEED_OUT is disabled.
= 1, ENABLED ; FEED_OUT is enabled.

> 15, 1, V0PLL_FSEL ; FSEL: Monitoring pin.
= 0, FREF ; FEED_OUT = FREF.
= 1, FEED ; FEED_OUT = FEED.

V0PLL_CON5 = 0x0174 ; V0PLL configuration register 5
> 0, 1, V0PLL_FOUT_MASK ; FOUT_MASK: Scaler's re-initialization time control pin.

V0PLL_CON6 = 0x0178 ; V0PLL configuration register 6
> 10, 5, V0PLL_AFC_CODE ; AFC_CODE: Monitoring pin. Output code of AFC(5 bits).

> 15, 1, V0PLL_LOCK ; LOCK: PLL lock flag.
= 0, UNLOCKED ; PLL is unlocked.
= 1, LOCKLED ; PLL is locked.

AUPLL_CON0 = 0x0180 ; AUPLL configuration register 0
> 0, 10, AUPLL_M ; M: Division value of the 10-bit programmable main-divider. PLL has to be reset if M value is changed. 64 <= pll_m <= 1023.

> 15, 1, AUPLL_BP ; BYPASS: Bypass mode control signal.
= 1, BYPASS ; bypass mode is enabled. (FOUT = FIN).
= 0, NORMAL ; PLL operates normally.

AUPLL_CON1 = 0x0184 ; AUPLL configuration register 1
> 0, 6, AUPLL_P ; P: Division value of the 6-bit programmable pre-divider. PLL has to be reset if P value is changed. 1 <= pll_p <= 63.

> 6, 3, AUPLL_S ; Division value of the 3-bit programmable scaler. 0 <= pll_s <= 6.

> 13, 1, AUPLL_RESETB ; RESETB: Power down control signal.
= 0, NORMAL ; RESETB=0 from 1, PLL starts its normal operation after lock time.
= 1, POWER_DOWN ; RESETB=1, power down mode is enabled and all digital blocks are reset.

AUPLL_CON2 = 0x0188 ; AUPLL configuration register 2
> 0, 16, AUPLL_K ; K: Value of 16-bit DSM. pll_k[15:0] is a two's complement integer.

AUPLL_CON3 = 0x018C ; AUPLL configuration register 3
> 0, 8, AUPLL_MFR ; MFR: Value of 8-bit modulation frequency control. PLL has to be reset if pll_mfr is changed.

> 8, 6, AUPLL_MRR ; MRR: Value of 6-bit modulation rate control. PLL has to be reset if pll_mrr is changed.

> 14, 2, AUPLL_SEL_PF ; SEL_PF: Value of 2-bit modulation method control. PLL has to be reset if pll_sel_pf is changed.
= 0, DOWN_SPREAD ; down spread
= 1, UP_SPREAD ; up spread
= 2, CENTER_SPREAD_2 ; center spread
= 3, CENTER_SPREAD_3 ; center spread

AUPLL_CON4 = 0x0190 ; AUPLL configuration register 4
> 0, 1, AUPLL_SSCG_EN ; SSCG_EN: Enable pin for dithered mode.
= 0, DISABLE ; disable dithered mode.
= 1, ENABLE ; enable dithered mode.

> 3, 1, AUPLL_AFC_ENB ; AFC_ENB: Monitoring pin. pll_extafc[4:0] for the test of VCO range.
= 0, ENABLED ; AFC is enabled and VCO is calibrated automatically.
= 1, DISABLED ; AFC is disabled and VCO is calibrated manually by

> 4, 4, AUPLL_EXTAFC ; EXTAFC: Monitoring pin. If pll_afc_enb=1, AFC is disabled and VCO is calibrated manually by pll_extafc[4:0] for the test of VCO range.

> 14, 1, AUPLL_FEED_EN ; FEED_EN: Monitoring pin.
= 0, DISABLED ; FEED_OUT is disabled.
= 1, ENABLED ; FEED_OUT is enabled.

> 15, 1, AUPLL_FSEL ; FSEL: Monitoring pin.
= 0, FREF ; FEED_OUT = FREF.
= 1, FEED ; FEED_OUT = FEED.

AUPLL_CON5 = 0x0194 ; AUPLL configuration register 5
> 0, 1, AUPLL_FOUT_MASK ; FOUT_MASK: Scaler's re-initialization time control pin.

AUPLL_CON6 = 0x0198 ; AUPLL configuration register 6
> 10, 5, AUPLL_AFC_CODE ; AFC_CODE: Monitoring pin. Output code of AFC(5 bits).

> 15, 1, AUPLL_LOCK ; LOCK: PLL lock flag.
= 0, UNLOCKED ; PLL is unlocked.
= 1, LOCKED ; PLL is locked.

CPLL_CON0 = 0x01A0 ; CPLL configuration register 0
> 15, 1, CPLL_BP ; BYPASS: Bypass mode control signal.
= 1, BYPASS ; bypass mode is enabled. (FOUT = FIN).
= 0, NORMAL ; PLL operates normally.

> 0, 10, CPLL_M ; M: Division value of the 10-bit programmable main-divider. PLL has to be reset if M value is changed. 64 <= pll_m <= 1023

CPLL_CON1 = 0x01A4 ; CPLL configuration register 1
> 13, 1, CPLL_RESETB ; RESETB: Power down control signal.
= 0, NORMAL ; RESETB=0 from 1, PLL starts its normal operation after lock time.
= 1, POWER_DOWN ; RESETB=1, power down mode is enabled and all digital blocks are reset.

> 6, 3, CPLL_S ; Division value of the 3-bit programmable scaler. 0 <= pll_s <= 6
> 0, 6, CPLL_P ; P: Division value of the 6-bit programmable pre-divider. PLL has to be reset if P value is changed. 1 <= pll_p <= 63

CPLL_CON2 = 0x01A8 ; CPLL configuration register 2
> 0, 16, CPLL_K ; K: Value of 16-bit DSM. pll_k[15:0] is a two's complement integer.

CPLL_CON3 = 0x01AC ; CPLL configuration register 3
> 14, 2, CPLL_SEL_PF ; SEL_PF: Value of 2-bit modulation method control. PLL has to be reset if pll_sel_pf is changed.
= 0, DOWN_SPREAD
= 1, UP_SPREAD
= 2, CENTER_SPREAD2
= 3, CENTER_SPREAD3

> 8, 6, CPLL_MRR ; MRR: Value of 6-bit modulation rate control. PLL has to be reset if pll_mrr is changed.
> 0, 8, CPLL_MFR ; MFR: Value of 8-bit modulation frequency control. PLL has to be reset if pll_mfr is changed.

CPLL_CON4 = 0x01B0 ; CPLL configuration register 4
> 15, 1, CPLL_FSEL ; FSEL: Monitoring pin.
= 0, FREF ; FEED_OUT = FREF.
= 1, FEED ; FEED_OUT = FEED.

> 14, 1, CPLL_FEED_EN ; FEED_EN: Monitoring pin.
= 0, DISABLED ; FEED_OUT is disabled.
= 1, ENABLED ; FEED_OUT is enabled.

> 4, 5, CPLL_EXTAFC ; EXTAFC: Monitoring pin. If pll_afc_enb=1, AFC is disabled and VCO is calibrated manually by pll_extafc[4:0] for the test of VCO range.

> 3, 1, CPLL_AFC_ENB ; AFC_ENB: Monitoring pin.
= 0, ENABLED ; AFC is enabled and VCO is calibrated automatically.
= 1, DISABLED ; AFC is disabled and VCO is calibrated manually by pll_extafc[4:0] for the test of VCO range.

> 0, 1, CPLL_SSCG_EN ; SSCG_EN: Enable pin for dithered mode.
= 0, DISABLE ; disable dithered mode.
= 1, ENABLE ; enable dithered mode.

CPLL_CON5 = 0x01B4 ; CPLL configuration register 5
> 0, 1, CPLL_FOUT_MASK ; FOUT_MASK: Scaler's re-initialization time control pin.

CPLL_CON6 = 0x01B8 ; CPLL configuration register 6
> 15, 1, CPLL_LOCK ; LOCK: PLL lock flag.
= 0, UNLOCKED ; PLL is unlocked.
= 1, LOCKED ; PLL is locked.

> 10, 5, CPLL_AFC_CODE ; AFC_CODE: Monitoring pin. Output code of AFC(5 bits).

GPLL_CON0 = 0x01C0 ; GPLL configuration register 0
> 15, 1, GPLL_BP ; BYPASS: Bypass mode control signal.
= 1, BYPASS ; bypass mode is enabled. (FOUT = FIN).
= 0, NORMAL ; PLL operates normally.

> 0, 10, GPLL_M ; M: Division value of the 10-bit programmable main-divider. PLL has to be reset if M value is changed. 64 <= pll_m <= 1023

GPLL_CON1 = 0x01C4 ; GPLL configuration register 1
> 13, 1, GPLL_RESETB ; RESETB: Power down control signal.
= 0, NORMAL ; RESETB=0 from 1, PLL starts its normal operation after lock time.
= 1, POWER_DOWN ; RESETB=1, power down mode is enabled and all digital blocks are reset.

> 6, 3, GPLL_S ; Division value of the 3-bit programmable scaler. 0 <= pll_s <= 6
> 0, 6, GPLL_P ; P: Division value of the 6-bit programmable pre-divider. PLL has to be reset if P value is changed. 1 <= pll_p <= 63

GPLL_CON2 = 0x01C8 ; GPLL configuration register 2
> 0, 16, GPLL_K ; K: Value of 16-bit DSM. pll_k[15:0] is a two's complement integer.

GPLL_CON3 = 0x01CC ; GPLL configuration register 3
> 14, 2, GPLL_SEL_PF ; SEL_PF: Value of 2-bit modulation method control. PLL has to be reset if pll_sel_pf is changed.
= 0, DOWN_SPREAD
= 1, UP_SPREAD
= 2, CENTER_SPREAD2
= 3, CENTER_SPREAD3

> 8, 6, GPLL_MRR ; MRR: Value of 6-bit modulation rate control. PLL has to be reset if pll_mrr is changed.
> 0, 8, GPLL_MFR ; MFR: Value of 8-bit modulation frequency control. PLL has to be reset if pll_mfr is changed.

GPLL_CON4 = 0x01D0 ; GPLL configuration register 4
> 15, 1, GPLL_FSEL ; FSEL: Monitoring pin.
= 0, FREF ; FEED_OUT = FREF.
= 1, FEED ; FEED_OUT = FEED.

> 14, 1, GPLL_FEED_EN ; FEED_EN: Monitoring pin.
= 0, DISABLED ; FEED_OUT is disabled.
= 1, ENABLED ; FEED_OUT is enabled.

> 4, 5, GPLL_EXTAFC ; EXTAFC: Monitoring pin. If pll_afc_enb=1, AFC is disabled and VCO is calibrated manually by pll_extafc[4:0] for the test of VCO range.

> 3, 1, GPLL_AFC_ENB ; AFC_ENB: Monitoring pin.
= 0, ENABLED ; AFC is enabled and VCO is calibrated automatically.
= 1, DISABLED ; AFC is disabled and VCO is calibrated manually by pll_extafc[4:0] for the test of VCO range.

> 0, 1, GPLL_SSCG_EN ; SSCG_EN: Enable pin for dithered mode.
= 0, DISABLE ; disable dithered mode.
= 1, ENABLE ; enable dithered mode.

GPLL_CON5 = 0x01D4 ; GPLL configuration register 5
> 0, 1, GPLL_FOUT_MASK ; FOUT_MASK: Scaler's re-initialization time control pin.

GPLL_CON6 = 0x01D8 ; GPLL configuration register 6
> 15, 1, GPLL_LOCK ; LOCK: PLL lock flag.
= 0, UNLOCKED ; PLL is unlocked.
= 1, LOCKED ; PLL is locked.

> 10, 5, GPLL_AFC_CODE ; AFC_CODE: Monitoring pin. Output code of AFC(5 bits).

NPLL_CON0 = 0x01E0 ; Internal PLL mode select register 0
> 15, 1, NPLL_BP ; BYPASS: Bypass mode control signal.
= 1, BYPASS ; bypass mode is enabled. (FOUT = FIN).
= 0, NORMAL ; PLL operates normally.

> 0, 10, NPLL_M ; M: Division value of the 10-bit programmable main-divider. PLL has to be reset if M value is changed. 64 <= pll_m <= 1023

NPLL_CON1 = 0x01E4 ; Internal PLL mode select register 1
> 13, 1, NPLL_RESETB ; RESETB: Power down control signal.
= 0, NORMAL ; RESETB=0 from 1, PLL starts its normal operation after lock time.
= 1, POWER_DOWN ; RESETB=1, power down mode is enabled and all digital blocks are reset.

> 6, 3, NPLL_S ; Division value of the 3-bit programmable scaler. 0 <= pll_s <= 6
> 0, 6, NPLL_P ; P: Division value of the 6-bit programmable pre-divider. PLL has to be reset if P value is changed. 1 <= pll_p <= 63

NPLL_CON4 = 0x01F0 ; Internal PLL mode select register 4
> 15, 1, NPLL_FSEL ; FSEL: Monitoring pin.
= 0, FREF ; FEED_OUT = FREF.
= 1, FEED ; FEED_OUT = FEED.

> 14, 1, NPLL_FEED_EN ; FEED_EN: Monitoring pin.
= 0, DISABLED ; FEED_OUT is disabled.
= 1, ENABLED ; FEED_OUT is enabled.

> 4, 5, NPLL_EXTAFC ; EXTAFC: Monitoring pin. If pll_afc_enb=1, AFC is disabled and VCO is calibrated manually by pll_extafc[4:0] for the test of VCO range.

> 3, 1, NPLL_AFC_ENB ; AFC_ENB: Monitoring pin.
= 0, ENABLED ; AFC is enabled and VCO is calibrated automatically.
= 1, DISABLED ; AFC is disabled and VCO is calibrated manually by pll_extafc[4:0] for the test of VCO range.

> 1, 2, NPLL_ICP ; Charge-pump current control signal.

NPLL_CON5 = 0x01F4 ; Internal PLL mode select register 5
> 9, 2, NPLL_LOCK_CON_DLY ; LOCK_CON_DLY: Lock detector setting of the detection resolution.
> 7, 2, NPLL_LOCK_CON_OUT ; LOCK_CON_OUT: Lock detector setting of the output margin.
> 5, 2, NPLL_LOCK_CON_IN ; LOCK_CON_IN: Lock detector setting of the input margin.
> 0, 1, NPLL_FOUT_MASK ; FOUT_MASK: Scaler's re-initialization time control pin.

NPLL_CON6 = 0x01F8 ; Internal PLL mode select register 6
> 15, 1, NPLL_LOCK ; LOCK: PLL lock flag.
= 0, UNLOCKED ; PLL is unlocked.
= 1, LOCKED ; PLL is locked.

> 10, 5, NPLL_AFC_CODE ; AFC_CODE: Monitoring pin. Output code of AFC(5 bits).

MODE_CON00 = 0x0280 ; Internal PLL mode select register
> 0, 2, CLK_NPLL_MODE ; clk_npll_mux clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_NPLL
= 2, CLK_DEEPSLOW

> 2, 2, CLK_GPLL_MODE ; clk_gpll_mux clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_GPLL
= 2, CLK_DEEPSLOW

> 4, 2, CLK_V0PLL_MODE ; clk_v0pll_mux clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_V0PLL
= 2, CLK_DEEPSLOW

> 6, 2, CLK_AUPLL_MODE ; clk_aupll_mux clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_AUPLL
= 2, CLK_DEEPSLOW

> 8, 2, CLK_CPLL_MODE ; clk_cpll_mux clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_CPLL
= 2, CLK_DEEPSLOW

CLKSEL_CON00 = 0x0300 ; Internal clock select and division register 0
> 11, 1, CLK_MATRIX_100M_SRC_SEL ; clk_matrix_100m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 6, 5, CLK_MATRIX_100M_SRC_DIV ; Divide clk_matrix_100m_src by (div_con + 1).

> 5, 1, CLK_MATRIX_50M_SRC_SEL ; clk_matrix_50m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, CLK_MATRIX_50M_SRC_DIV ; Divide clk_matrix_50m_src by (div_con + 1).

CLKSEL_CON01 = 0x0304 ; Internal clock select and division register 1
> 11, 1, CLK_MATRIX_200M_SRC_SEL ; clk_matrix_200m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 6, 5, CLK_MATRIX_200M_SRC_DIV ; Divide clk_matrix_200m_src by (div_con + 1).

> 5, 1, CLK_MATRIX_150M_SRC_SEL ; clk_matrix_150m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, CLK_MATRIX_150M_SRC_DIV ; Divide clk_matrix_150m_src by (div_con + 1).

CLKSEL_CON02 = 0x0308 ; Internal clock select and division register 2
> 11, 1, CLK_MATRIX_300M_SRC_SEL ; clk_matrix_300m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 6, 5, CLK_MATRIX_300M_SRC_DIV ; Divide clk_matrix_300m_src by (div_con + 1).

> 5, 1, CLK_MATRIX_250M_SRC_SEL ; clk_matrix_250m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, CLK_MATRIX_250M_SRC_DIV ; Divide clk_matrix_250m_src by (div_con + 1).

CLKSEL_CON03 = 0x030C ; Internal clock select and division register 3
> 11, 1, CLK_MATRIX_400M_SRC_SEL ; clk_matrix_400m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 6, 5, CLK_MATRIX_400M_SRC_DIV ; Divide clk_matrix_400m_src by (div_con + 1).

> 5, 1, CLK_MATRIX_350M_SRC_SEL ; clk_matrix_350m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_SPLL_MUX

> 0, 5, CLK_MATRIX_350M_SRC_DIV ; Divide clk_matrix_350m_src by (div_con + 1).

CLKSEL_CON04 = 0x0310 ; Internal clock select and division register 4
> 11, 1, CLK_MATRIX_500M_SRC_SEL ; clk_matrix_500m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 6, 5, CLK_MATRIX_500M_SRC_DIV ; Divide clk_matrix_500m_src by (div_con + 1).

> 5, 1, CLK_MATRIX_450M_SRC_SEL ; clk_matrix_450m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, CLK_MATRIX_450M_SRC_DIV ; NP5 division register. Divide clk_matrix_450m_src by ((2 * div_con + 3) / 2).

CLKSEL_CON05 = 0x0314 ; Internal clock select and division register 5
> 11, 1, CLK_MATRIX_650M_SRC_SEL ; clk_matrix_650m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_LPLL_MUX

> 6, 5, CLK_MATRIX_650M_SRC_DIV ; Divide clk_matrix_650m_src by (div_con + 1).

> 5, 1, CLK_MATRIX_600M_SRC_SEL ; clk_matrix_600m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, CLK_MATRIX_600M_SRC_DIV ; Divide clk_matrix_600m_src by (div_con + 1).

CLKSEL_CON06 = 0x0318 ; Internal clock select and division register 6
> 11, 1, CLK_MATRIX_800M_SRC_SEL ; clk_matrix_800m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 6, 5, CLK_MATRIX_800M_SRC_DIV ; Divide clk_matrix_800m_src by (div_con + 1).

> 5, 1, CLK_MATRIX_700M_SRC_SEL ; clk_matrix_700m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_SPLL_MUX

> 0, 5, CLK_MATRIX_700M_SRC_DIV ; Divide clk_matrix_700m_src by (div_con + 1).

CLKSEL_CON07 = 0x031C ; Internal clock select and division register 7
> 12, 1, CLK_MATRIX_1200M_SRC_SEL ; clk_matrix_1200m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 7, 5, CLK_MATRIX_1200M_SRC_DIV ; Divide clk_matrix_1200m_src by (div_con + 1).

> 5, 2, CLK_MATRIX_1000M_SRC_SEL ; clk_matrix_1000m_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_NPLL_MUX
= 3, CLK_V0PLL_MUX

> 0, 5, CLK_MATRIX_1000M_SRC_DIV ; NP5 division register. Divide clk_matrix_1000m_src by ((2 * div_con + 3) / 2).

CLKSEL_CON08 = 0x0320 ; Internal clock select and division register 8
> 14, 1, ACLK_LOW_TOP_ROOT_SEL ; aclk_low_top_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 9, 5, ACLK_LOW_TOP_ROOT_DIV ; Divide aclk_low_top_root by (div_con + 1).

> 7, 2, PCLK_TOP_ROOT_SEL ; pclk_top_root clock mux.
= 0, CLK_MATRIX_100M_SRC
= 1, CLK_MATRIX_50M_SRC
= 2, XIN_OSC0_FUNC

> 5, 2, ACLK_TOP_ROOT_SEL ; aclk_top_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX

> 0, 5, ACLK_TOP_ROOT_DIV ; Divide aclk_top_root by (div_con + 1).

CLKSEL_CON09 = 0x0324 ; Internal clock select and division register 9
> 8, 2, ACLK_TOP_S400_ROOT_SEL ; aclk_top_s400_root clock mux.
= 0, CLK_MATRIX_400M_SRC
= 1, CLK_MATRIX_200M_SRC
= 2, CLK_MATRIX_100M_SRC
= 3, XIN_OSC0_FUNC

> 6, 2, ACLK_TOP_S200_ROOT_SEL ; aclk_top_s200_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 4, 2, ACLK_TOP_M400_ROOT_SEL ; aclk_top_m400_root clock mux.
= 0, CLK_MATRIX_400M_SRC
= 1, CLK_MATRIX_200M_SRC
= 2, CLK_MATRIX_100M_SRC
= 3, XIN_OSC0_FUNC

> 2, 2, ACLK_TOP_M500_ROOT_SEL ; aclk_top_m500_root clock mux.
= 0, CLK_MATRIX_500M_SRC
= 1, CLK_MATRIX_300M_SRC
= 2, CLK_MATRIX_100M_SRC
= 3, XIN_OSC0_FUNC

> 0, 2, ACLK_TOP_M300_ROOT_SEL ; aclk_top_m300_root clock mux.
= 0, CLK_MATRIX_300M_SRC
= 1, CLK_MATRIX_200M_SRC
= 2, CLK_MATRIX_100M_SRC
= 3, XIN_OSC0_FUNC

CLKSEL_CON10 = 0x0328 ; Internal clock select and division register 10
> 12, 3, CLK_TESTOUT_GRP0_SEL ; clk_testout_grp0 clock mux.
= 0, CLK_REF_PIPE_PHY0
= 1, CLK_REF_PIPE_PHY1
= 2, CLK_REF_PIPE_PHY2
= 3, CLK_TESTOUT_TOP
= 4, CLK_TESTOUT_GPU
= 5, CLK_TESTOUT_NPU

> 9, 3, CLK_TESTOUT_SEL ; clk_testout clock mux.
= 0, CLK_TESTOUT_GRP0
= 1, CLK_TESTOUT_B0
= 2, CLK_TESTOUT_B1
= 3, CLK_TESTOUT_L
= 4, CLK_TESTOUT_DDR01
= 5, CLK_TESTOUT_DDR23

> 6, 3, CLK_TESTOUT_TOP_SEL ; clk_testout_top clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_SPLL_MUX
= 4, CLK_V0PLL_MUX
= 5, CLK_DEEPSLOW

> 0, 6, CLK_TESTOUT_TOP_DIV ; Divide clk_testout_top by (div_con + 1).

CLKSEL_CON15 = 0x033C ; Internal clock select and division register 15
> 15, 1, REFCLKO25M_ETH0_OUT_SEL ; refclko25m_eth0_out clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 8, 7, REFCLKO25M_ETH0_OUT_DIV ; Divide refclko25m_eth0_out by (div_con + 1).

> 7, 1, MCLK_GMAC0_OUT_SEL ; mclk_gmac0_out clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 7, MCLK_GMAC0_OUT_DIV ; Divide mclk_gmac0_out by (div_con + 1).

CLKSEL_CON16 = 0x0340 ; Internal clock select and division register 16
> 7, 1, REFCLKO25M_ETH1_OUT_SEL ; refclko25m_eth1_out clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 7, REFCLKO25M_ETH1_OUT_DIV ; Divide refclko25m_eth1_out by (div_con + 1).

CLKSEL_CON17 = 0x0344 ; Internal clock select and division register 17
> 8, 2, CLK_CIFOUT_OUT_SEL ; clk_cifout_out clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, XIN_OSC0_FUNC
= 3, CLK_SPLL_MUX

> 0, 8, CLK_CIFOUT_OUT_DIV ; Divide clk_cifout_out by (div_con + 1).

CLKSEL_CON18 = 0x0348 ; Internal clock select and division register 18
> 8, 2, CLK_MIPI_CAMARAOUT_M0_SEL ; clk_mipi_camaraout_m0 clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_SPLL_MUX
= 2, CLK_GPLL_MUX
= 3, CLK_CPLL_MUX

> 0, 8, CLK_MIPI_CAMARAOUT_M0_DIV ; Divide clk_mipi_camaraout_m0 by (div_con + 1).

CLKSEL_CON19 = 0x034C ; Internal clock select and division register 19
> 8, 2, CLK_MIPI_CAMARAOUT_M1_SEL ; clk_mipi_camaraout_m1 clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_SPLL_MUX
= 2, CLK_GPLL_MUX
= 3, CLK_CPLL_MUX

> 0, 8, CLK_MIPI_CAMARAOUT_M1_DIV ; Divide clk_mipi_camaraout_m1 by (div_con + 1).

CLKSEL_CON20 = 0x0350 ; Internal clock select and division register 20
> 8, 2, CLK_MIPI_CAMARAOUT_M2_SEL ; clk_mipi_camaraout_m2 clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_SPLL_MUX
= 2, CLK_GPLL_MUX
= 3, CLK_CPLL_MUX

> 0, 8, CLK_MIPI_CAMARAOUT_M2_DIV ; Divide clk_mipi_camaraout_m2 by (div_con + 1).

CLKSEL_CON21 = 0x0354 ; Internal clock select and division register 21
> 8, 2, CLK_MIPI_CAMARAOUT_M3_SEL ; clk_mipi_camaraout_m3 clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_SPLL_MUX
= 2, CLK_GPLL_MUX
= 3, CLK_CPLL_MUX

> 0, 8, CLK_MIPI_CAMARAOUT_M3_DIV ; Divide clk_mipi_camaraout_m3 by (div_con + 1).

CLKSEL_CON22 = 0x0358 ; Internal clock select and division register 22
> 8, 2, CLK_MIPI_CAMARAOUT_M4_SEL ; clk_mipi_camaraout_m4 clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_SPLL_MUX
= 2, CLK_GPLL_MUX
= 3, CLK_CPLL_MUX

> 0, 8, CLK_MIPI_CAMARAOUT_M4_DIV ; Divide clk_mipi_camaraout_m4 by (div_con + 1).

CLKSEL_CON24 = 0x0360 ; Internal clock select and division register 24
> 9, 1, CLK_I2S0_8CH_TX_SRC_SEL ; clk_i2s0_8ch_tx_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 4, 5, CLK_I2S0_8CH_TX_SRC_DIV ; Divide clk_i2s0_8ch_tx_src by (div_con + 1).

> 2, 2, PCLK_AUDIO_ROOT_SEL ; pclk_audio_root clock mux.
= 0, CLK_MATRIX_100M_SRC
= 1, CLK_MATRIX_50M_SRC
= 2, XIN_OSC0_FUNC

> 0, 2, HCLK_AUDIO_ROOT_SEL ; hclk_audio_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

CLKSEL_CON25 = 0x0364 ; Internal clock select and division register 25
> 0, 32, CLK_I2S0_8CH_TX_FRAC_DIV ; clk_i2s0_8ch_tx_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON26 = 0x0368 ; Internal clock select and division register 26
> 7, 1, CLK_I2S0_8CH_RX_SRC_SEL ; clk_i2s0_8ch_rx_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 2, 5, CLK_I2S0_8CH_RX_SRC_DIV ; Divide clk_i2s0_8ch_rx_src by (div_con + 1).

> 0, 2, MCLK_I2S0_8CH_TX_SEL ; mclk_i2s0_8ch_tx clock mux.
= 0, CLK_I2S0_8CH_TX_SRC
= 1, CLK_I2S0_8CH_TX_FRAC
= 2, I2S0_MCLKIN
= 3, XIN_OSC0_HALF

CLKSEL_CON27 = 0x036C ; Internal clock select and division register 27
> 0, 32, CLK_I2S0_8CH_RX_FRAC_DIV ; clk_i2s0_8ch_rx_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON28 = 0x0370 ; Internal clock select and division register 28
> 9, 1, CLK_I2S2_2CH_SRC_SEL ; clk_i2s2_2ch_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 4, 5, CLK_I2S2_2CH_SRC_DIV ; Divide clk_i2s2_2ch_src by (div_con + 1).

> 2, 2, I2S0_8CH_MCLKOUT_SEL ; i2s0_8ch_mclkout clock mux.
= 0, MCLK_I2S0_8CH_TX
= 1, MCLK_I2S0_8CH_RX
= 2, XIN_OSC0_HALF

> 0, 2, MCLK_I2S0_8CH_RX_SEL ; mclk_i2s0_8ch_rx clock mux.
= 0, CLK_I2S0_8CH_RX_SRC
= 1, CLK_I2S0_8CH_RX_FRAC
= 2, I2S0_MCLKIN
= 3, XIN_OSC0_HALF

CLKSEL_CON29 = 0x0374 ; Internal clock select and division register 29
> 0, 32, CLK_I2S2_2CH_FRAC_DIV ; clk_i2s2_2ch_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON30 = 0x0378 ; Internal clock select and division register 30
> 8, 1, CLK_I2S3_2CH_SRC_SEL ; clk_i2s3_2ch_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 3, 5, CLK_I2S3_2CH_SRC_DIV ; Divide clk_i2s3_2ch_src by (div_con + 1).

> 2, 1, I2S2_2CH_MCLKOUT_SEL ; i2s2_2ch_mclkout clock mux.
= 0, MCLK_I2S2_2CH
= 1, XIN_OSC0_HALF

> 0, 2, MCLK_I2S2_2CH_SEL ; mclk_i2s2_2ch clock mux.
= 0, CLK_I2S2_2CH_SRC
= 1, CLK_I2S2_2CH_FRAC
= 2, I2S2_MCLKIN
= 3, XIN_OSC0_HALF

CLKSEL_CON31 = 0x037C ; Internal clock select and division register 31
> 0, 32, CLK_I2S3_2CH_FRAC_DIV ; clk_i2s3_2ch_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON32 = 0x0380 ; Internal clock select and division register 32
> 8, 1, CLK_SPDIF0_SRC_SEL ; clk_spdif0_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 3, 5, CLK_SPDIF0_SRC_DIV ; Divide clk_spdif0_src by (div_con + 1).

> 2, 1, I2S3_2CH_MCLKOUT_SEL ; i2s3_2ch_mclkout clock mux.
= 0, MCLK_I2S3_2CH
= 1, XIN_OSC0_HALF

> 0, 2, MCLK_I2S3_2CH_SEL ; mclk_i2s3_2ch clock mux.
= 0, CLK_I2S3_2CH_SRC
= 1, CLK_I2S3_2CH_FRAC
= 2, I2S3_MCLKIN
= 3, XIN_OSC0_HALF

CLKSEL_CON33 = 0x0384 ; Internal clock select and division register 33
> 0, 32, CLK_SPDIF0_FRAC_DIV ; clk_spdif0_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON34 = 0x0388 ; Internal clock select and division register 34
> 7, 1, CLK_SPDIF1_SRC_SEL ; clk_spdif1_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 2, 5, CLK_SPDIF1_SRC_DIV ; Divide clk_spdif1_src by (div_con + 1).

> 0, 2, MCLK_SPDIF0_SEL ; mclk_spdif0 clock mux.
= 0, CLK_SPDIF0_SRC
= 1, CLK_SPDIF0_FRAC
= 2, XIN_OSC0_HALF

CLKSEL_CON35 = 0x038C ; Internal clock select and division register 35
> 0, 32, CLK_SPDIF1_FRAC_DIV ; clk_spdif1_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON36 = 0x0390 ; Internal clock select and division register 36
> 7, 2, MCLK_PDM1_SEL ; mclk_pdm1 clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX

> 2, 5, MCLK_PDM1_DIV ; Divide mclk_pdm1 by (div_con + 1).

> 0, 2, MCLK_SPDIF1_SEL ; mclk_spdif1 clock mux.
= 0, CLK_SPDIF1_SRC
= 1, CLK_SPDIF1_FRAC
= 2, XIN_OSC0_HALF

CLKSEL_CON38 = 0x0398 ; Internal clock select and division register 38
> 13, 1, CLK_I2C8_SEL ; clk_i2c8 clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC

> 12, 1, CLK_I2C7_SEL ; clk_i2c7 clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC

> 11, 1, CLK_I2C6_SEL ; clk_i2c6 clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC

> 10, 1, CLK_I2C5_SEL ; clk_i2c5 clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC

> 9, 1, CLK_I2C4_SEL ; clk_i2c4 clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC

> 8, 1, CLK_I2C3_SEL ; clk_i2c3 clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC

> 7, 1, CLK_I2C2_SEL ; clk_i2c2 clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC

> 6, 1, CLK_I2C1_SEL ; clk_i2c1 clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC

> 5, 1, ACLK_BUS_ROOT_SEL ; aclk_bus_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, ACLK_BUS_ROOT_DIV ; Divide aclk_bus_root by (div_con + 1).

CLKSEL_CON39 = 0x039C ; Internal clock select and division register 39
> 11, 1, CLK_CAN1_SEL ; clk_can1 clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 6, 5, CLK_CAN1_DIV ; Divide clk_can1 by (div_con + 1).

> 5, 1, CLK_CAN0_SEL ; clk_can0 clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, CLK_CAN0_DIV ; Divide clk_can0 by (div_con + 1).

CLKSEL_CON40 = 0x03A0 ; Internal clock select and division register 40
> 14, 1, CLK_SARADC_SEL ; clk_saradc clock mux.
= 0, CLK_GPLL_MUX
= 1, XIN_OSC0_FUNC

> 6, 8, CLK_SARADC_DIV ; Divide clk_saradc by (div_con + 1).

> 5, 1, CLK_CAN2_SEL ; clk_can2 clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, CLK_CAN2_DIV ; Divide clk_can2 by (div_con + 1).

CLKSEL_CON41 = 0x03A4 ; Internal clock select and division register 41
> 14, 1, CLK_UART1_SRC_SEL ; clk_uart1_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 9, 5, CLK_UART1_SRC_DIV ; Divide clk_uart1_src by (div_con + 1).

> 8, 1, CLK_TSADC_SEL ; clk_tsadc clock mux.
= 0, CLK_GPLL_MUX
= 1, XIN_OSC0_FUNC

> 0, 8, CLK_TSADC_DIV ; Divide clk_tsadc by (div_con + 1).

CLKSEL_CON42 = 0x03A8 ; Internal clock select and division register 42
> 0, 32, CLK_UART1_FRAC_DIV ; clk_uart1_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON43 = 0x03AC ; Internal clock select and division register 43
> 7, 1, CLK_UART2_SRC_SEL ; clk_uart2_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 2, 5, CLK_UART2_SRC_DIV ; Divide clk_uart2_src by (div_con + 1).

> 0, 2, SCLK_UART1_SEL ; sclk_uart1 clock mux.
= 0, CLK_UART1_SRC
= 1, CLK_UART1_FRAC
= 2, XIN_OSC0_FUNC

CLKSEL_CON44 = 0x03B0 ; Internal clock select and division register 44
> 0, 32, CLK_UART2_FRAC_DIV ; clk_uart2_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON45 = 0x03B4 ; Internal clock select and division register 45
> 7, 1, CLK_UART3_SRC_SEL ; clk_uart3_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 2, 5, CLK_UART3_SRC_DIV ; Divide clk_uart3_src by (div_con + 1).

> 0, 2, SCLK_UART2_SEL ; sclk_uart2 clock mux.
= 0, CLK_UART2_SRC
= 1, CLK_UART2_FRAC
= 2, XIN_OSC0_FUNC

CLKSEL_CON46 = 0x03B8 ; Internal clock select and division register 46
> 0, 32, CLK_UART3_FRAC_DIV ; clk_uart3_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON47 = 0x03BC ; Internal clock select and division register 47
> 7, 1, CLK_UART4_SRC_SEL ; clk_uart4_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 2, 5, CLK_UART4_SRC_DIV ; Divide clk_uart4_src by (div_con + 1).

> 0, 2, SCLK_UART3_SEL ; sclk_uart3 clock mux.
= 0, CLK_UART3_SRC
= 1, CLK_UART3_FRAC
= 2, XIN_OSC0_FUNC

CLKSEL_CON48 = 0x03C0 ; Internal clock select and division register 48
> 0, 32, CLK_UART4_FRAC_DIV ; clk_uart4_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON49 = 0x03C4 ; Internal clock select and division register 49
> 7, 1, CLK_UART5_SRC_SEL ; clk_uart5_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 2, 5, CLK_UART5_SRC_DIV ; Divide clk_uart5_src by (div_con + 1).

> 0, 2, SCLK_UART4_SEL ; sclk_uart4 clock mux.
= 0, CLK_UART4_SRC
= 1, CLK_UART4_FRAC
= 2, XIN_OSC0_FUNC

CLKSEL_CON50 = 0x03C8 ; Internal clock select and division register 50
> 0, 32, CLK_UART5_FRAC_DIV ; clk_uart5_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON51 = 0x03CC ; Internal clock select and division register 51
> 7, 1, CLK_UART6_SRC_SEL ; clk_uart6_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 2, 5, CLK_UART6_SRC_DIV ; Divide clk_uart6_src by (div_con + 1).

> 0, 2, SCLK_UART5_SEL ; sclk_uart5 clock mux.
= 0, CLK_UART5_SRC
= 1, CLK_UART5_FRAC
= 2, XIN_OSC0_FUNC

CLKSEL_CON52 = 0x03D0 ; Internal clock select and division register 52
> 0, 32, CLK_UART6_FRAC_DIV ; clk_uart6_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON53 = 0x03D4 ; Internal clock select and division register 53
> 7, 1, CLK_UART7_SRC_SEL ; clk_uart7_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 2, 5, CLK_UART7_SRC_DIV ; Divide clk_uart7_src by (div_con + 1).

> 0, 2, SCLK_UART6_SEL ; sclk_uart6 clock mux.
= 0, CLK_UART6_SRC
= 1, CLK_UART6_FRAC
= 2, XIN_OSC0_FUNC

CLKSEL_CON54 = 0x03D8 ; Internal clock select and division register 54
> 0, 32, CLK_UART7_FRAC_DIV ; clk_uart7_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON55 = 0x03DC ; Internal clock select and division register 55
> 7, 1, CLK_UART8_SRC_SEL ; clk_uart8_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 2, 5, CLK_UART8_SRC_DIV ; Divide clk_uart8_src by (div_con + 1).

> 0, 2, SCLK_UART7_SEL ; sclk_uart7 clock mux.
= 0, CLK_UART7_SRC
= 1, CLK_UART7_FRAC
= 2, XIN_OSC0_FUNC

CLKSEL_CON56 = 0x03E0 ; Internal clock select and division register 56
> 0, 32, CLK_UART8_FRAC_DIV ; clk_uart8_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON57 = 0x03E4 ; Internal clock select and division register 57
> 7, 1, CLK_UART9_SRC_SEL ; clk_uart9_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 2, 5, CLK_UART9_SRC_DIV ; Divide clk_uart9_src by (div_con + 1).

> 0, 2, SCLK_UART8_SEL ; sclk_uart8 clock mux.
= 0, CLK_UART8_SRC
= 1, CLK_UART8_FRAC
= 2, XIN_OSC0_FUNC

CLKSEL_CON58 = 0x03E8 ; Internal clock select and division register 58
> 0, 32, CLK_UART9_FRAC_DIV ; clk_uart9_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON59 = 0x03EC ; Internal clock select and division register 59
> 14, 2, CLK_PWM2_SEL ; clk_pwm2 clock mux.
= 0, CLK_MATRIX_100M_SRC
= 1, CLK_MATRIX_50M_SRC
= 2, XIN_OSC0_FUNC

> 12, 2, CLK_PWM1_SEL ; clk_pwm1 clock mux.
= 0, CLK_MATRIX_100M_SRC
= 1, CLK_MATRIX_50M_SRC
= 2, XIN_OSC0_FUNC

> 10, 2, CLK_SPI4_SEL ; clk_spi4 clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_150M_SRC
= 2, XIN_OSC0_FUNC

> 8, 2, CLK_SPI3_SEL ; clk_spi3 clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_150M_SRC
= 2, XIN_OSC0_FUNC

> 6, 2, CLK_SPI2_SEL ; clk_spi2 clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_150M_SRC
= 2, XIN_OSC0_FUNC

> 4, 2, CLK_SPI1_SEL ; clk_spi1 clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_150M_SRC
= 2, XIN_OSC0_FUNC

> 2, 2, CLK_SPI0_SEL ; clk_spi0 clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_150M_SRC
= 2, XIN_OSC0_FUNC

> 0, 2, SCLK_UART9_SEL ; sclk_uart9 clock mux.
= 0, CLK_UART9_SRC
= 1, CLK_UART9_FRAC
= 2, XIN_OSC0_FUNC

CLKSEL_CON60 = 0x03F0 ; Internal clock select and division register 60
> 14, 1, DBCLK_GPIO2_SEL ; dbclk_gpio2 clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_DEEPSLOW

> 9, 5, DBCLK_GPIO2_DIV ; Divide dbclk_gpio2 by (div_con + 1).

> 8, 1, DBCLK_GPIO1_SEL ; dbclk_gpio1 clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_DEEPSLOW

> 3, 5, DBCLK_GPIO1_DIV ; Divide dbclk_gpio1 by (div_con + 1).

> 2, 1, CLK_BUS_TIMER_ROOT_SEL ; clk_bus_timer_root clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_MATRIX_100M_SRC

> 0, 2, CLK_PWM3_SEL ; clk_pwm3 clock mux.
= 0, CLK_MATRIX_100M_SRC
= 1, CLK_MATRIX_50M_SRC
= 2, XIN_OSC0_FUNC

CLKSEL_CON61 = 0x03F4 ; Internal clock select and division register 61
> 11, 1, DBCLK_GPIO4_SEL ; dbclk_gpio4 clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_DEEPSLOW

> 6, 5, DBCLK_GPIO4_DIV ; Divide dbclk_gpio4 by (div_con + 1).

> 5, 1, DBCLK_GPIO3_SEL ; dbclk_gpio3 clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_DEEPSLOW

> 0, 5, DBCLK_GPIO3_DIV ; Divide dbclk_gpio3 by (div_con + 1).

CLKSEL_CON62 = 0x03F8 ; Internal clock select and division register 62
> 6, 5, CLK_BISRINTF_PLLSRC_DIV ; Divide clk_bisrintf_pllsrc by (div_con + 1).

> 5, 1, DCLK_DECOM_SEL ; dclk_decom clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_SPLL_MUX

> 0, 5, DCLK_DECOM_DIV ; Divide dclk_decom by (div_con + 1).

CLKSEL_CON63 = 0x03FC ; Internal clock select and division register 63
> 6, 1, CLK_TESTOUT_DDR01_SEL ; clk_testout_ddr01 clock mux.
= 0, CLK_DFI_CH0
= 1, CLK_DFI_CH1

> 0, 6, CLK_TESTOUT_DDR01_DIV ; Divide clk_testout_ddr01 by (div_con + 1).

CLKSEL_CON65 = 0x0404 ; Internal clock select and division register 65
> 6, 1, CLK_TESTOUT_DDR23_SEL ; clk_testout_ddr23 clock mux.
= 0, CLK_DFI_CH2
= 1, CLK_DFI_CH3

> 0, 6, CLK_TESTOUT_DDR23_DIV ; Divide clk_testout_ddr23 by (div_con + 1).

CLKSEL_CON67 = 0x040C ; Internal clock select and division register 67
> 14, 2, CLK_ISP1_CORE_SEL ; clk_isp1_core clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_SPLL_MUX

> 9, 5, CLK_ISP1_CORE_DIV ; Divide clk_isp1_core by (div_con + 1).

> 7, 2, HCLK_ISP1_ROOT_SEL ; hclk_isp1_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 5, 2, ACLK_ISP1_ROOT_SEL ; aclk_isp1_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_SPLL_MUX

> 0, 5, ACLK_ISP1_ROOT_DIV ; Divide aclk_isp1_root by (div_con + 1).

CLKSEL_CON73 = 0x0424 ; Internal clock select and division register 73
> 15, 1, CLK_TESTOUT_NPU_SEL ; clk_testout_npu clock mux.
= 0, CLK_RKNN_DSU0_SRC_T
= 1, CLK_NPU_PVTPLL

> 10, 5, CLK_TESTOUT_NPU_DIV ; Divide clk_testout_npu by (div_con + 1).

> 7, 3, CLK_RKNN_DSU0_SRC_T_SEL ; clk_rknn_dsu0_src_t clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_NPLL_MUX
= 4, CLK_SPLL_MUX

> 2, 5, CLK_RKNN_DSU0_SRC_T_DIV ; Divide clk_rknn_dsu0_src_t by (div_con + 1).

> 0, 2, HCLK_RKNN_ROOT_SEL ; hclk_rknn_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

CLKSEL_CON74 = 0x0428 ; Internal clock select and division register 74
> 12, 1, CLK_NPU_CM0_RTC_SEL ; clk_npu_cm0_rtc clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_DEEPSLOW

> 7, 5, CLK_NPU_CM0_RTC_DIV ; Divide clk_npu_cm0_rtc by (div_con + 1).

> 5, 2, HCLK_NPU_CM0_ROOT_SEL ; hclk_npu_cm0_root clock mux.
= 0, CLK_MATRIX_400M_SRC
= 1, CLK_MATRIX_200M_SRC
= 2, CLK_MATRIX_100M_SRC
= 3, XIN_OSC0_FUNC

> 4, 1, CLK_NPU_PVTPLL_SEL ; clk_npu_pvtpll clock mux.
= 0, CLK_RKNN_DSU0_SRC_T
= 1, XIN_OSC0_FUNC

> 3, 1, CLK_NPUTIMER_ROOT_SEL ; clk_nputimer_root clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_MATRIX_100M_SRC

> 1, 2, PCLK_NPUTOP_ROOT_SEL ; pclk_nputop_root clock mux.
= 0, CLK_MATRIX_100M_SRC
= 1, CLK_MATRIX_50M_SRC
= 2, XIN_OSC0_FUNC

> 0, 1, CLK_RKNN_DSU0_SEL ; clk_rknn_dsu0 clock mux.
= 0, CLK_RKNN_DSU0_SRC_T
= 1, CLK_NPU_PVTPLL

CLKSEL_CON77 = 0x0434 ; Internal clock select and division register 77
> 14, 2, CCLK_EMMC_SEL ; cclk_emmc clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, XIN_OSC0_FUNC

> 8, 6, CCLK_EMMC_DIV ; DT50 division register. Divide cclk_emmc by (div_con + 1).

> 7, 1, ACLK_NVM_ROOT_SEL ; aclk_nvm_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 2, 5, ACLK_NVM_ROOT_DIV ; Divide aclk_nvm_root by (div_con + 1).

> 0, 2, HCLK_NVM_ROOT_SEL ; hclk_nvm_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

CLKSEL_CON78 = 0x0438 ; Internal clock select and division register 78
> 12, 2, SCLK_SFC_SEL ; sclk_sfc clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, XIN_OSC0_FUNC

> 6, 6, SCLK_SFC_DIV ; Divide sclk_sfc by (div_con + 1).

> 5, 1, BCLK_EMMC_SEL ; bclk_emmc clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, BCLK_EMMC_DIV ; Divide bclk_emmc by (div_con + 1).

CLKSEL_CON80 = 0x0440 ; Internal clock select and division register 80
> 13, 1, ACLK_PHP_ROOT_SEL ; aclk_php_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 8, 5, ACLK_PHP_ROOT_DIV ; Divide aclk_php_root by (div_con + 1).

> 7, 1, ACLK_PCIE_ROOT_SEL ; aclk_pcie_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 2, 5, ACLK_PCIE_ROOT_DIV ; Divide aclk_pcie_root by (div_con + 1).

> 0, 2, PCLK_PHP_ROOT_SEL ; pclk_php_root clock mux.
= 0, CLK_MATRIX_150M_SRC
= 1, CLK_MATRIX_50M_SRC
= 2, XIN_OSC0_FUNC

CLKSEL_CON81 = 0x0444 ; Internal clock select and division register 81
> 13, 1, CLK_GMAC1_PTP_REF_SEL ; clk_gmac1_ptp_ref clock mux.
= 0, CLK_CPLL_MUX
= 1, CLK_GMAC1_PTPREFO

> 7, 6, CLK_GMAC1_PTP_REF_DIV ; Divide clk_gmac1_ptp_ref by (div_con + 1).

> 6, 1, CLK_GMAC0_PTP_REF_SEL ; clk_gmac0_ptp_ref clock mux.
= 0, CLK_CPLL_MUX
= 1, CLK_GMAC0_PTPREFO

> 0, 6, CLK_GMAC0_PTP_REF_DIV ; Divide clk_gmac0_ptp_ref by (div_con + 1).

CLKSEL_CON82 = 0x0448 ; Internal clock select and division register 82
> 15, 1, CLK_RXOOB1_SEL ; clk_rxoob1 clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 8, 7, CLK_RXOOB1_DIV ; Divide clk_rxoob1 by (div_con + 1).

> 7, 1, CLK_RXOOB0_SEL ; clk_rxoob0 clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 7, CLK_RXOOB0_DIV ; Divide clk_rxoob0 by (div_con + 1).

CLKSEL_CON83 = 0x044C ; Internal clock select and division register 83
> 15, 1, CLK_GMAC_125M_CRU_I_SEL ; clk_gmac_125m_cru_i clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 8, 7, CLK_GMAC_125M_CRU_I_DIV ; Divide clk_gmac_125m_cru_i by (div_con + 1).

> 7, 1, CLK_RXOOB2_SEL ; clk_rxoob2 clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 7, CLK_RXOOB2_DIV ; Divide clk_rxoob2 by (div_con + 1).

CLKSEL_CON84 = 0x0450 ; Internal clock select and division register 84
> 12, 2, CLK_UTMI_OTG2_SEL ; clk_utmi_otg2 clock mux.
= 0, CLK_MATRIX_150M_SRC
= 1, CLK_MATRIX_50M_SRC
= 2, XIN_OSC0_FUNC

> 8, 4, CLK_UTMI_OTG2_DIV ; Divide clk_utmi_otg2 by (div_con + 1).

> 7, 1, CLK_GMAC_50M_CRU_I_SEL ; clk_gmac_50m_cru_i clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 7, CLK_GMAC_50M_CRU_I_DIV ; Divide clk_gmac_50m_cru_i by (div_con + 1).

CLKSEL_CON85 = 0x0454 ; Internal clock select and division register 85
> 6, 6, CLK_GMAC1_TX_125M_O_DIV ; Divide clk_gmac1_tx_125m_o by (div_con + 1).
> 0, 6, CLK_GMAC0_TX_125M_O_DIV ; Divide clk_gmac0_tx_125m_o by (div_con + 1).

CLKSEL_CON89 = 0x0464 ; Internal clock select and division register 89
> 14, 2, ACLK_RKVDEC_CCU_SEL ; aclk_rkvdec_ccu clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_SPLL_MUX

> 9, 5, ACLK_RKVDEC_CCU_DIV ; Divide aclk_rkvdec_ccu by (div_con + 1).

> 7, 2, ACLK_RKVDEC0_ROOT_SEL ; aclk_rkvdec0_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_SPLL_MUX

> 2, 5, ACLK_RKVDEC0_ROOT_DIV ; Divide aclk_rkvdec0_root by (div_con + 1).

> 0, 2, HCLK_RKVDEC0_ROOT_SEL ; hclk_rkvdec0_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

CLKSEL_CON90 = 0x0468 ; Internal clock select and division register 90
> 11, 2, CLK_RKVDEC0_HEVC_CA_SEL ; clk_rkvdec0_hevc_ca clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_NPLL_MUX
= 3, CLK_MATRIX_1000M_SRC

> 6, 5, CLK_RKVDEC0_HEVC_CA_DIV ; Divide clk_rkvdec0_hevc_ca by (div_con + 1).

> 5, 1, CLK_RKVDEC0_CA_SEL ; clk_rkvdec0_ca clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, CLK_RKVDEC0_CA_DIV ; Divide clk_rkvdec0_ca by (div_con + 1).

CLKSEL_CON91 = 0x046C ; Internal clock select and division register 91
> 5, 1, CLK_RKVDEC0_CORE_SEL ; clk_rkvdec0_core clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, CLK_RKVDEC0_CORE_DIV ; Divide clk_rkvdec0_core by (div_con + 1).

CLKSEL_CON93 = 0x0474 ; Internal clock select and division register 93
> 14, 1, CLK_RKVDEC1_CA_SEL ; clk_rkvdec1_ca clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 9, 5, CLK_RKVDEC1_CA_DIV ; Divide clk_rkvdec1_ca by (div_con + 1).

> 7, 2, ACLK_RKVDEC1_ROOT_SEL ; aclk_rkvdec1_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_NPLL_MUX

> 2, 5, ACLK_RKVDEC1_ROOT_DIV ; Divide aclk_rkvdec1_root by (div_con + 1).

> 0, 2, HCLK_RKVDEC1_ROOT_SEL ; hclk_rkvdec1_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

CLKSEL_CON94 = 0x0478 ; Internal clock select and division register 94
> 12, 1, CLK_RKVDEC1_CORE_SEL ; clk_rkvdec1_core clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 7, 5, CLK_RKVDEC1_CORE_DIV ; Divide clk_rkvdec1_core by (div_con + 1).

> 5, 2, CLK_RKVDEC1_HEVC_CA_SEL ; clk_rkvdec1_hevc_ca clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_NPLL_MUX
= 3, CLK_MATRIX_1000M_SRC

> 0, 5, CLK_RKVDEC1_HEVC_CA_DIV ; Divide clk_rkvdec1_hevc_ca by (div_con + 1).

CLKSEL_CON96 = 0x0480 ; Internal clock select and division register 96
> 6, 2, HCLK_USB_ROOT_SEL ; hclk_usb_root clock mux.
= 0, CLK_MATRIX_150M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 5, 1, ACLK_USB_ROOT_SEL ; aclk_usb_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, ACLK_USB_ROOT_DIV ; Divide aclk_usb_root by (div_con + 1).

CLKSEL_CON98 = 0x0488 ; Internal clock select and division register 98
> 9, 2, HCLK_VDPU_ROOT_SEL ; hclk_vdpu_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 7, 2, ACLK_VDPU_LOW_ROOT_SEL ; aclk_vdpu_low_root clock mux.
= 0, CLK_MATRIX_400M_SRC
= 1, CLK_MATRIX_200M_SRC
= 2, CLK_MATRIX_100M_SRC
= 3, XIN_OSC0_FUNC

> 5, 2, ACLK_VDPU_ROOT_SEL ; aclk_vdpu_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX

> 0, 5, ACLK_VDPU_ROOT_DIV ; Divide aclk_vdpu_root by (div_con + 1).

CLKSEL_CON99 = 0x048C ; Internal clock select and division register 99
> 12, 1, CLK_IEP2P0_CORE_SEL ; clk_iep2p0_core clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 7, 5, CLK_IEP2P0_CORE_DIV ; Divide clk_iep2p0_core by (div_con + 1).

> 5, 2, ACLK_JPEG_DECODER_ROOT_SEL ; aclk_jpeg_decoder_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_SPLL_MUX

> 0, 5, ACLK_JPEG_DECODER_ROOT_DIV ; Divide aclk_jpeg_decoder_root by (div_con + 1).

CLKSEL_CON100 = 0x0490 ; Internal clock select and division register 100
> 13, 3, CLK_RGA3_0_CORE_SEL ; clk_rga3_0_core clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_NPLL_MUX
= 3, CLK_AUPLL_MUX
= 4, CLK_SPLL_MUX

> 8, 5, CLK_RGA3_0_CORE_DIV ; Divide clk_rga3_0_core by (div_con + 1).

> 5, 3, CLK_RGA2_CORE_SEL ; clk_rga2_core clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_NPLL_MUX
= 3, CLK_AUPLL_MUX
= 4, CLK_SPLL_MUX

> 0, 5, CLK_RGA2_CORE_DIV ; Divide clk_rga2_core by (div_con + 1).

CLKSEL_CON102 = 0x0498 ; Internal clock select and division register 102
> 14, 2, CLK_RKVENC0_CORE_SEL ; clk_rkvenc0_core clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_NPLL_MUX

> 9, 5, CLK_RKVENC0_CORE_DIV ; Divide clk_rkvenc0_core by (div_con + 1).

> 7, 2, ACLK_RKVENC0_ROOT_SEL ; aclk_rkvenc0_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_NPLL_MUX

> 2, 5, ACLK_RKVENC0_ROOT_DIV ; Divide aclk_rkvenc0_root by (div_con + 1).

> 0, 2, HCLK_RKVENC0_ROOT_SEL ; hclk_rkvenc0_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

CLKSEL_CON104 = 0x04A0 ; Internal clock select and division register 104
> 14, 2, CLK_RKVENC1_CORE_SEL ; clk_rkvenc1_core clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_NPLL_MUX

> 9, 5, CLK_RKVENC1_CORE_DIV ; Divide clk_rkvenc1_core by (div_con + 1).

> 7, 2, ACLK_RKVENC1_ROOT_SEL ; aclk_rkvenc1_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_NPLL_MUX

> 2, 5, ACLK_RKVENC1_ROOT_DIV ; Divide aclk_rkvenc1_root by (div_con + 1).

> 0, 2, HCLK_RKVENC1_ROOT_SEL ; hclk_rkvenc1_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

CLKSEL_CON106 = 0x04A8 ; Internal clock select and division register 106
> 10, 2, PCLK_VI_ROOT_SEL ; pclk_vi_root clock mux.
= 0, CLK_MATRIX_100M_SRC
= 1, CLK_MATRIX_50M_SRC
= 2, XIN_OSC0_FUNC

> 8, 2, HCLK_VI_ROOT_SEL ; hclk_vi_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 5, 3, ACLK_VI_ROOT_SEL ; aclk_vi_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_NPLL_MUX
= 3, CLK_AUPLL_MUX
= 4, CLK_SPLL_MUX

> 0, 5, ACLK_VI_ROOT_DIV ; Divide aclk_vi_root by (div_con + 1).

CLKSEL_CON107 = 0x04AC ; Internal clock select and division register 107
> 11, 2, CLK_ISP0_CORE_SEL ; clk_isp0_core clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_SPLL_MUX

> 6, 5, CLK_ISP0_CORE_DIV ; Divide clk_isp0_core by (div_con + 1).

> 5, 1, DCLK_VICAP_SEL ; dclk_vicap clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, DCLK_VICAP_DIV ; Divide dclk_vicap by (div_con + 1).

CLKSEL_CON108 = 0x04B0 ; Internal clock select and division register 108
> 14, 2, ICLK_CSIHOST01_SEL ; iclk_csihost01 clock mux.
= 0, CLK_MATRIX_400M_SRC
= 1, CLK_MATRIX_200M_SRC
= 2, CLK_MATRIX_100M_SRC
= 3, XIN_OSC0_FUNC

> 12, 2, CLK_FISHEYE1_CORE_SEL ; clk_fisheye1_core clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_SPLL_MUX

> 7, 5, CLK_FISHEYE1_CORE_DIV ; Divide clk_fisheye1_core by (div_con + 1).

> 5, 2, CLK_FISHEYE0_CORE_SEL ; clk_fisheye0_core clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_SPLL_MUX

> 0, 5, CLK_FISHEYE0_CORE_DIV ; Divide clk_fisheye0_core by (div_con + 1).

CLKSEL_CON110 = 0x04B8 ; Internal clock select and division register 110
> 12, 2, PCLK_VOP_ROOT_SEL ; pclk_vop_root clock mux.
= 0, CLK_MATRIX_100M_SRC
= 1, CLK_MATRIX_50M_SRC
= 2, XIN_OSC0_FUNC

> 10, 2, HCLK_VOP_ROOT_SEL ; hclk_vop_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 8, 2, ACLK_VOP_LOW_ROOT_SEL ; aclk_vop_low_root clock mux.
= 0, CLK_MATRIX_400M_SRC
= 1, CLK_MATRIX_200M_SRC
= 2, CLK_MATRIX_100M_SRC
= 3, XIN_OSC0_FUNC

> 5, 3, ACLK_VOP_ROOT_SEL ; aclk_vop_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_NPLL_MUX
= 4, CLK_SPLL_MUX

> 0, 5, ACLK_VOP_ROOT_DIV ; Divide aclk_vop_root by (div_con + 1).

CLKSEL_CON111 = 0x04BC ; Internal clock select and division register 111
> 14, 2, DCLK_VP1_SRC_SEL ; dclk_vp1_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_V0PLL_MUX
= 3, CLK_AUPLL_MUX

> 9, 5, DCLK_VP1_SRC_DIV ; Divide dclk_vp1_src by (div_con + 1).

> 7, 2, DCLK_VP0_SRC_SEL ; dclk_vp0_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_V0PLL_MUX
= 3, CLK_AUPLL_MUX

> 0, 7, DCLK_VP0_SRC_DIV ; Divide dclk_vp0_src by (div_con + 1).

CLKSEL_CON112 = 0x04C0 ; Internal clock select and division register 112
> 11, 2, DCLK_VP2_SEL ; dclk_vp2 clock mux.
= 0, DCLK_VP2_SRC
= 1, CLK_HDMIPHY_PIXEL0_O
= 2, CLK_HDMIPHY_PIXEL1_O

> 9, 2, DCLK_VP1_SEL ; dclk_vp1 clock mux.
= 0, DCLK_VP1_SRC
= 1, CLK_HDMIPHY_PIXEL0_O
= 2, CLK_HDMIPHY_PIXEL1_O

> 7, 2, DCLK_VP0_SEL ; dclk_vp0 clock mux.
= 0, DCLK_VP0_SRC
= 1, CLK_HDMIPHY_PIXEL0_O
= 2, CLK_HDMIPHY_PIXEL1_O

> 5, 2, DCLK_VP2_SRC_SEL ; dclk_vp2_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_V0PLL_MUX
= 3, CLK_AUPLL_MUX

> 0, 5, DCLK_VP2_SRC_DIV ; Divide dclk_vop2_src by (div_con + 1).

CLKSEL_CON113 = 0x04C4 ; Internal clock select and division register 113
> 7, 2, DCLK_VP3_SEL ; dclk_vp3 clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_V0PLL_MUX
= 3, CLK_AUPLL_MUX

> 0, 7, DCLK_VP3_DIV ; Divide dclk_vp3 by (div_con + 1).

CLKSEL_CON114 = 0x04C8 ; Internal clock select and division register 114
> 7, 2, CLK_DSIHOST0_SEL ; clk_dsihost0 clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_V0PLL_MUX
= 3, CLK_SPLL_MUX

> 0, 7, CLK_DSIHOST0_DIV ; Divide clk_dsihost0 by (div_con + 1).

CLKSEL_CON115 = 0x04CC ; Internal clock select and division register 115
> 9, 1, ACLK_VOP_SUB_SRC_SEL ; aclk_vop_sub_src clock mux.
= 0, ACLK_VOP_ROOT
= 1, ACLK_VOP_DIV2_SRC

> 7, 2, CLK_DSIHOST1_SEL ; clk_dsihost1 clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_V0PLL_MUX
= 3, CLK_SPLL_MUX

> 0, 7, CLK_DSIHOST1_DIV ; Divide clk_dsihost1 by (div_con + 1).

CLKSEL_CON116 = 0x04D0 ; Internal clock select and division register 116
> 12, 2, PCLK_VO0_S_ROOT_SEL ; pclk_vo0_s_root clock mux.
= 0, CLK_MATRIX_100M_SRC
= 1, CLK_MATRIX_50M_SRC
= 2, XIN_OSC0_FUNC

> 10, 2, PCLK_VO0_ROOT_SEL ; pclk_vo0_root clock mux.
= 0, CLK_MATRIX_100M_SRC
= 1, CLK_MATRIX_50M_SRC
= 2, XIN_OSC0_FUNC

> 8, 2, HCLK_VO0_S_ROOT_SEL ; hclk_vo0_s_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 6, 2, HCLK_VO0_ROOT_SEL ; hclk_vo0_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 5, 1, ACLK_VO0_ROOT_SEL ; aclk_vo0_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, ACLK_VO0_ROOT_DIV ; Divide aclk_vo0_root by (div_con + 1).

CLKSEL_CON117 = 0x04D4 ; Internal clock select and division register 117
> 8, 16, CLK_AUX16MHZ_1_DIV ; Divide clk_aux16mhz_1 by (div_con + 1).
> 0, 8, CLK_AUX16MHZ_0_DIV ; Divide clk_aux16mhz_0 by (div_con + 1).

CLKSEL_CON118 = 0x04D8 ; Internal clock select and division register 118
> 5, 1, CLK_I2S4_8CH_TX_SRC_SEL ; clk_i2s4_8ch_tx_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 0, 5, CLK_I2S4_8CH_TX_SRC_DIV ; Divide clk_i2s4_8ch_tx_src by (div_con + 1).

CLKSEL_CON119 = 0x04DC ; Internal clock select and division register 119
> 0, 32, CLK_I2S4_8CH_TX_FRAC_DIV ; clk_i2s4_8ch_tx_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON120 = 0x04E0 ; Internal clock select and division register 120
> 8, 1, CLK_I2S8_8CH_TX_SRC_SEL ; clk_i2s8_8ch_tx_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 3, 5, CLK_I2S8_8CH_TX_SRC_DIV ; Divide clk_i2s8_8ch_tx_src by (div_con + 1).

> 0, 2, MCLK_I2S4_8CH_TX_SEL ; mclk_i2s4_8ch_tx clock mux.
= 0, CLK_I2S4_8CH_TX_SRC
= 1, CLK_I2S4_8CH_TX_FRAC
= 2, I2S4_MCLKIN
= 3, XIN_OSC0_HALF

CLKSEL_CON121 = 0x04E4 ; Internal clock select and division register 121
> 0, 32, CLK_I2S8_8CH_TX_FRAC_DIV ; clk_i2s8_8ch_tx_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON122 = 0x04E8 ; Internal clock select and division register 122
> 8, 1, CLK_SPDIF2_DP0_SRC_SEL ; clk_spdif2_dp0_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 3, 5, CLK_SPDIF2_DP0_SRC_DIV ; Divide clk_spdif2_dp0_src by (div_con + 1).

> 0, 2, MCLK_I2S8_8CH_TX_SEL ; mclk_i2s8_8ch_tx clock mux.
= 0, CLK_I2S8_8CH_TX_SRC
= 1, CLK_I2S8_8CH_TX_FRAC
= 2, I2S8_MCLKIN
= 3, XIN_OSC0_HALF

CLKSEL_CON123 = 0x04EC ; Internal clock select and division register 123
> 0, 32, CLK_SPDIF2_DP0_FRAC_DIV ; clk_spdif2_dp0_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON124 = 0x04F0 ; Internal clock select and division register 124
> 7, 1, CLK_SPDIF5_DP1_SRC_SEL ; clk_spdif5_dp1_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 2, 5, CLK_SPDIF5_DP1_SRC_DIV ; Divide clk_spdif5_dp1_src by (div_con + 1).

> 0, 2, MCLK_4X_SPDIF2_DP0_SEL ; mclk_4x_spdif2_dp0 clock mux.
= 0, CLK_SPDIF2_DP0_SRC
= 1, CLK_SPDIF2_DP0_FRAC
= 2, XIN_OSC0_HALF

CLKSEL_CON125 = 0x04F4 ; Internal clock select and division register 125
> 0, 32, CLK_SPDIF5_DP1_FRAC_DIV ; clk_spdif5_dp1_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON126 = 0x04F8 ; Internal clock select and division register 126
> 0, 2, MCLK_4X_SPDIF5_DP1_SEL ; mclk_4x_spdif5_dp1 clock mux.
= 0, CLK_SPDIF5_DP1_SRC
= 1, CLK_SPDIF5_DP1_FRAC
= 2, XIN_OSC0_HALF

CLKSEL_CON128 = 0x0500 ; Internal clock select and division register 128
> 13, 2, HCLK_VO1_ROOT_SEL ; hclk_vo1_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 12, 1, ACLK_HDMIRX_ROOT_SEL ; aclk_hdmirx_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 7, 5, ACLK_HDMIRX_ROOT_DIV ; Divide aclk_hdmirx_root by (div_con + 1).

> 5, 2, ACLK_HDCP1_ROOT_SEL ; aclk_hdcp1_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_HDMITRX_REFSRC

> 0, 5, ACLK_HDCP1_ROOT_DIV ; Divide aclk_hdcp1_root by (div_con + 1).

CLKSEL_CON129 = 0x0504 ; Internal clock select and division register 129
> 11, 1, CLK_I2S7_8CH_RX_SRC_SEL ; clk_i2s7_8ch_rx_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 6, 5, CLK_I2S7_8CH_RX_SRC_DIV ; Divide clk_i2s7_8ch_rx_src by (div_con + 1).

> 4, 2, PCLK_VO1_S_ROOT_SEL ; pclk_vo1_s_root clock mux.
= 0, CLK_MATRIX_100M_SRC
= 1, CLK_MATRIX_50M_SRC
= 2, XIN_OSC0_FUNC

> 2, 2, PCLK_VO1_ROOT_SEL ; pclk_vo1_root clock mux.
= 0, CLK_MATRIX_150M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, XIN_OSC0_FUNC

> 0, 2, HCLK_VO1_S_ROOT_SEL ; hclk_vo1_s_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

CLKSEL_CON130 = 0x0508 ; Internal clock select and division register 130
> 0, 32, CLK_I2S7_8CH_RX_FRAC_DIV ; clk_i2s7_8ch_rx_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON131 = 0x050C ; Internal clock select and division register 131
> 0, 2, MCLK_I2S7_8CH_RX_SEL ; mclk_i2s7_8ch_rx clock mux.
= 0, CLK_I2S7_8CH_RX_SRC
= 1, CLK_I2S7_8CH_RX_FRAC
= 2, I2S7_MCLKIN
= 3, XIN_OSC0_HALF

CLKSEL_CON133 = 0x0514 ; Internal clock select and division register 133
> 6, 1, CLK_HDMITX0_EARC_SEL ; clk_hdmitx0_earc clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 1, 5, CLK_HDMITX0_EARC_DIV ; Divide clk_hdmitx0_earc by (div_con + 1).

CLKSEL_CON136 = 0x0520 ; Internal clock select and division register 136
> 6, 1, CLK_HDMITX1_EARC_SEL ; clk_hdmitx1_earc clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 1, 5, CLK_HDMITX1_EARC_DIV ; Divide clk_hdmitx1_earc by (div_con + 1).

CLKSEL_CON138 = 0x0528 ; Internal clock select and division register 138
> 8, 1, CLK_HDMIRX_AUD_SRC_SEL ; clk_hdmirx_aud_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 0, 8, CLK_HDMIRX_AUD_SRC_DIV ; Divide clk_hdmirx_aud_src by (div_con + 1).

CLKSEL_CON139 = 0x052C ; Internal clock select and division register 139
> 0, 32, CLK_HDMIRX_AUD_FRAC_DIV ; clk_hdmirx_aud_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON140 = 0x0530 ; Internal clock select and division register 140
> 10, 1, CLK_I2S5_8CH_TX_SRC_SEL ; clk_i2s5_8ch_tx_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 5, 5, CLK_I2S5_8CH_TX_SRC_DIV ; Divide clk_i2s5_8ch_tx_src by (div_con + 1).

> 3, 2, CLK_EDP1_200M_SEL ; clk_edp1_200m clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 1, 2, CLK_EDP0_200M_SEL ; clk_edp0_200m clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 0, 1, CLK_HDMIRX_AUD_SEL ; clk_hdmirx_aud clock mux.
= 0, CLK_HDMIRX_AUD_SRC
= 1, CLK_HDMIRX_AUD_FRAC

CLKSEL_CON141 = 0x0534 ; Internal clock select and division register 141
> 0, 32, CLK_I2S5_8CH_TX_FRAC_DIV ; clk_i2s5_8ch_tx_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON142 = 0x0538 ; Internal clock select and division register 142
> 0, 2, MCLK_I2S5_8CH_TX_SEL ; mclk_i2s5_8ch_tx clock mux.
= 0, CLK_I2S5_8CH_TX_SRC
= 1, CLK_I2S5_8CH_TX_FRAC
= 2, I2S5_MCLKIN
= 3, XIN_OSC0_HALF

CLKSEL_CON144 = 0x0540 ; Internal clock select and division register 144
> 8, 1, CLK_I2S6_8CH_TX_SRC_SEL ; clk_i2s6_8ch_tx_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 3, 5, CLK_I2S6_8CH_TX_SRC_DIV ; Divide clk_i2s6_8ch_tx_src by (div_con + 1).

CLKSEL_CON145 = 0x0544 ; Internal clock select and division register 145
> 0, 32, CLK_I2S6_8CH_TX_FRAC_DIV ; clk_i2s6_8ch_tx_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON146 = 0x0548 ; Internal clock select and division register 146
> 7, 1, CLK_I2S6_8CH_RX_SRC_SEL ; clk_i2s6_8ch_rx_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 2, 5, CLK_I2S6_8CH_RX_SRC_DIV ; Divide clk_i2s6_8ch_rx_src by (div_con + 1).

> 0, 2, MCLK_I2S6_8CH_TX_SEL ; mclk_i2s6_8ch_tx clock mux.
= 0, CLK_I2S6_8CH_TX_SRC
= 1, CLK_I2S6_8CH_TX_FRAC
= 2, I2S6_MCLKIN
= 3, XIN_OSC0_HALF

CLKSEL_CON147 = 0x054C ; Internal clock select and division register 147
> 0, 32, CLK_I2S6_8CH_RX_FRAC_DIV ; clk_i2s6_8ch_rx_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON148 = 0x0550 ; Internal clock select and division register 148
> 9, 1, CLK_SPDIF3_SRC_SEL ; clk_spdif3_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 4, 5, CLK_SPDIF3_SRC_DIV ; Divide clk_spdif3_src by (div_con + 1).

> 2, 2, I2S6_8CH_MCLKOUT_SEL ; i2s6_8ch_mclkout clock mux.
= 0, MCLK_I2S6_8CH_TX
= 1, MCLK_I2S6_8CH_RX
= 2, XIN_OSC0_HALF

> 0, 2, MCLK_I2S6_8CH_RX_SEL ; mclk_i2s6_8ch_rx clock mux.
= 0, CLK_I2S6_8CH_RX_SRC
= 1, CLK_I2S6_8CH_RX_FRAC
= 2, I2S6_MCLKIN
= 3, XIN_OSC0_HALF

CLKSEL_CON149 = 0x0554 ; Internal clock select and division register 149
> 0, 32, CLK_SPDIF3_FRAC_DIV ; clk_spdif3_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON150 = 0x0558 ; Internal clock select and division register 150
> 7, 1, CLK_SPDIF4_SRC_SEL ; clk_spdif4_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 2, 5, CLK_SPDIF4_SRC_DIV ; Divide clk_spdif4_src by (div_con + 1).

> 0, 2, MCLK_SPDIF3_SEL ; mclk_spdif3 clock mux.
= 0, CLK_SPDIF3_SRC
= 1, CLK_SPDIF3_FRAC
= 2, XIN_OSC0_HALF

CLKSEL_CON151 = 0x055C ; Internal clock select and division register 151
> 0, 32, CLK_SPDIF4_FRAC_DIV ; clk_spdif4_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON152 = 0x0560 ; Internal clock select and division register 152
> 14, 2, MCLK_SPDIFRX1_SEL ; mclk_spdifrx1 clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX

> 9, 5, MCLK_SPDIFRX1_DIV ; Divide mclk_spdifrx1 by (div_con + 1).

> 7, 2, MCLK_SPDIFRX0_SEL ; mclk_spdifrx0 clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX

> 2, 5, MCLK_SPDIFRX0_DIV ; Divide mclk_spdifrx0 by (div_con + 1).

> 0, 2, MCLK_SPDIF4_SEL ; mclk_spdif4 clock mux.
= 0, CLK_SPDIF4_SRC
= 1, CLK_SPDIF4_FRAC
= 2, XIN_OSC0_HALF

CLKSEL_CON153 = 0x0564 ; Internal clock select and division register 153
> 12, 1, CLK_I2S9_8CH_RX_SRC_SEL ; clk_i2s9_8ch_rx_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 7, 5, CLK_I2S9_8CH_RX_SRC_DIV ; Divide clk_i2s9_8ch_rx_src by (div_con + 1).

> 5, 2, MCLK_SPDIFRX2_SEL ; mclk_spdifrx2 clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX

> 0, 5, MCLK_SPDIFRX2_DIV ; Divide mclk_spdifrx2 by (div_con + 1).

CLKSEL_CON154 = 0x0568 ; Internal clock select and division register 154
> 0, 32, CLK_I2S9_8CH_RX_FRAC_DIV ; clk_i2s9_8ch_rx_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON155 = 0x056C ; Internal clock select and division register 155
> 8, 1, CLK_I2S10_8CH_RX_SRC_SEL ; clk_i2s10_8ch_rx_src clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_AUPLL_MUX

> 3, 5, CLK_I2S10_8CH_RX_SRC_DIV ; Divide clk_i2s10_8ch_rx_src by (div_con + 1).

> 0, 2, MCLK_I2S9_8CH_RX_SEL ; mclk_i2s9_8ch_rx clock mux.
= 0, CLK_I2S9_8CH_RX_SRC
= 1, CLK_I2S9_8CH_RX_FRAC
= 2, I2S9_MCLKIN
= 3, XIN_OSC0_HALF

CLKSEL_CON156 = 0x0570 ; Internal clock select and division register 156
> 0, 32, CLK_I2S10_8CH_RX_FRAC_DIV ; clk_i2s10_8ch_rx_frac fraction division register. High 16-bit for numerator Low 16-bit for denominator

CLKSEL_CON157 = 0x0574 ; Internal clock select and division register 157
> 7, 1, CLK_HDMITRX_REFSRC_SEL ; clk_hdmitrx_refsrc clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 2, 5, CLK_HDMITRX_REFSRC_DIV ; NP5 division register. Divide clk_hdmitrx_refsrc by ((2 * div_con + 3) / 2).

> 0, 2, MCLK_I2S10_8CH_RX_SEL ; mclk_i2s10_8ch_rx clock mux.
= 0, CLK_I2S10_8CH_RX_SRC
= 1, CLK_I2S10_8CH_RX_FRAC
= 2, I2S10_MCLKIN
= 3, XIN_OSC0_HALF

CLKSEL_CON158 = 0x0578 ; Internal clock select and division register 158
> 14, 1, CLK_GPU_SRC_SEL ; clk_gpu_src clock mux.
= 0, CLK_GPU_SRC_T
= 1, CLK_GPU_PVTPLL

> 13, 1, CLK_TESTOUT_GPU_SEL ; clk_testout_gpu clock mux.
= 0, CLK_GPU_SRC_T
= 1, CLK_GPU_PVTPLL

> 8, 5, CLK_TESTOUT_GPU_DIV ; Divide clk_testout_gpu by (div_con + 1).

> 5, 3, CLK_GPU_SRC_T_SEL ; clk_gpu_src_t clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_NPLL_MUX
= 4, CLK_SPLL_MUX

> 0, 5, CLK_GPU_SRC_T_DIV ; Divide clk_gpu_src_t by (div_con + 1).

CLKSEL_CON159 = 0x057C ; Internal clock select and division register 159
> 10, 5, ACLK_M0_GPU_BIU_DIV ; Divide aclk_m0_gpu_biu by (div_con + 1).
> 5, 5, ACLK_S_GPU_BIU_DIV ; Divide aclk_s_gpu_biu by (div_con + 1).
> 0, 5, CLK_GPU_STACKS_DIV ; Divide clk_gpu_stacks by (div_con + 1).

CLKSEL_CON160 = 0x0580 ; Internal clock select and division register 160
> 10, 5, ACLK_M3_GPU_BIU_DIV ; Divide aclk_m3_gpu_biu by (div_con + 1).
> 5, 5, ACLK_M2_GPU_BIU_DIV ; Divide aclk_m2_gpu_biu by (div_con + 1).
> 0, 5, ACLK_M1_GPU_BIU_DIV ; Divide aclk_m1_gpu_biu by (div_con + 1).

CLKSEL_CON161 = 0x0584 ; Internal clock select and division register 161
> 2, 1, CLK_GPU_PVTPLL_SEL ; clk_gpu_pvtpll clock mux.
= 0, CLK_GPU_SRC_T
= 1, XIN_OSC0_FUNC

> 0, 2, PCLK_GPU_ROOT_SEL ; pclk_gpu_root clock mux.
= 0, CLK_MATRIX_100M_SRC
= 1, CLK_MATRIX_50M_SRC
= 2, XIN_OSC0_FUNC

CLKSEL_CON163 = 0x058C ; Internal clock select and division register 163
> 7, 2, PCLK_AV1_ROOT_SEL ; pclk_av1_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 5, 2, ACLK_AV1_ROOT_SEL ; aclk_av1_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX

> 0, 5, ACLK_AV1_ROOT_DIV ; Divide aclk_av1_root by (div_con + 1).

CLKSEL_CON165 = 0x0594 ; Internal clock select and division register 165
> 12, 1, CLK_DDR_TIMER_ROOT_SEL ; clk_ddr_timer_root clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_MATRIX_100M_SRC

> 10, 2, ACLK_CENTER_S400_ROOT_SEL ; aclk_center_s400_root clock mux.
= 0, CLK_MATRIX_400M_SRC
= 1, CLK_MATRIX_200M_SRC
= 2, CLK_MATRIX_100M_SRC
= 3, XIN_OSC0_FUNC

> 8, 2, ACLK_CENTER_S200_ROOT_SEL ; aclk_center_s200_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 6, 2, PCLK_CENTER_ROOT_SEL ; pclk_center_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 4, 2, HCLK_CENTER_ROOT_SEL ; hclk_center_root clock mux.
= 0, CLK_MATRIX_400M_SRC
= 1, CLK_MATRIX_200M_SRC
= 2, CLK_MATRIX_100M_SRC
= 3, XIN_OSC0_FUNC

> 2, 2, ACLK_CENTER_LOW_ROOT_SEL ; aclk_center_low_root clock mux.
= 0, CLK_MATRIX_500M_SRC
= 1, CLK_MATRIX_250M_SRC
= 2, CLK_MATRIX_100M_SRC
= 3, XIN_OSC0_FUNC

> 0, 2, ACLK_CENTER_ROOT_SEL ; aclk_center_root clock mux.
= 0, CLK_MATRIX_700M_SRC
= 1, CLK_MATRIX_400M_SRC
= 2, CLK_MATRIX_200M_SRC
= 3, XIN_OSC0_FUNC

CLKSEL_CON166 = 0x0598 ; Internal clock select and division register 166
> 5, 1, CLK_DDR_CM0_RTC_SEL ; clk_ddr_cm0_rtc clock mux.
= 0, XIN_OSC0_FUNC
= 1, CLK_DEEPSLOW

> 0, 5, CLK_DDR_CM0_RTC_DIV ; Divide clk_ddr_cm0_rtc by (div_con + 1).

CLKSEL_CON170 = 0x05A8 ; Internal clock select and division register 170
> 6, 2, HCLK_VO1USB_TOP_ROOT_SEL ; hclk_vo1usb_top_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 5, 1, ACLK_VO1USB_TOP_ROOT_SEL ; aclk_vo1usb_top_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX

> 0, 5, ACLK_VO1USB_TOP_ROOT_DIV ; Divide aclk_vo1usb_top_root by (div_con + 1).

CLKSEL_CON172 = 0x05B0 ; Internal clock select and division register 172
> 8, 2, CCLK_SRC_SDIO_SEL ; cclk_src_sdio clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, XIN_OSC0_FUNC

> 2, 6, CCLK_SRC_SDIO_DIV ; DT50 division register. Divide cclk_src_sdio by (div_con + 1).

> 0, 2, HCLK_SDIO_ROOT_SEL ; hclk_sdio_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

CLKSEL_CON174 = 0x05B8 ; Internal clock select and division register 174
> 14, 2, CLK_RGA3_1_CORE_SEL ; clk_rga3_1_core clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX
= 3, CLK_SPLL_MUX

> 9, 5, CLK_RGA3_1_CORE_DIV ; Divide clk_rga3_1_core by (div_con + 1).

> 7, 2, HCLK_RGA3_ROOT_SEL ; hclk_rga3_root clock mux.
= 0, CLK_MATRIX_200M_SRC
= 1, CLK_MATRIX_100M_SRC
= 2, CLK_MATRIX_50M_SRC
= 3, XIN_OSC0_FUNC

> 5, 2, ACLK_RGA3_ROOT_SEL ; aclk_rga3_root clock mux.
= 0, CLK_GPLL_MUX
= 1, CLK_CPLL_MUX
= 2, CLK_AUPLL_MUX

> 0, 5, ACLK_RGA3_ROOT_DIV ; Divide aclk_rga3_root by (div_con + 1).

CLKSEL_CON176 = 0x05C0 ; Internal clock select and division register 176
> 6, 6, CLK_REF_PIPE_PHY1_PLL_SRC_DIV ; Divide clk_ref_pipe_phy1_pll_src by (div_con + 1).
> 0, 6, CLK_REF_PIPE_PHY0_PLL_SRC_DIV ; Divide clk_ref_pipe_phy0_pll_src by (div_con + 1).

CLKSEL_CON177 = 0x05C4 ; Internal clock select and division register 177
> 8, 1, CLK_REF_PIPE_PHY2_SEL ; clk_ref_pipe_phy2 clock mux.
= 0, CLK_REF_PIPE_PHY2_OSC_SRC
= 1, CLK_REF_PIPE_PHY2_PLL_SRC

> 7, 1, CLK_REF_PIPE_PHY1_SEL ; clk_ref_pipe_phy1 clock mux.
= 0, CLK_REF_PIPE_PHY1_OSC_SRC
= 1, CLK_REF_PIPE_PHY1_PLL_SRC

> 6, 1, CLK_REF_PIPE_PHY0_SEL ; clk_ref_pipe_phy0 clock mux.
= 0, CLK_REF_PIPE_PHY0_OSC_SRC
= 1, CLK_REF_PIPE_PHY0_PLL_SRC

> 0, 6, CLK_REF_PIPE_PHY2_PLL_SRC_DIV ; Divide clk_ref_pipe_phy2_pll_src by (div_con + 1).

GATE_CON00 = 0x0800 ; Internal clock gate and division register 0
> 15, 1, CLK_MATRIX_1200M_SRC_EN ; clk_matrix_1200m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, CLK_MATRIX_1000M_SRC_EN ; clk_matrix_1000m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, CLK_MATRIX_800M_SRC_EN ; clk_matrix_800m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, CLK_MATRIX_700M_SRC_EN ; clk_matrix_700m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, CLK_MATRIX_650M_SRC_EN ; clk_matrix_650m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, CLK_MATRIX_600M_SRC_EN ; clk_matrix_600m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_MATRIX_500M_SRC_EN ; clk_matrix_500m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_MATRIX_450M_SRC_EN ; clk_matrix_450m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_MATRIX_400M_SRC_EN ; clk_matrix_400m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_MATRIX_350M_SRC_EN ; clk_matrix_350m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_MATRIX_300M_SRC_EN ; clk_matrix_300m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_MATRIX_250M_SRC_EN ; clk_matrix_250m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_MATRIX_200M_SRC_EN ; clk_matrix_200m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_MATRIX_150M_SRC_EN ; clk_matrix_150m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_MATRIX_100M_SRC_EN ; clk_matrix_100m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_MATRIX_50M_SRC_EN ; clk_matrix_50m_src clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON01 = 0x0804 ; Internal clock gate and division register 1
> 15, 1, ACLK_TOP_M500_BIU_EN ; aclk_top_m500_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, ACLK_TOP_S400_ROOT_EN ; aclk_top_s400_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, ACLK_TOP_S200_ROOT_EN ; aclk_top_s200_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, ACLK_TOP_M400_ROOT_EN ; aclk_top_m400_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, ACLK_TOP_M500_ROOT_EN ; aclk_top_m500_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, ACLK_TOP_M300_ROOT_EN ; aclk_top_m300_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, PCLK_CSIPHY1_EN ; pclk_csiphy1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, PCLK_CSIPHY0_EN ; pclk_csiphy0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_TOP_BIU_EN ; pclk_top_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, ACLK_TOP_BIU_EN ; aclk_top_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, ACLK_LOW_TOP_ROOT_EN ; aclk_low_top_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, PCLK_TOP_ROOT_EN ; pclk_top_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_TOP_ROOT_EN ; aclk_top_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON02 = 0x0808 ; Internal clock gate and division register 2
> 15, 1, CLK_USBDP_COMBO_PHY1_IMMORTAL_EN ; clk_usbdp_combo_phy1_immortal clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_USBDP_COMBO_PHY0_IMMORTAL_EN ; clk_usbdp_combo_phy0_immortal clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_TESTOUT_GRP0_EN ; clk_testout_grp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_TESTOUT_TOP_EN ; clk_testout_top clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, ACLK_TOP_M300_BIU_EN ; aclk_top_m300_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, ACLK_TOP_S400_BIU_EN ; aclk_top_s400_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_TOP_S200_BIU_EN ; aclk_top_s200_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_TOP_M400_BIU_EN ; aclk_top_m400_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON03 = 0x080C ; Internal clock gate and division register 3
> 15, 1, PCLK_MIPI_DCPHY0_GRF_EN ; pclk_mipi_dcphy0_grf clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, PCLK_MIPI_DCPHY0_EN ; pclk_mipi_dcphy0 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON04 = 0x0810 ; Internal clock gate and division register 4
> 11, 1, PCLK_APB2ASB_SLV_IOC_RIGHT_EN ; pclk_apb2asb_slv_ioc_right clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, PCLK_APB2ASB_SLV_IOC_TOP_EN ; pclk_apb2asb_slv_ioc_top clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, PCLK_APB2ASB_SLV_EMMCIO_EN ; pclk_apb2asb_slv_emmcio clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, PCLK_APB2ASB_SLV_VCCIO6_EN ; pclk_apb2asb_slv_vccio6 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, PCLK_APB2ASB_SLV_VCCIO3_5_EN ; pclk_apb2asb_slv_vccio3_5 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, PCLK_APB2ASB_SLV_CSIPHY_EN ; pclk_apb2asb_slv_csiphy clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, PCLK_APB2ASB_SLV_CDPHY_EN ; pclk_apb2asb_slv_cdphy clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_MIPI_DCPHY1_GRF_EN ; pclk_mipi_dcphy1_grf clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_MIPI_DCPHY1_EN ; pclk_mipi_dcphy1 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON05 = 0x0814 ; Internal clock gate and division register 5
> 15, 1, HCLK_CHANNEL_SECURE2CENTER_EN ; hclk_channel_secure2center clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, HCLK_CHANNEL_SECURE2VO1USB_EN ; hclk_channel_secure2vo1usb clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, CLK_MIPI_CAMERAOUT_M4_EN ; clk_mipi_camaraout_m4 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, CLK_MIPI_CAMERAOUT_M3_EN ; clk_mipi_camaraout_m3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, CLK_MIPI_CAMERAOUT_M2_EN ; clk_mipi_camaraout_m2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, CLK_MIPI_CAMERAOUT_M1_EN ; clk_mipi_camaraout_m1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_MIPI_CAMERAOUT_M0_EN ; clk_mipi_camaraout_m0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, ACLK_CHANNEL_SECURE2CENTER_EN ; aclk_channel_secure2center clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, ACLK_CHANNEL_SECURE2VO1USB_EN ; aclk_channel_secure2vo1usb clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_CIFOUT_OUT_EN ; clk_cifout_out clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, REFCLKO25M_ETH1_OUT_EN ; refclko25m_eth1_out clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, REFCLKO25M_ETH0_OUT_EN ; refclko25m_eth0_out clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, MCLK_GMAC0_OUT_EN ; mclk_gmac0_out clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PCLK_CRU_EN ; pclk_cru clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON06 = 0x0818 ; Internal clock gate and division register 6
> 1, 1, PCLK_CHANNEL_SECURE2CENTER_EN ; pclk_channel_secure2center clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PCLK_CHANNEL_SECURE2VO1USB_EN ; pclk_channel_secure2vo1usb clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON07 = 0x081C ; Internal clock gate and division register 7
> 15, 1, CLK_I2S2_2CH_FRAC_EN ; clk_i2s2_2ch_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, CLK_I2S2_2CH_EN ; clk_i2s2_2ch_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, HCLK_I2S3_2CH_EN ; hclk_i2s3_2ch clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, HCLK_I2S2_2CH_EN ; hclk_i2s2_2ch clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, PCLK_ACDCDIG_EN ; pclk_acdcdig clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, MCLK_I2S0_8CH_RX_EN ; mclk_i2s0_8ch_rx clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_I2S0_8CH_FRAC_RX_EN ; clk_i2s0_8ch_rx_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_I2S0_8CH_RX_EN ; clk_i2s0_8ch_rx_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, MCLK_I2S0_8CH_TX_EN ; mclk_i2s0_8ch_tx clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_I2S0_8CH_FRAC_TX_EN ; clk_i2s0_8ch_tx_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_I2S0_8CH_TX_EN ; clk_i2s0_8ch_tx_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, HCLK_I2S0_8CH_EN ; hclk_i2s0_8ch clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_AUDIO_BIU_EN ; pclk_audio_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_AUDIO_BIU_EN ; hclk_audio_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, PCLK_AUDIO_ROOT_EN ; pclk_audio_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, HCLK_AUDIO_ROOT_EN ; hclk_audio_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON08 = 0x0820 ; Internal clock gate and division register 8
> 15, 1, CLK_SPDIF0_EN ; clk_spdif0_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, HCLK_SPDIF0_EN ; hclk_spdif0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_DAC_ACDCDIG_EN ; clk_dac_acdcdig clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, MCLK_I2S3_2CH_EN ; mclk_i2s3_2ch clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_I2S3_2CH_FRAC_EN ; clk_i2s3_2ch_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_I2S3_2CH_EN ; clk_i2s3_2ch_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, MCLK_I2S2_2CH_EN ; mclk_i2s2_2ch clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON09 = 0x0824 ; Internal clock gate and division register 9
> 7, 1, MCLK_PDM1_EN ; mclk_pdm1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, HCLK_PDM1_EN ; hclk_pdm1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, MCLK_SPDIF1_EN ; mclk_spdif1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_SPDIF1_FRAC_EN ; clk_spdif1_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_SPDIF1_EN ; clk_spdif1_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_SPDIF1_EN ; hclk_spdif1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, MCLK_SPDIF0_EN ; mclk_spdif0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_SPDIF0_FRAC_EN ; clk_spdif0_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON10 = 0x0828 ; Internal clock gate and division register 10
> 15, 1, PCLK_I2C8_EN ; pclk_i2c8 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, PCLK_I2C7_EN ; pclk_i2c7 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, PCLK_I2C6_EN ; pclk_i2c6 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, PCLK_I2C5_EN ; pclk_i2c5 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, PCLK_I2C4_EN ; pclk_i2c4 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, PCLK_I2C3_EN ; pclk_i2c3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, PCLK_I2C2_EN ; pclk_i2c2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, PCLK_I2C1_EN ; pclk_i2c1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, ACLK_DMAC2_EN ; aclk_dmac2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, ACLK_DMAC1_EN ; aclk_dmac1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_DMAC0_EN ; aclk_dmac0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, ACLK_GIC_EN ; aclk_gic clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, PCLK_BUS_BIU_EN ; pclk_bus_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_BUS_BIU_EN ; aclk_bus_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_BUS_ROOT_EN ; aclk_bus_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON11 = 0x082C ; Internal clock gate and division register 11
> 15, 1, CLK_SARADC_EN ; clk_saradc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, PCLK_SARADC_EN ; pclk_saradc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, CLK_CAN2_EN ; clk_can2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, PCLK_CAN2_EN ; pclk_can2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, CLK_CAN1_EN ; clk_can1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, PCLK_CAN1_EN ; pclk_can1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_CAN0_EN ; clk_can0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, PCLK_CAN0_EN ; pclk_can0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_I2C8_EN ; clk_i2c8 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_I2C7_EN ; clk_i2c7 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_I2C6_EN ; clk_i2c6 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_I2C5_EN ; clk_i2c5 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_I2C4_EN ; clk_i2c4 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_I2C3_EN ; clk_i2c3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_I2C2_EN ; clk_i2c2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_I2C1_EN ; clk_i2c1 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON12 = 0x0830 ; Internal clock gate and division register 12
> 15, 1, CLK_UART2_FRAC_EN ; clk_uart2_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, CLK_UART2_EN ; clk_uart2_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, SCLK_UART1_EN ; sclk_uart1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, CLK_UART1_FRAC_EN ; clk_uart1_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, CLK_UART1_EN ; clk_uart1_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, PCLK_UART9_EN ; pclk_uart9 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, PCLK_UART8_EN ; pclk_uart8 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, PCLK_UART7_EN ; pclk_uart7 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, PCLK_UART6_EN ; pclk_uart6 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, PCLK_UART5_EN ; pclk_uart5 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, PCLK_UART4_EN ; pclk_uart4 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_UART3_EN ; pclk_uart3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_UART2_EN ; pclk_uart2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, PCLK_UART1_EN ; pclk_uart1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_TSADC_EN ; clk_tsadc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PCLK_TSADC_EN ; pclk_tsadc clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON13 = 0x0834 ; Internal clock gate and division register 13
> 15, 1, SCLK_UART7_EN ; sclk_uart7 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, CLK_UART7_FRAC_EN ; clk_uart7_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, CLK_UART7_EN ; clk_uart7_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, SCLK_UART6_EN ; sclk_uart6 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, CLK_UART6_FRAC_EN ; clk_uart6_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, CLK_UART6_EN ; clk_uart6_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, SCLK_UART5_EN ; sclk_uart5 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_UART5_FRAC_EN ; clk_uart5_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_UART5_EN ; clk_uart5_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, SCLK_UART4_EN ; sclk_uart4 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_UART4_FRAC_EN ; clk_uart4_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_UART4_EN ; clk_uart4_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, SCLK_UART3_EN ; sclk_uart3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_UART3_FRAC_EN ; clk_uart3_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_UART3_EN ; clk_uart3_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, SCLK_UART2_EN ; sclk_uart2 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON14 = 0x0838 ; Internal clock gate and division register 14
> 15, 1, CLK_SPI4_EN ; clk_spi4 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, CLK_SPI3_EN ; clk_spi3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, CLK_SPI2_EN ; clk_spi2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, CLK_SPI1_EN ; clk_spi1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, CLK_SPI0_EN ; clk_spi0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, PCLK_SPI4_EN ; pclk_spi4 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, PCLK_SPI3_EN ; pclk_spi3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, PCLK_SPI2_EN ; pclk_spi2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, PCLK_SPI1_EN ; pclk_spi1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, PCLK_SPI0_EN ; pclk_spi0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, SCLK_UART9_EN ; sclk_uart9 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_UART9_FRAC_EN ; clk_uart9_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_UART9_EN ; clk_uart9_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, SCLK_UART8_EN ; sclk_uart8 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_UART8_FRAC_EN ; clk_uart8_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_UART8_EN ; clk_uart8_src clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON15 = 0x083C ; Internal clock gate and division register 15
> 15, 1, CLK_BUSTIMER0_EN ; clk_bustimer0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, CLK_BUSTIMER_ROOT_EN ; clk_bus_timer_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, PCLK_BUSTIMER1_EN ; pclk_bustimer1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, PCLK_BUSTIMER0_EN ; pclk_bustimer0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, CLK_PWM3_CAPTURE_EN ; clk_pwm3_capture clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, CLK_PWM3_EN ; clk_pwm3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, PCLK_PWM3_EN ; pclk_pwm3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_PWM2_CAPTURE_EN ; clk_pwm2_capture clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_PWM2_EN ; clk_pwm2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, PCLK_PWM2_EN ; pclk_pwm2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_PWM1_CAPTURE_EN ; clk_pwm1_capture clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_PWM1_EN ; clk_pwm1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_PWM1_EN ; pclk_pwm1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, PCLK_SYS_GRF_EN ; pclk_sys_grf clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, TCLK_WDT0_EN ; tclk_wdt0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PCLK_WDT0_EN ; pclk_wdt0 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON16 = 0x0840 ; Internal clock gate and division register 16
> 15, 1, DBCLK_GPIO1_EN ; dbclk_gpio1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, PCLK_GPIO1_EN ; pclk_gpio1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, PCLK_MAILBOX2_EN ; pclk_mailbox2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, PCLK_MAILBOX1_EN ; pclk_mailbox1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, PCLK_MAILBOX0_EN ; pclk_mailbox0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, CLK_BUSTIMER11_EN ; clk_bustimer11 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_BUSTIMER10_EN ; clk_bustimer10 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_BUSTIMER9_EN ; clk_bustimer9 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_BUSTIMER8_EN ; clk_bustimer8 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_BUSTIMER7_EN ; clk_bustimer7 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_BUSTIMER6_EN ; clk_bustimer6 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_BUSTIMER5_EN ; clk_bustimer5 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_BUSTIMER4_EN ; clk_bustimer4 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_BUSTIMER3_EN ; clk_bustimer3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_BUSTIMER2_EN ; clk_bustimer2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_BUSTIMER1_EN ; clk_bustimer1 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON17 = 0x0844 ; Internal clock gate and division register 17
> 15, 1, PCLK_APB2ASB_MST_BOT_RIGHT_EN ; pclk_apb2asb_mst_bot_right clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, PCLK_APB2ASB_MST_CDPHY_EN ; pclk_apb2asb_mst_cdphy clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, PCLK_APB2ASB_MST_TOP_EN ; pclk_apb2asb_mst_top clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, PCLK_DFT2APB_EN ; pclk_dft2apb clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, ACLK_GICADB_GIC2CORE_BUS_EN ; aclk_gicadb_gic2core_bus clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, PCLK_TOP_EN ; pclk_top clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, DCLK_DECOM_EN ; dclk_decom clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, PCLK_DECOM_EN ; pclk_decom clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, ACLK_DECOM_EN ; aclk_decom clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, DBCLK_GPIO4_EN ; dbclk_gpio4 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_GPIO4_EN ; pclk_gpio4 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, DBCLK_GPIO3_EN ; dbclk_gpio3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, PCLK_GPIO3_EN ; pclk_gpio3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, DBCLK_GPIO2_EN ; dbclk_gpio2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PCLK_GPIO2_EN ; pclk_gpio2 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON18 = 0x0848 ; Internal clock gate and division register 18
> 13, 1, CLK_OTP_PHY_EN ; clk_otp_phy_g clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, CLK_OTPC_AUTO_RD_EN ; clk_otpc_auto_rd_g clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, CLK_OTPC_ARB_EN ; clk_otpc_arb clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, CLK_OTPC_NS_EN ; clk_otpc_ns clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, PCLK_OTPC_NS_EN ; pclk_otpc_ns clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, ACLK_SPINLOCK_EN ; aclk_spinlock clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, PCLK_APB2ASB_MST_EMMCIO_EN ; pclk_apb2asb_mst_emmcio clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_APB2ASB_MST_VCCIO6_EN ; pclk_apb2asb_mst_vccio6 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_APB2ASB_MST_VCCIO3_5_EN ; pclk_apb2asb_mst_vccio3_5 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, PCLK_APB2ASB_MST_CSIPHY_EN ; pclk_apb2asb_mst_csiphy clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, PCLK_APB2ASB_MST_IOC_RIGHT_EN ; pclk_apb2asb_mst_ioc_right clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PCLK_APB2ASB_MST_IOC_TOP_EN ; pclk_apb2asb_mst_ioc_top clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON19 = 0x084C ; Internal clock gate and division register 19
> 5, 1, PCLK_DDRCM0_INTMUX_EN ; pclk_ddrcm0_intmux clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_PMUCM0_INTMUX_EN ; pclk_pmucm0_intmux clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_PMU2_EN ; pclk_pmu2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_BISRINTF_EN ; clk_bisrintf clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_BISRINTF_PLLSRC_EN ; clk_bisrintf_pllsrc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PCLK_BUSIOC_EN ; pclk_busioc clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON20 = 0x0850 ; Internal clock gate and division register 20
> 15, 1, PCLK_DDR_STANDBY_CH1_EN ; pclk_ddr_standby_ch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, PCLK_DDR_MON_CH1_EN ; pclk_ddr_mon_ch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, PCLK_DDR_DFICTL_CH1_EN ; pclk_ddr_dfictl_ch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, ACLK_DDR_UPCTL_CH0_EN ; aclk_ddr_upctl_ch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, CLK_DDR_STANDBY_CH0_EN ; clk_ddr_standby_ch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, CLK_DDR_MON_CH0_EN ; clk_ddr_mon_ch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_DDR_DFICTL_CH0_EN ; clk_ddr_dfictl_ch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_DDR_UPCTL_CH0_EN ; clk_ddr_upctl_ch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_SBR_CH0_EN ; clk_sbr_ch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_DFI_CH0_EN ; clk_dfi_ch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, PCLK_DDR_GRF_CH01_EN ; pclk_ddr_grf_ch01 clock gating control, both ddr ch0 and ddr ch1.
= 1, DISABLE
= 0, ENABLE

> 4, 1, TMCLK_DDR_MON_CH0_EN ; tmclk_ddr_mon_ch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_DDR_UPCTL_CH0_EN ; pclk_ddr_upctl_ch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, PCLK_DDR_STANDBY_CH0_EN ; pclk_ddr_standby_ch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, PCLK_DDR_MON_CH0_EN ; pclk_ddr_mon_ch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PCLK_DDR_DFICTL_CH0_EN ; pclk_ddr_dfictl_ch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON21 = 0x0854 ; Internal clock gate and division register 21
> 15, 1, ACLK_DDR_FRS_DDRSCH0_EN ; aclk_ddr_frs_ddrsch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, ACLK_DDR_RS_DDRSCH0_EN ; aclk_ddr_rs_ddrsch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, ACLK_DDR_DDRSCH0_EN ; aclk_ddr_ddrsch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, ACLK_DDR_UPCTL_CH1_EN ; aclk_ddr_upctl_ch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_DDR_STANDBY_CH1_EN ; clk_ddr_standby_ch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_DDR_MON_CH1_EN ; clk_ddr_mon_ch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_DDR_DFICTL_CH1_EN ; clk_ddr_dfictl_ch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_DDR_UPCTL_CH1_EN ; clk_ddr_upctl_ch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_SBR_CH1_EN ; clk_sbr_ch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_DFI_CH1_EN ; clk_dfi_ch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, TMCLK_DDR_MON_CH1_EN ; tmclk_ddr_mon_ch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PCLK_DDR_UPCTL_CH1_EN ; pclk_ddr_upctl_ch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON22 = 0x0858 ; Internal clock gate and division register 22
> 9, 1, CLK_TESTOUT_DDR01_EN ; clk_testout_ddr01 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, PCLK_DDR_DDRSCH1_EN ; pclk_ddr_ddrsch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, PCLK_DDR_DDRSCH0_EN ; pclk_ddr_ddrsch0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, ACLK_DDR_FRS_SCRAMBLE1_EN ; aclk_ddr_frs_scramble1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_DDR_SCRAMBLE1_EN ; aclk_ddr_scramble1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, ACLK_DDR_FRS_DDRSCH1_EN ; aclk_ddr_frs_ddrsch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, ACLK_DDR_RS_DDRSCH1_EN ; aclk_ddr_rs_ddrsch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, ACLK_DDR_DDRSCH1_EN ; aclk_ddr_ddrsch1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_DDR_FRS_SCRAMBLE0_EN ; aclk_ddr_frs_scramble0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_DDR_SCRAMBLE0_EN ; aclk_ddr_scramble0 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON23 = 0x085C ; Internal clock gate and division register 23
> 15, 1, PCLK_DDR_STANDBY_CH3_EN ; pclk_ddr_standby_ch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, PCLK_DDR_MON_CH3_EN ; pclk_ddr_mon_ch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, PCLK_DDR_DFICTL_CH3_EN ; pclk_ddr_dfictl_ch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, ACLK_DDR_UPCTL_CH2_EN ; aclk_ddr_upctl_ch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, CLK_DDR_STANDBY_CH2_EN ; clk_ddr_standby_ch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, CLK_DDR_MON_CH2_EN ; clk_ddr_mon_ch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_DDR_DFICTL_CH2_EN ; clk_ddr_dfictl_ch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_DDR_UPCTL_CH2_EN ; clk_ddr_upctl_ch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_SBR_CH2_EN ; clk_sbr_ch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_DFI_CH2_EN ; clk_dfi_ch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, PCLK_DDR_GRF_CH23_EN ; pclk_ddr_grf_ch23 clock gating control, both ddr ch2 and ddr ch3.
= 1, DISABLE
= 0, ENABLE

> 4, 1, TMCLK_DDR_MON_CH2_EN ; tmclk_ddr_mon_ch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_DDR_UPCTL_CH2_EN ; pclk_ddr_upctl_ch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, PCLK_DDR_STANDBY_CH2_EN ; pclk_ddr_standby_ch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, PCLK_DDR_MON_CH2_EN ; pclk_ddr_mon_ch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PCLK_DDR_DFICTL_CH2_EN ; pclk_ddr_dfictl_ch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON24 = 0x0860 ; Internal clock gate and division register 24
> 15, 1, ACLK_DDR_FRS_DDRSCH2_EN ; aclk_ddr_frs_ddrsch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, ACLK_DDR_RS_DDRSCH2_EN ; aclk_ddr_rs_ddrsch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, ACLK_DDR_DDRSCH2_EN ; aclk_ddr_ddrsch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, ACLK_DDR_UPCTL_CH3_EN ; aclk_ddr_upctl_ch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_DDR_STANDBY_CH3_EN ; clk_ddr_standby_ch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_DDR_MON_CH3_EN ; clk_ddr_mon_ch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_DDR_DFICTL_CH3_EN ; clk_ddr_dfictl_ch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_DDR_UPCTL_CH3_EN ; clk_ddr_upctl_ch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_SBR_CH3_EN ; clk_sbr_ch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_DFI_CH3_EN ; clk_dfi_ch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, TMCLK_DDR_MON_CH3_EN ; tmclk_ddr_mon_ch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PCLK_DDR_UPCTL_CH3_EN ; pclk_ddr_upctl_ch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON25 = 0x0864 ; Internal clock gate and division register 25
> 9, 1, CLK_TESTOUT_DDR23_EN ; clk_testout_ddr23 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, PCLK_DDR_DDRSCH3_EN ; pclk_ddr_ddrsch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, PCLK_DDR_DDRSCH2_EN ; pclk_ddr_ddrsch2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, ACLK_DDR_FRS_SCRAMBLE3_EN ; aclk_ddr_frs_scramble3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_DDR_SCRAMBLE3_EN ; aclk_ddr_scramble3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, ACLK_DDR_FRS_DDRSCH3_EN ; aclk_ddr_frs_ddrsch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, ACLK_DDR_RS_DDRSCH3_EN ; aclk_ddr_rs_ddrsch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, ACLK_DDR_DDRSCH3_EN ; aclk_ddr_ddrsch3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_DDR_FRS_SCRAMBLE2_EN ; aclk_ddr_frs_scramble2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_DDR_SCRAMBLE2_EN ; aclk_ddr_scramble2 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON26 = 0x0868 ; Internal clock gate and division register 26
> 8, 1, HCLK_ISP1_BIU_EN ; hclk_isp1_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, HCLK_ISP1_EN ; hclk_isp1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, ACLK_ISP1_BIU_EN ; aclk_isp1_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_ISP1_EN ; aclk_isp1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_ISP1_CORE_VICAP_EN ; clk_isp1_core_vicap clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_ISP1_CORE_MARVIN_EN ; clk_isp1_core_marvin clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_ISP1_CORE_EN ; clk_isp1_core clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, HCLK_ISP1_ROOT_EN ; hclk_isp1_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_ISP1_ROOT_EN ; aclk_isp1_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON27 = 0x086C ; Internal clock gate and division register 27
> 3, 1, HCLK_RKNN1_BIU_EN ; hclk_rknn1_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_RKNN1_EN ; hclk_rknn1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_RKNN1_BIU_EN ; aclk_rknn1_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_RKNN1_EN ; aclk_rknn1 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON28 = 0x0870 ; Internal clock gate and division register 28
> 3, 1, HCLK_RKNN2_BIU_EN ; hclk_rknn2_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_RKNN2_EN ; hclk_rknn2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_RKNN2_BIU_EN ; aclk_rknn2_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_RKNN2_EN ; aclk_rknn2 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON29 = 0x0874 ; Internal clock gate and division register 29
> 15, 1, CLK_NPU_PVTM_EN ; clk_npu_pvtm clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, CLK_PVTM1_EN ; clk_pvtm1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, PCLK_NPU_GRF_EN ; pclk_npu_grf clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, PCLK_PVTM1_EN ; pclk_pvtm1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, TCLK_NPU_WDT_EN ; tclk_npu_wdt clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, PCLK_NPU_WDT_EN ; pclk_npu_wdt clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_NPUTIMER1_EN ; clk_nputimer1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_NPUTIMER0_EN ; clk_nputimer0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_NPUTIMER_ROOT_EN ; clk_nputimer_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, PCLK_NPU_TIMER_EN ; pclk_npu_timer clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, PCLK_NPUTOP_BIU_EN ; pclk_nputop_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_NPUTOP_ROOT_EN ; pclk_nputop_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_RKNN_DSU0_EN ; clk_rknn_dsu0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_TESTOUT_NPU_EN ; clk_testout_npu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_RKNN_DSU0_DF_EN ; clk_rknn_dsu0_src_t clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, HCLK_RKNN_ROOT_EN ; hclk_rknn_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON30 = 0x0878 ; Internal clock gate and division register 30
> 9, 1, HCLK_RKNN0_BIU_EN ; hclk_rknn0_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, HCLK_RKNN0_EN ; hclk_rknn0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, ACLK_RKNN0_BIU_EN ; aclk_rknn0_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, ACLK_RKNN0_EN ; aclk_rknn0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_NPU_CM0_RTC_EN ; clk_npu_cm0_rtc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, FCLK_NPU_CM0_CORE_EN ; fclk_npu_cm0_core clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_NPU_CM0_BIU_EN ; hclk_npu_cm0_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, HCLK_NPU_CM0_ROOT_EN ; hclk_npu_cm0_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_NPU_PVTPLL_EN ; clk_npu_pvtpll clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON31 = 0x087C ; Internal clock gate and division register 31
> 11, 1, HCLK_SFC_XIP_EN ; hclk_sfc_xip clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, HCLK_SFC_EN ; hclk_sfc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, SCLK_SFC_EN ; sclk_sfc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, TMCLK_EMMC_EN ; tmclk_emmc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, BCLK_EMMC_EN ; bclk_emmc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CCLK_EMMC_EN ; cclk_emmc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_EMMC_EN ; aclk_emmc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, HCLK_EMMC_EN ; hclk_emmc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, ACLK_NVM_BIU_EN ; aclk_nvm_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_NVM_BIU_EN ; hclk_nvm_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_NVM_ROOT_EN ; aclk_nvm_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, HCLK_NVM_ROOT_EN ; hclk_nvm_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON32 = 0x0880 ; Internal clock gate and division register 32
> 15, 1, ACLK_PCIE_1L0_DBI_EN ; aclk_pcie_1l0_dbi clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, ACLK_PCIE_2L_DBI_EN ; aclk_pcie_2l_dbi clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, ACLK_PCIE_4L_DBI_EN ; aclk_pcie_4l_dbi clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, ACLK_PCIE_BIU_EN ; aclk_pcie_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, ACLK_GMAC1_EN ; aclk_gmac1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, ACLK_GMAC0_EN ; aclk_gmac0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, ACLK_PHP_BIU_EN ; aclk_php_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, ACLK_PCIE_BRIDGE_EN ; aclk_pcie_gridge clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, ACLK_PHP_ROOT_EN ; aclk_php_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, ACLK_PCIE_ROOT_EN ; aclk_pcie_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, PCLK_PHP_BIU_EN ; pclk_php_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_GMAC1_EN ; pclk_gmac1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_GMAC0_EN ; pclk_gmac0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, PCLK_DEC_BIU_EN ; pclk_dec_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, PCLK_GRF_EN ; pclk_grf clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PCLK_PHP_ROOT_EN ; pclk_php_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON33 = 0x0884 ; Internal clock gate and division register 33
> 15, 1, PCLK_PCIE_1L1_EN ; pclk_pcie_1l1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, PCLK_PCIE_1L0_EN ; pclk_pcie_1l0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, PCLK_PCIE_2L_EN ; pclk_pcie_2l clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, PCLK_PCIE_4L_EN ; pclk_pcie_4l clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, ACLK_PCIE_1L2_SLV_EN ; aclk_pcie_1l2_slv clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, ACLK_PCIE_1L1_SLV_EN ; aclk_pcie_1l1_slv clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, ACLK_PCIE_1L0_SLV_EN ; aclk_pcie_1l0_slv clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, ACLK_PCIE_2L_SLV_EN ; aclk_pcie_2l_slv clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, ACLK_PCIE_4L_SLV_EN ; aclk_pcie_4l_slv clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, ACLK_PCIE_1L2_MSTR_EN ; aclk_pcie_1l2_mstr clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_PCIE_1L1_MSTR_EN ; aclk_pcie_1l1_mstr clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, ACLK_PCIE_1L0_MSTR_EN ; aclk_pcie_1l0_mstr clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, ACLK_PCIE_2L_MSTR_EN ; aclk_pcie_2l_mstr clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, ACLK_PCIE_4L_MSTR_EN ; aclk_pcie_4l_mstr clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_PCIE_1L2_DBI_EN ; aclk_pcie_1l2_dbi clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_PCIE_1L1_DBI_EN ; aclk_pcie_1l1_dbi clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON34 = 0x0888 ; Internal clock gate and division register 34
> 11, 1, CLK_GMAC1_PTP_REF_EN ; clk_gmac1_ptp_ref clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, CLK_GMAC0_PTP_REF_EN ; clk_gmac0_ptp_ref clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, ACLK_MMU_BIU_EN ; aclk_mmu_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, ACLK_MMU_PHP_EN ; aclk_mmu_php clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, ACLK_MMU_PCIE_EN ; aclk_mmu_pcie clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, ACLK_PHP_GIC_ITS_EN ; aclk_php_gic_its clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_PCIE_1L2_AUX_EN ; clk_pcie_1l2_aux clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_PCIE_1L1_AUX_EN ; clk_pcie_1l1_aux clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_PCIE_1L0_AUX_EN ; clk_pcie_1l0_aux clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_PCIE_2L_AUX_EN ; clk_pcie_2l_aux clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_PCIE_4L_AUX_EN ; clk_pcie_4l_aux clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PCLK_PCIE_1L2_EN ; pclk_pcie_1l2 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON35 = 0x088C ; Internal clock gate and division register 35
> 10, 1, CLK_UTMI_OTG2_EN ; clk_utmi_otg2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, REF_CLK_USB3OTG2_EN ; ref_clk_usb3otg2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, SUSPEND_CLK_USB3OTG2_EN ; suspend_clk_usb3otg2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, ACLK_USB3OTG2_EN ; aclk_usb3otg2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_GMAC_50M_CRU_EN ; clk_gmac_50m_cru_i clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_GMAC_125M_CRU_EN ; clk_gmac_125m_cru_i clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON37 = 0x0894 ; Internal clock gate and division register 37
> 12, 1, CLK_RXOOB2_EN ; clk_rxoob2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, CLK_RXOOB1_EN ; clk_rxoob1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, CLK_RXOOB0_EN ; clk_rxoob0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, ACLK_SATA2_EN ; aclk_sata2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, ACLK_SATA1_EN ; aclk_sata1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, ACLK_SATA0_EN ; aclk_sata0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_PMALIVE2_EN ; clk_pmalive2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_PMALIVE1_EN ; clk_pmalive1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_PMALIVE0_EN ; clk_pmalive0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_PIPEPHY2_REF_EN ; clk_pipephy2_ref clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_PIPEPHY1_REF_EN ; clk_pipephy1_ref clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_PIPEPHY0_REF_EN ; clk_pipephy0_ref clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON38 = 0x0898 ; Internal clock gate and division register 38
> 15, 1, CLK_PCIE_1L1_PIPE_EN ; clk_pcie_1l1_pipe clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, CLK_PCIE_1L0_PIPE_EN ; clk_pcie_1l0_pipe clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, CLK_PCIE_1L2_PIPE_EN ; clk_pcie_1l2_pipe clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_PIPEPHY2_PIPE_U3_G_EN ; clk_pipephy2_pipe_u3_g clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_PIPEPHY2_PIPE_ASIC_G_EN ; clk_pipephy2_pipe_asic_g clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_PIPEPHY1_PIPE_ASIC_G_EN ; clk_pipephy1_pipe_asic_g clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_PIPEPHY0_PIPE_ASIC_G_EN ; clk_pipephy0_pipe_asic_g clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_PIPEPHY2_PIPE_G_EN ; clk_pipephy2_pipe_g clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_PIPEPHY1_PIPE_G_EN ; clk_pipephy1_pipe_g clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_PIPEPHY0_PIPE_G_EN ; clk_pipephy0_pipe_g clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON39 = 0x089C ; Internal clock gate and division register 39
> 1, 1, CLK_PCIE_2L_PIPE_EN ; clk_pcie_2l_pipe clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_PCIE_4L_PIPE_EN ; clk_pcie_4l_pipe clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON40 = 0x08A0 ; Internal clock gate and division register 40
> 9, 1, CLK_RKVDEC0_CORE_EN ; clk_rkvdec0_core clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_RKVDEC0_HEVC_CA_EN ; clk_rkvdec0_hevc_ca clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_RKVDEC0_CA_EN ; clk_rkvdec0_ca clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, ACLK_RKVDEC0_BIU_EN ; aclk_rkvdec0_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, HCLK_RKVDEC0_BIU_EN ; hclk_rkvdec0_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, ACLK_RKVDEC0_EN ; aclk_rkvdec0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, HCLK_RKVDEC0_EN ; hclk_rkvdec0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, ACLK_RKVDEC_CCU_EN ; aclk_rkvdec_ccu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_RKVDEC0_ROOT_EN ; aclk_rkvdec0_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, HCLK_RKVDEC0_ROOT_EN ; hclk_rkvdec0_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON41 = 0x08A4 ; Internal clock gate and division register 41
> 8, 1, CLK_RKVDEC1_CORE_EN ; clk_rkvdec1_core clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_RKVDEC1_HEVC_CA_EN ; clk_rkvdec1_hevc_ca clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_RKVDEC1_CA_EN ; clk_rkvdec1_ca clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_RKVDEC1_BIU_EN ; aclk_rkvdec1_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, HCLK_RKVDEC1_BIU_EN ; hclk_rkvdec1_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, ACLK_RKVDEC1_EN ; aclk_rkvdec1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_RKVDEC1_EN ; hclk_rkvdec1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_RKVDEC1_ROOT_EN ; aclk_rkvdec1_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, HCLK_RKVDEC1_ROOT_EN ; hclk_rkvdec1_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON42 = 0x08A8 ; Internal clock gate and division register 42
> 15, 1, UTMI_OHCI_CLK48_HOST0_EN ; utmi_ohci_clk48_host0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, ACLK_USB_GRF_EN ; aclk_usb_grf clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, HCLK_HOST_ARB1_EN ; hclk_host_arb1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, HCLK_HOST1_EN ; hclk_host1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, HCLK_HOST_ARB0_EN ; hclk_host_arb0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, HCLK_HOST0_EN ; hclk_host0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, REF_CLK_USB3OTG1_EN ; ref_clk_usb3otg1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, SUSPEND_CLK_USB3OTG1_EN ; suspend_clk_usb3otg1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, ACLK_USB3OTG1_EN ; aclk_usb3otg1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, REF_CLK_USB3OTG0_EN ; ref_clk_usb3otg0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, SUSPEND_CLK_USB3OTG0_EN ; suspend_clk_usb3otg0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, ACLK_USB3OTG0_EN ; aclk_usb3otg0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, HCLK_USB_BIU_EN ; hclk_usb_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, ACLK_USB_BIU_EN ; aclk_usb_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, HCLK_USB_ROOT_EN ; hclk_usb_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_USB_ROOT_EN ; aclk_usb_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON43 = 0x08AC ; Internal clock gate and division register 43
> 0, 1, UTMI_OHCI_CLK48_HOST1_EN ; utmi_ohci_clk48_host1 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON44 = 0x08B0 ; Internal clock gate and division register 44
> 15, 1, HCLK_JPEG_ENCODER2_EN ; hclk_jpeg_encoder2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, ACLK_JPEG_ENCODER2_EN ; aclk_jpeg_encoder2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, HCLK_JPEG_ENCODER1_EN ; hclk_jpeg_encoder1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, ACLK_JPEG_ENCODER1_EN ; aclk_jpeg_encoder1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, HCLK_JPEG_ENCODER0_EN ; hclk_jpeg_encoder0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, ACLK_JPEG_ENCODER0_EN ; aclk_jpeg_encoder0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, HCLK_VPU_EN ; hclk_vpu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, ACLK_VPU_EN ; aclk_vpu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, ACLK_JPEG_DECODER_BIU_EN ; aclk_jpeg_decoder_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, HCLK_VDPU_BIU_EN ; hclk_vdpu_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_VDPU_LOW_BIU_EN ; aclk_vdpu_low_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, ACLK_VDPU_BIU_EN ; aclk_vdpu_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, ACLK_JPEG_DECODER_ROOT_EN ; aclk_jpeg_decoder_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_VDPU_ROOT_EN ; hclk_vdpu_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_VDPU_LOW_ROOT_EN ; aclk_vdpu_low_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_VDPU_ROOT_EN ; aclk_vdpu_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON45 = 0x08B4 ; Internal clock gate and division register 45
> 12, 1, CLK_RGA3_0_CORE_EN ; clk_rga3_0_core clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, ACLK_RGA3_0_EN ; aclk_rga3_0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, HCLK_RGA3_0_EN ; hclk_rga3_0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_RGA2_CORE_EN ; clk_rga2_core clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, ACLK_RGA2_EN ; aclk_rga2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, HCLK_RGA2_EN ; hclk_rga2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_IEP2P0_CORE_EN ; clk_iep2p0_core clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_IEP2P0_EN ; aclk_iep2p0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, HCLK_IEP2P0_EN ; hclk_iep2p0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, HCLK_JPEG_DECODER_EN ; hclk_jpeg_decoder clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, ACLK_JPEG_DECODER_EN ; aclk_jpeg_decoder clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, HCLK_JPEG_ENCODER3_EN ; hclk_jpeg_encoder3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_JPEG_ENCODER3_EN ; aclk_jpeg_encoder3 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON47 = 0x08BC ; Internal clock gate and division register 47
> 6, 1, CLK_RKVENC0_CORE_EN ; clk_rkvenc0_core clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_RKVENC0_EN ; aclk_rkvenc0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, HCLK_RKVENC0_EN ; hclk_rkvenc0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, ACLK_RKVENC0_BIU_EN ; aclk_rkvenc0_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_RKVENC0_BIU_EN ; hclk_rkvenc0_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_RKVENC0_ROOT_EN ; aclk_rkvenc0_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, HCLK_RKVENC0_ROOT_EN ; hclk_rkvenc0_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON48 = 0x08C0 ; Internal clock gate and division register 48
> 6, 1, CLK_RKVENC1_CORE_EN ; clk_rkvenc1_core clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_RKVENC1_EN ; aclk_rkvenc1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, HCLK_RKVENC1_EN ; hclk_rkvenc1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, ACLK_RKVENC1_BIU_EN ; aclk_rkvenc1_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_RKVENC1_BIU_EN ; hclk_rkvenc1_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_RKVENC1_ROOT_EN ; aclk_rkvenc1_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, HCLK_RKVENC1_ROOT_EN ; hclk_rkvenc1_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON49 = 0x08C4 ; Internal clock gate and division register 49
> 15, 1, HCLK_FISHEYE0_EN ; hclk_fisheye0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, ACLK_FISHEYE0_EN ; aclk_fisheye0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, HCLK_ISP0_EN ; hclk_isp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, ACLK_ISP0_EN ; aclk_isp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, CLK_ISP0_CORE_VICAP_EN ; clk_isp0_core_vicap clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, CLK_ISP0_CORE_MARVIN_EN ; clk_isp0_core_marvin clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_ISP0_CORE_EN ; clk_isp0_core clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, HCLK_VICAP_EN ; hclk_vicap clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, ACLK_VICAP_EN ; aclk_vicap clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, DCLK_VICAP_EN ; dclk_vicap clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, PCLK_VI_BIU_EN ; pclk_vi_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, HCLK_VI_BIU_EN ; hclk_vi_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, ACLK_VI_BIU_EN ; aclk_vi_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, PCLK_VI_ROOT_EN ; pclk_vi_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, HCLK_VI_ROOT_EN ; hclk_vi_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_VI_ROOT_EN ; aclk_vi_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON50 = 0x08C8 ; Internal clock gate and division register 50
> 9, 1, PCLK_CSI_HOST_5_EN ; pclk_csi_host_5 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, PCLK_CSI_HOST_4_EN ; pclk_csi_host_4 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, PCLK_CSI_HOST_3_EN ; pclk_csi_host_3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, PCLK_CSI_HOST_2_EN ; pclk_csi_host_2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, PCLK_CSI_HOST_1_EN ; pclk_csi_host_1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_CSI_HOST_0_EN ; pclk_csi_host_0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_FISHEYE1_CORE_EN ; clk_fisheye1_core clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_FISHEYE1_EN ; hclk_fisheye1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_FISHEYE1_EN ; aclk_fisheye1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_FISHEYE0_CORE_EN ; clk_fisheye0_core clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON51 = 0x08CC ; Internal clock gate and division register 51
> 12, 1, ICLK_CSIHOST1_EN ; iclk_csihost1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, ICLK_CSIHOST0_EN ; iclk_csihost0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, ICLK_CSIHOST01_EN ; iclk_csihost01 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_CSIHOST5_VICAP_EN ; clk_csihost5_vicap clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_CSIHOST4_VICAP_EN ; clk_csihost4_vicap clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_CSIHOST3_VICAP_EN ; clk_csihost3_vicap clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_CSIHOST2_VICAP_EN ; clk_csihost2_vicap clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_CSIHOST1_VICAP_EN ; clk_csihost1_vicap clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_CSIHOST0_VICAP_EN ; clk_csihost0_vicap clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON52 = 0x08D0 ; Internal clock gate and division register 52
> 13, 1, DCLK_VP0_EN ; dclk_vp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, DCLK_VP2_SRC_EN ; dclk_vp2_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, DCLK_VP1_SRC_EN ; dclk_vp1_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, DCLK_VP0_SRC_EN ; dclk_vp0_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, ACLK_VOP_EN ; aclk_vop clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, HCLK_VOP_EN ; hclk_vop clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, PCLK_VOP_BIU_EN ; pclk_vop_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, HCLK_VOP_BIU_EN ; hclk_vop_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_VOP_LOW_BIU_EN ; aclk_vop_low_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, ACLK_VOP_BIU_EN ; aclk_vop_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_VOP_ROOT_EN ; pclk_vop_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_VOP_ROOT_EN ; hclk_vop_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_VOP_LOW_ROOT_EN ; aclk_vop_low_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_VOP_ROOT_EN ; aclk_vop_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON53 = 0x08D4 ; Internal clock gate and division register 53
> 10, 1, ACLK_VOP_DOBY_EN ; aclk_vop_doby clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, PCLK_VOP_CHANNEL_BIU_EN ; pclk_vop_channel_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_VOP_PMU_EN ; clk_vop_pmu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_DSIHOST1_EN ; clk_dsihost1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_DSIHOST0_EN ; clk_dsihost0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, PCLK_DSIHOST1_EN ; pclk_dsihost1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_DSIHOST0_EN ; pclk_dsihost0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_VOPGRF_EN ; pclk_vopgrf clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, DCLK_VP3_EN ; dclk_vp3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, DCLK_VP2_EN ; dclk_vp2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, DCLK_VP1_EN ; dclk_vp1 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON55 = 0x08DC ; Internal clock gate and division register 55
> 14, 1, PCLK_HDCP0_EN ; pclk_hdcp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, HCLK_HDCP0_EN ; hclk_hdcp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, ACLK_HDCP0_EN ; aclk_hdcp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, HCLK_HDCP_KEY0_EN ; hclk_hdcp_key0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, PCLK_VO0GRF_EN ; pclk_vo0grf clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, ACLK_HDCP0_BIU_EN ; aclk_hdcp0_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, PCLK_VO0_S_BIU_EN ; pclk_vo0_s_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, PCLK_VO0_BIU_EN ; pclk_vo0_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, HCLK_VO0_S_BIU_EN ; hclk_vo0_s_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, HCLK_VO0_BIU_EN ; hclk_vo0_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_VO0_S_ROOT_EN ; pclk_vo0_s_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_VO0_ROOT_EN ; pclk_vo0_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_VO0_S_ROOT_EN ; hclk_vo0_s_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, HCLK_VO0_ROOT_EN ; hclk_vo0_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_VO0_ROOT_EN ; aclk_vo0_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON56 = 0x08E0 ; Internal clock gate and division register 56
> 15, 1, CLK_I2S8_8CH_TX_EN ; clk_i2s8_8ch_tx_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, HCLK_I2S8_8CH_EN ; hclk_i2s8_8ch clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, MCLK_I2S4_8CH_TX_EN ; mclk_i2s4_8ch_tx clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, CLK_I2S4_8CH_FRAC_TX_EN ; clk_i2s4_8ch_tx_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, CLK_I2S4_8CH_TX_EN ; clk_i2s4_8ch_tx_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, HCLK_I2S4_8CH_EN ; hclk_i2s4_8ch clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_DP1_EN ; clk_dp1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_DP0_EN ; clk_dp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, PCLK_S_DP1_EN ; pclk_s_dp1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, PCLK_S_DP0_EN ; pclk_s_dp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, PCLK_DP1_EN ; pclk_dp1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_DP0_EN ; pclk_dp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_AUX16MHZ_1_EN ; clk_aux16mhz_1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_AUX16MHZ_0_EN ; clk_aux16mhz_0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, PCLK_TRNG0_EN ; pclk_trng0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_TRNG0_EN ; aclk_trng0 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON57 = 0x08E4 ; Internal clock gate and division register 57
> 11, 1, MCLK_SPDIF5_EN ; mclk_spdif5 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, MCLK_SPDIF5_DP1_EN ; mclk_spdif5_dp1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_SPDIF5_DP1_FRAC_EN ; clk_spdif5_dp1_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, CLK_SPDIF5_DP1_EN ; clk_spdif5_dp1_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, HCLK_SPDIF5_DP1_EN ; hclk_spdif5_dp1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, MCLK_SPDIF2_EN ; mclk_spdif2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, MCLK_SPDIF2_DP0_EN ; mclk_spdif2_dp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_SPDIF2_DP0_FRAC_EN ; clk_spdif2_dp0_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_SPDIF2_DP0_EN ; clk_spdif2_dp0_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_SPDIF2_DP0_EN ; hclk_spdif2_dp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, MCLK_I2S8_8CH_TX_EN ; mclk_i2s8_8ch_tx clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_I2S8_8CH_FRAC_TX_EN ; clk_i2s8_8ch_tx_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON59 = 0x08EC ; Internal clock gate and division register 59
> 15, 1, PCLK_S_EDP1_EN ; pclk_s_edp1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, PCLK_S_EDP0_EN ; pclk_s_edp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, PCLK_VO1_S_BIU_EN ; pclk_vo1_s_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, PCLK_VO1GRF_EN ; pclk_vo1grf clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, PCLK_VO1_BIU_EN ; pclk_vo1_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, HCLK_VO1_S_BIU_EN ; hclk_vo1_s_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, HCLK_VO1_BIU_EN ; hclk_vo1_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, ACLK_VO1_BIU_EN ; aclk_vo1_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, ACLK_HDCP1_BIU_EN ; aclk_hdcp1_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, PCLK_VO1_S_ROOT_EN ; pclk_vo1_s_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_VO1_ROOT_EN ; pclk_vo1_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, HCLK_VO1_S_ROOT_EN ; hclk_vo1_s_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_VO1_ROOT_EN ; hclk_vo1_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_HDMIRX_ROOT_EN ; aclk_hdmirx_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_HDCP1_ROOT_EN ; aclk_hdcp1_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON60 = 0x08F0 ; Internal clock gate and division register 60
> 15, 1, CLK_HDMITX0_EARC_EN ; clk_hdmitx0_earc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, PCLK_HDMITX0_EN ; pclk_hdmitx0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, PCLK_TRNG1_EN ; pclk_trng1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, ACLK_TRNG1_EN ; aclk_trng1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, PCLK_HDCP1_EN ; pclk_hdcp1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, HCLK_HDCP1_EN ; hclk_hdcp1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_HDCP1_EN ; aclk_hdcp1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, HCLK_HDCP_KEY1_EN ; hclk_hdcp_key1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, MCLK_I2S7_8CH_RX_EN ; mclk_i2s7_8ch_rx clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_I2S7_8CH_FRAC_RX_EN ; clk_i2s7_8ch_rx_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_I2S7_8CH_RX_EN ; clk_i2s7_8ch_rx_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, HCLK_I2S7_8CH_EN ; hclk_i2s7_8ch clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON61 = 0x08F4 ; Internal clock gate and division register 61
> 15, 1, CLK_HDMIRX_TMDSQP_EN ; clk_hdmirx_tmdsqp clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, CLK_HDMIRX_AUD_EN ; clk_hdmirx_aud clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, CLK_HDMIRX_AUD_FRAC_EN ; clk_hdmirx_aud_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, CLK_HDMIRX_AUD_SRC_EN ; clk_hdmirx_aud_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, CLK_HDMIRX_REF_EN ; clk_hdmirx_ref clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, PCLK_HDMIRX_EN ; pclk_hdmirx clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, ACLK_HDMIRX_EN ; aclk_hdmirx clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_HDMITX1_REF_EN ; clk_hdmitx1_ref clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_HDMITX1_EARC_EN ; clk_hdmitx1_earc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, PCLK_HDMITX1_EN ; pclk_hdmitx1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_HDMITX0_REF_EN ; clk_hdmitx0_ref clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON62 = 0x08F8 ; Internal clock gate and division register 62
> 15, 1, MCLK_I2S6_8CH_TX_EN ; mclk_i2s6_8ch_tx clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, CLK_I2S6_8CH_FRAC_TX_EN ; clk_i2s6_8ch_tx_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, CLK_I2S6_8CH_TX_EN ; clk_i2s6_8ch_tx_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, HCLK_I2S5_8CH_EN ; hclk_i2s5_8ch clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, MCLK_I2S5_8CH_TX_EN ; mclk_i2s5_8ch_tx clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_I2S5_8CH_FRAC_TX_EN ; clk_i2s5_8ch_tx_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_I2S5_8CH_TX_EN ; clk_i2s5_8ch_tx_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_EDP1_200M_EN ; clk_edp1_200m clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_EDP1_24M_EN ; clk_edp1_24m clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_EDP1_EN ; pclk_edp1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_EDP0_200M_EN ; clk_edp0_200m clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_EDP0_24M_EN ; clk_edp0_24m clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PCLK_EDP0_EN ; pclk_edp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON63 = 0x08FC ; Internal clock gate and division register 63
> 15, 1, MCLK_SPDIFRX1_EN ; mclk_spdifrx1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, HCLK_SPDIFRX1_EN ; hclk_spdifrx1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, MCLK_SPDIFRX0_EN ; mclk_spdifrx0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, HCLK_SPDIFRX0_EN ; hclk_spdifrx0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, MCLK_SPDIF4_EN ; mclk_spdif4 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, CLK_SPDIF4_FRAC_EN ; clk_spdif4_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, CLK_SPDIF4_EN ; clk_spdif4_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, HCLK_SPDIF4_EN ; hclk_spdif4 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, MCLK_SPDIF3_EN ; mclk_spdif3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_SPDIF3_FRAC_EN ; clk_spdif3_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_SPDIF3_EN ; clk_spdif3_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, HCLK_SPDIF3_EN ; hclk_spdif3 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, HCLK_I2S6_8CH_EN ; hclk_i2s6_8ch clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, MCLK_I2S6_8CH_RX_EN ; mclk_i2s6_8ch_rx clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_I2S6_8CH_FRAC_RX_EN ; clk_i2s6_8ch_rx_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_I2S6_8CH_RX_EN ; clk_i2s6_8ch_rx_src clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON64 = 0x0900 ; Internal clock gate and division register 64
> 15, 1, DCLK_VP2HDMI_BRIDGE1_VO1_EN ; dclk_vp2hdmi_bridge1_vo1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, DCLK_VP2HDMI_BRIDGE0_VO1_EN ; dclk_vp2hdmi_bridge0_vo1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, MCLK_SPDIFRX2_EN ; mclk_spdifrx2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, HCLK_SPDIFRX2_EN ; hclk_spdifrx2 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON65 = 0x0904 ; Internal clock gate and division register 65
> 9, 1, CLK_HDMITRX_REFSRC_EN ; clk_hdmitrx_refsrc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, PCLK_S_HDMIRX_EN ; pclk_s_hdmirx clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, MCLK_I2S10_8CH_RX_EN ; mclk_i2s10_8ch_rx clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_I2S10_8CH_FRAC_RX_EN ; clk_i2s10_8ch_rx_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, CLK_I2S10_8CH_RX_EN ; clk_i2s10_8ch_rx_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, HCLK_I2S10_8CH_EN ; hclk_i2s10_8ch clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, MCLK_I2S9_8CH_RX_EN ; mclk_i2s9_8ch_rx clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_I2S9_8CH_FRAC_RX_EN ; clk_i2s9_8ch_rx_frac clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_I2S9_8CH_RX_EN ; clk_i2s9_8ch_rx_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, HCLK_I2S9_8CH_EN ; hclk_i2s9_8ch clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON66 = 0x0908 ; Internal clock gate and division register 66
> 15, 1, PCLK_PVTM2_EN ; pclk_pvtm2 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, PCLK_GPU_BIU_EN ; pclk_gpu_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, PCLK_GPU_ROOT_EN ; pclk_gpu_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, ACLK_M3_GPU_BIU_EN ; aclk_m3_gpu_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, ACLK_M2_GPU_BIU_EN ; aclk_m2_gpu_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, ACLK_M1_GPU_BIU_EN ; aclk_m1_gpu_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, ACLK_M0_GPU_BIU_EN ; aclk_m0_gpu_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, ACLK_S_GPU_BIU_EN ; aclk_s_gpu_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, CLK_GPU_STACKS_EN ; clk_gpu_stacks clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, CLK_GPU_COREGROUP_EN ; clk_gpu_coregroup clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_GPU_EN ; clk_gpu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_GPU_SRC_EN ; clk_gpu_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_TESTOUT_GPU_EN ; clk_testout_gpu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_GPU_SRC_DF_EN ; clk_gpu_src_t clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON67 = 0x090C ; Internal clock gate and division register 67
> 3, 1, CLK_GPU_PVTPLL_EN ; clk_gpu_pvtpll clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, PCLK_GPU_GRF_EN ; pclk_gpu_grf clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_GPU_PVTM_EN ; clk_gpu_pvtm clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_PVTM2_EN ; clk_pvtm2 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON68 = 0x0910 ; Internal clock gate and division register 68
> 5, 1, PCLK_AV1_EN ; pclk_av1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_AV1_BIU_EN ; pclk_av1_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_AV1_ROOT_EN ; pclk_av1_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, ACLK_AV1_EN ; aclk_av1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_AV1_BIU_EN ; aclk_av1_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_AV1_ROOT_EN ; aclk_av1_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON69 = 0x0914 ; Internal clock gate and division register 69
> 15, 1, CLK_DDR_TIMER_ROOT_EN ; clk_ddr_timer_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 14, 1, FCLK_DDR_CM0_CORE_EN ; fclk_ddr_cm0_core clock gating control.
= 1, DISABLE
= 0, ENABLE

> 13, 1, HCLK_CENTER_BIU_EN ; hclk_center_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, HCLK_AHB2APB_EN ; hclk_ahb2apb clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, ACLK_CENTER_S400_BIU_EN ; aclk_center_s400_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, ACLK_CENTER_S200_BIU_EN ; aclk_center_s200_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, ACLK_CENTER_S400_ROOT_EN ; aclk_center_s400_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, ACLK_CENTER_S200_ROOT_EN ; aclk_center_s200_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, ACLK_DDR_SHAREMEM_BIU_EN ; aclk_ddr_sharemem_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, ACLK_DDR_SHAREMEM_EN ; aclk_ddr_sharemem clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_DMA2DDR_EN ; aclk_dma2ddr clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, ACLK_DDR_BIU_EN ; aclk_ddr_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_CENTER_ROOT_EN ; pclk_center_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_CENTER_ROOT_EN ; hclk_center_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_CENTER_LOW_ROOT_EN ; aclk_center_low_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_CENTER_ROOT_EN ; aclk_center_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON70 = 0x0918 ; Internal clock gate and division register 70
> 12, 1, PCLK_CENTER_CHANNEL_BIU_EN ; pclk_center_channel_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 11, 1, PCLK_CENTER_BIU_EN ; pclk_center_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, PCLK_SHAREMEM_EN ; pclk_sharemem clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, PCLK_DMA2DDR_EN ; pclk_dma2ddr clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, PCLK_TIMER_EN ; pclk_timer clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, PCLK_WDT_EN ; pclk_wdt clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, PCLK_AHB2APB_EN ; pclk_ahb2apb clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, PCLK_CENTER_GRF_EN ; pclk_center_grf clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_DDR_CM0_RTC_EN ; clk_ddr_cm0_rtc clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, TCLK_WDT_DDR_EN ; tclk_wdt_ddr clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_DDR_TIMER1_EN ; clk_ddr_timer1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_DDR_TIMER0_EN ; clk_ddr_timer0 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON72 = 0x0920 ; Internal clock gate and division register 72
> 11, 1, PCLK_USB2PHY_U2_1_GRF0_EN ; pclk_usb2phy_u2_1_grf0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 10, 1, PCLK_USB2PHY_U2_0_GRF0_EN ; pclk_usb2phy_u2_0_grf0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 9, 1, PCLK_USB2PHY_U3_1_GRF0_EN ; pclk_usb2phy_u3_1_grf0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 8, 1, PCLK_USB2PHY_U3_0_GRF0_EN ; pclk_usb2phy_u3_0_grf0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 7, 1, PCLK_APB2ASB_SLV_BOT_RIGHT_EN ; pclk_apb2asb_slv_bot_right clock gating control.
= 1, DISABLE
= 0, ENABLE

> 6, 1, PCLK_HDPTX1_EN ; pclk_hdptx1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, PCLK_HDPTX0_EN ; pclk_hdptx0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, PCLK_USBDPPHY1_EN ; pclk_usbdpphy1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, PCLK_USBDPGRF1_EN ; pclk_usbdpgrf1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, PCLK_USBDPPHY0_EN ; pclk_usbdpphy0 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, PCLK_USBDPGRF0_EN ; pclk_usbdpgrf0 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON73 = 0x0924 ; Internal clock gate and division register 73
> 13, 1, CLK_HDMIHDP1_EN ; clk_hdmihdp1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 12, 1, CLK_HDMIHDP0_EN ; clk_hdmihdp0 clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON74 = 0x0928 ; Internal clock gate and division register 74
> 3, 1, HCLK_VO1USB_TOP_BIU_EN ; hclk_vo1usb_top_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_VO1USB_TOP_ROOT_EN ; hclk_vo1usb_top_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, ACLK_VO1USB_TOP_BIU_EN ; aclk_vo1usb_top_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_VO1USB_TOP_ROOT_EN ; aclk_vo1usb_top_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON75 = 0x092C ; Internal clock gate and division register 75
> 3, 1, CCLK_SRC_SDIO_EN ; cclk_src_sdio clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_SDIO_EN ; hclk_sdio clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, HCLK_SDIO_BIU_EN ; hclk_sdio_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, HCLK_SDIO_ROOT_EN ; hclk_sdio_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON76 = 0x0930 ; Internal clock gate and division register 76
> 6, 1, CLK_RGA3_1_CORE_EN ; clk_rga3_1_core clock gating control.
= 1, DISABLE
= 0, ENABLE

> 5, 1, ACLK_RGA3_1_EN ; aclk_rga3_1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, HCLK_RGA3_1_EN ; hclk_rga3_1 clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, ACLK_RGA3_BIU_EN ; aclk_rga3_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, HCLK_RGA3_BIU_EN ; hclk_rga3_biu clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, HCLK_RGA3_ROOT_EN ; hclk_rga3_root clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, ACLK_RGA3_ROOT_EN ; aclk_rga3_root clock gating control.
= 1, DISABLE
= 0, ENABLE

GATE_CON77 = 0x0934 ; Internal clock gate and division register 77
> 5, 1, CLK_REF_PIPE_PHY2_PLL_SRC_EN ; clk_ref_pipe_phy2_pll_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 4, 1, CLK_REF_PIPE_PHY1_PLL_SRC_EN ; clk_ref_pipe_phy1_pll_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 3, 1, CLK_REF_PIPE_PHY0_PLL_SRC_EN ; clk_ref_pipe_phy0_pll_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 2, 1, CLK_REF_PIPE_PHY2_OSC_SRC_EN ; clk_ref_pipe_phy2_osc_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 1, 1, CLK_REF_PIPE_PHY1_OSC_SRC_EN ; clk_ref_pipe_phy1_osc_src clock gating control.
= 1, DISABLE
= 0, ENABLE

> 0, 1, CLK_REF_PIPE_PHY0_OSC_SRC_EN ; clk_ref_pipe_phy0_osc_src clock gating control.
= 1, DISABLE
= 0, ENABLE

SOFTRST_CON01 = 0x0A04 ; Internal clock reset register 1
> 15, 1, ARESETN_TOP_M500_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, PRESETN_CSIPHY1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, PRESETN_CSIPHY0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, PRESETN_TOP_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, ARESETN_TOP_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON02 = 0x0A08 ; Internal clock reset register 2
> 15, 1, RESETN_USBDP_COMBO_PHY1_INIT ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, RESETN_USBDP_COMBO_PHY0_PCS ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, RESETN_USBDP_COMBO_PHY0_LANE ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, RESETN_USBDP_COMBO_PHY0_CMN ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, RESETN_USBDP_COMBO_PHY0_INIT ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, ARESETN_TOP_M300_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, ARESETN_TOP_S400_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, ARESETN_TOP_S200_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, ARESETN_TOP_M400_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON03 = 0x0A0C ; Internal clock reset register 3
> 15, 1, PRESETN_MIPI_DCPHY0_GRF ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, PRESETN_MIPI_DCPHY0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, RESETN_USBDP_COMBO_PHY1_PCS ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, RESETN_USBDP_COMBO_PHY1_LANE ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, RESETN_USBDP_COMBO_PHY1_CMN ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON04 = 0x0A10 ; Internal clock reset register 4
> 11, 1, PRESETN_APB2ASB_SLV_IOC_RIGHT ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, PRESETN_APB2ASB_SLV_IOC_TOP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, PRESETN_APB2ASB_SLV_EMMCIO ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, PRESETN_APB2ASB_SLV_VCCIO6 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, PRESETN_APB2ASB_SLV_VCCIO3_5 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, PRESETN_APB2ASB_SLV_CSIPHY ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, PRESETN_APB2ASB_SLV_CDPHY ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, PRESETN_MIPI_DCPHY1_GRF ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, PRESETN_MIPI_DCPHY1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON05 = 0x0A14 ; Internal clock reset register 5
> 15, 1, HRESETN_CHANNEL_SECURE2CENTER ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, HRESETN_CHANNEL_SECURE2VO1USB ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, ARESETN_CHANNEL_SECURE2CENTER ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, ARESETN_CHANNEL_SECURE2VO1USB ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, PRESETN_CRU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON06 = 0x0A18 ; Internal clock reset register 6
> 1, 1, PRESETN_CHANNEL_SECURE2CENTER ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, PRESETN_CHANNEL_SECURE2VO1USB ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON07 = 0x0A1C ; Internal clock reset register 7
> 13, 1, HRESETN_I2S3_2CH ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, HRESETN_I2S2_2CH ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, PRESETN_ACDCDIG ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, MRESETN_I2S0_8CH_RX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, MRESETN_I2S0_8CH_TX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, HRESETN_I2S0_8CH ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, PRESETN_AUDIO_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, HRESETN_AUDIO_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON08 = 0x0A20 ; Internal clock reset register 8
> 14, 1, HRESETN_SPDIF0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, RESETN_DAC_ACDCDIG ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, MRESETN_I2S3_2CH ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, MRESETN_I2S2_2CH ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON09 = 0x0A24 ; Internal clock reset register 9
> 7, 1, RESETN_PDM1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, HRESETN_PDM1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, MRESETN_SPDIF1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, HRESETN_SPDIF1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, MRESETN_SPDIF0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON10 = 0x0A28 ; Internal clock reset register 10
> 15, 1, PRESETN_I2C8 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, PRESETN_I2C7 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, PRESETN_I2C6 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, PRESETN_I2C5 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, PRESETN_I2C4 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, PRESETN_I2C3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, PRESETN_I2C2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, PRESETN_I2C1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, ARESETN_DMAC2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, ARESETN_DMAC1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, ARESETN_DMAC0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, ARESETN_GIC_DBG ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, ARESETN_GIC ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, PRESETN_BUS_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, ARESETN_BUS_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON11 = 0x0A2C ; Internal clock reset register 11
> 14, 1, PRESETN_SARADC ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, RESETN_CAN2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, PRESETN_CAN2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, RESETN_CAN1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, PRESETN_CAN1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, RESETN_CAN0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, PRESETN_CAN0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, RESETN_I2C8 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, RESETN_I2C7 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, RESETN_I2C6 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, RESETN_I2C5 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, RESETN_I2C4 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, RESETN_I2C3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, RESETN_I2C2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, RESETN_I2C1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON12 = 0x0A30 ; Internal clock reset register 12
> 13, 1, SRESETN_UART1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, PRESETN_UART9 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, PRESETN_UART8 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, PRESETN_UART7 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, PRESETN_UART6 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, PRESETN_UART5 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, PRESETN_UART4 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, PRESETN_UART3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, PRESETN_UART2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, PRESETN_UART1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, RESETN_TSADC ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, PRESETN_TSADC ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON13 = 0x0A34 ; Internal clock reset register 13
> 15, 1, SRESETN_UART7 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, SRESETN_UART6 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, SRESETN_UART5 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, SRESETN_UART4 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, SRESETN_UART3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, SRESETN_UART2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON14 = 0x0A38 ; Internal clock reset register 14
> 15, 1, RESETN_SPI4 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, RESETN_SPI3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, RESETN_SPI2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, RESETN_SPI1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, RESETN_SPI0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, PRESETN_SPI4 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, PRESETN_SPI3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, PRESETN_SPI2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, PRESETN_SPI1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, PRESETN_SPI0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, SRESETN_UART9 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, SRESETN_UART8 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON15 = 0x0A3C ; Internal clock reset register 15
> 15, 1, RESETN_BUSTIMER0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, PRESETN_BUSTIMER1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, PRESETN_BUSTIMER0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, RESETN_PWM3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, PRESETN_PWM3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, RESETN_PWM2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, PRESETN_PWM2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, RESETN_PWM1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, PRESETN_PWM1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, PRESETN_SYS_GRF ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, TRESETN_WDT0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, PRESETN_WDT0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON16 = 0x0A40 ; Internal clock reset register 16
> 15, 1, DBRESETN_GPIO1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, PRESETN_GPIO1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, PRESETN_MAILBOX2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, PRESETN_MAILBOX1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, PRESETN_MAILBOX0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, RESETN_BUSTIMER11 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, RESETN_BUSTIMER10 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, RESETN_BUSTIMER9 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, RESETN_BUSTIMER8 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, RESETN_BUSTIMER7 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, RESETN_BUSTIMER6 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, RESETN_BUSTIMER5 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, RESETN_BUSTIMER4 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, RESETN_BUSTIMER3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, RESETN_BUSTIMER2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, RESETN_BUSTIMER1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON17 = 0x0A44 ; Internal clock reset register 17
> 15, 1, PRESETN_APB2ASB_MST_BOT_RIGHT ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, PRESETN_APB2ASB_MST_CDPHY ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, PRESETN_APB2ASB_MST_TOP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, PRESETN_DFT2APB ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, ARESETN_GICADB_GIC2CORE_BUS ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, PRESETN_TOP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, DRESETN_DECOM ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, PRESETN_DECOM ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, ARESETN_DECOM ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, DBRESETN_GPIO4 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, PRESETN_GPIO4 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, DBRESETN_GPIO3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, PRESETN_GPIO3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, DBRESETN_GPIO2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, PRESETN_GPIO2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON18 = 0x0A48 ; Internal clock reset register 18
> 11, 1, RESETN_OTPC_ARB ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, RESETN_OTPC_NS ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, PRESETN_OTPC_NS ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, ARESETN_SPINLOCK ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, PRESETN_APB2ASB_MST_EMMCIO ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, PRESETN_APB2ASB_MST_VCCIO6 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, PRESETN_APB2ASB_MST_VCCIO3_5 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, PRESETN_APB2ASB_MST_CSIPHY ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, PRESETN_APB2ASB_MST_IOC_RIGHT ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, PRESETN_APB2ASB_MST_IOC_TOP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON19 = 0x0A4C ; Internal clock reset register 19
> 5, 1, PRESETN_DDRCM0_INTMUX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, PRESETN_PMUCM0_INTMUX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, PRESETN_BUSIOC ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON20 = 0x0A50 ; Internal clock reset register 20
> 15, 1, PRESETN_DDR_STANDBY_CH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, PRESETN_DDR_MON_CH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, PRESETN_DDR_DFICTL_CH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, ARESETN_DDR_UPCTL_CH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, RESETN_DDR_STANDBY_CH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, RESETN_DDR_MON_CH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, RESETN_DDR_DFICTL_CH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, RESETN_DDR_UPCTL_CH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, RESETN_SBR_CH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, RESETN_DFI_CH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, PRESETN_DDR_GRF_CH01 ; ddr ch0 and ch1 grf presetn When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, TMRESETN_DDR_MON_CH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, PRESETN_DDR_UPCTL_CH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, PRESETN_DDR_STANDBY_CH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, PRESETN_DDR_MON_CH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, PRESETN_DDR_DFICTL_CH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON21 = 0x0A54 ; Internal clock reset register 21
> 15, 1, ARESETN_DDR_FRS_DDRSCH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, ARESETN_DDR_RS_DDRSCH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, ARESETN_DDR_DDRSCH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, ARESETN_DDR_UPCTL_CH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, RESETN_DDR_STANDBY_CH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, RESETN_DDR_MON_CH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, RESETN_DDR_DFICTL_CH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, RESETN_DDR_UPCTL_CH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, RESETN_SBR_CH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, RESETN_DFI_CH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, TMRESETN_DDR_MON_CH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, PRESETN_DDR_UPCTL_CH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON22 = 0x0A58 ; Internal clock reset register 22
> 8, 1, PRESETN_DDR_DDRSCH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, PRESETN_DDR_DDRSCH0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, ARESETN_DDR_FRS_SCRAMBLE1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, ARESETN_DDR_SCRAMBLE1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, ARESETN_DDR_FRS_DDRSCH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, ARESETN_DDR_RS_DDRSCH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, ARESETN_DDR_DDRSCH1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, ARESETN_DDR_FRS_SCRAMBLE0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, ARESETN_DDR_SCRAMBLE0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON23 = 0x0A5C ; Internal clock reset register 23
> 15, 1, PRESETN_DDR_STANDBY_CH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, PRESETN_DDR_MON_CH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, PRESETN_DDR_DFICTL_CH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, ARESETN_DDR_UPCTL_CH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, RESETN_DDR_STANDBY_CH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, RESETN_DDR_MON_CH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, RESETN_DDR_DFICTL_CH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, RESETN_DDR_UPCTL_CH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, RESETN_SBR_CH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, RESETN_DFI_CH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, PRESETN_DDR_GRF_CH23 ; ddr ch2 and ch3 grf presetn When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, TMRESETN_DDR_MON_CH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, PRESETN_DDR_UPCTL_CH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, PRESETN_DDR_STANDBY_CH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, PRESETN_DDR_MON_CH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, PRESETN_DDR_DFICTL_CH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON24 = 0x0A60 ; Internal clock reset register 24
> 15, 1, ARESETN_DDR_FRS_DDRSCH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, ARESETN_DDR_RS_DDRSCH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, ARESETN_DDR_DDRSCH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, ARESETN_DDR_UPCTL_CH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, RESETN_DDR_STANDBY_CH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, RESETN_DDR_MON_CH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, RESETN_DDR_DFICTL_CH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, RESETN_DDR_UPCTL_CH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, RESETN_SBR_CH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, RESETN_DFI_CH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, TMRESETN_DDR_MON_CH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, PRESETN_DDR_UPCTL_CH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON25 = 0x0A64 ; Internal clock reset register 25
> 8, 1, PRESETN_DDR_DDRSCH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, PRESETN_DDR_DDRSCH2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, ARESETN_DDR_FRS_SCRAMBLE3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, ARESETN_DDR_SCRAMBLE3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, ARESETN_DDR_FRS_DDRSCH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, ARESETN_DDR_RS_DDRSCH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, ARESETN_DDR_DDRSCH3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, ARESETN_DDR_FRS_SCRAMBLE2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, ARESETN_DDR_SCRAMBLE2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON26 = 0x0A68 ; Internal clock reset register 26
> 8, 1, HRESETN_ISP1_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, ARESETN_ISP1_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, RESETN_ISP1_VICAP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, RESETN_ISP1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON27 = 0x0A6C ; Internal clock reset register 27
> 3, 1, HRESETN_RKNN1_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, HRESETN_RKNN1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, ARESETN_RKNN1_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, ARESETN_RKNN1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON28 = 0x0A70 ; Internal clock reset register 28
> 3, 1, HRESETN_RKNN2_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, HRESETN_RKNN2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, ARESETN_RKNN2_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, ARESETN_RKNN2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON29 = 0x0A74 ; Internal clock reset register 29
> 14, 1, RESETN_PVTM1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, PRESETN_NPU_GRF ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, PRESETN_PVTM1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, TRESETN_NPU_WDT ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, PRESETN_NPU_WDT ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, RESETN_NPUTIMER1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, RESETN_NPUTIMER0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, PRESETN_NPU_TIMER ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, PRESETN_NPUTOP_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, ARESETN_RKNN_DSU0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON30 = 0x0A78 ; Internal clock reset register 30
> 9, 1, HRESETN_RKNN0_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, HRESETN_RKNN0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, ARESETN_RKNN0_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, ARESETN_RKNN0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, TRESETN_NPU_CM0_JTAG ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, FRESETN_NPU_CM0_CORE ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, HRESETN_NPU_CM0_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, RESETN_NPU_PVTPLL ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON31 = 0x0A7C ; Internal clock reset register 31
> 11, 1, HRESETN_SFC_XIP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, HRESETN_SFC ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, SRESETN_SFC ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, TRESETN_EMMC ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, BRESETN_EMMC ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, CRESETN_EMMC ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, ARESETN_EMMC ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, HRESETN_EMMC ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, ARESETN_NVM_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, HRESETN_NVM_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON32 = 0x0A80 ; Internal clock reset register 32
> 15, 1, RESETN_PCIE_1L0_POWER_UP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, RESETN_PCIE_2L_POWER_UP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, RESETN_PCIE_4L_POWER_UP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, ARESETN_PCIE_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, ARESETN_GMAC1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, ARESETN_GMAC0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, ARESETN_PHP_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, ARESETN_PCIE_BRIDGE ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, PRESETN_PHP_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, PRESETN_DEC_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, PRESETN_GRF ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON33 = 0x0A84 ; Internal clock reset register 33
> 15, 1, PRESETN_PCIE_1L1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, PRESETN_PCIE_1L0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, PRESETN_PCIE_2L ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, PRESETN_PCIE_4L ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, RESETN_PCIE_1L2_POWER_UP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, RESETN_PCIE_1L1_POWER_UP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON34 = 0x0A88 ; Internal clock reset register 34
> 9, 1, ARESETN_MMU_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, ARESETN_MMU_PHP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, ARESETN_MMU_PCIE ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, ARESETN_PHP_GIC_ITS ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, PRESETN_PCIE_1L2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON35 = 0x0A8C ; Internal clock reset register 35
> 7, 1, ARESETN_USB3OTG2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON37 = 0x0A94 ; Internal clock reset register 37
> 15, 1, RESETN_ASIC2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, RESETN_ASIC1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, RESETN_ASIC0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, RESETN_RXOOB2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, RESETN_RXOOB1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, RESETN_RXOOB0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, ARESETN_SATA2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, ARESETN_SATA1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, ARESETN_SATA0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, RESETN_PMALIVE2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, RESETN_PMALIVE1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, RESETN_PMALIVE0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON40 = 0x0AA0 ; Internal clock reset register 40
> 9, 1, RESETN_RKVDEC0_CORE ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, RESETN_RKVDEC0_HEVC_CA ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, RESETN_RKVDEC0_CA ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, ARESETN_RKVDEC0_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, HRESETN_RKVDEC0_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, ARESETN_RKVDEC0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, HRESETN_RKVDEC0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, ARESETN_RKVDEC_CCU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON41 = 0x0AA4 ; Internal clock reset register 41
> 8, 1, RESETN_RKVDEC1_CORE ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, RESETN_RKVDEC1_HEVC_CA ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, RESETN_RKVDEC1_CA ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, ARESETN_RKVDEC1_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, HRESETN_RKVDEC1_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, ARESETN_RKVDEC1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, HRESETN_RKVDEC1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON42 = 0x0AA8 ; Internal clock reset register 42
> 15, 1, CRESETN_USB2P0_HOST0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, ARESETN_USB_GRF ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, HRESETN_HOST_ARB1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, HRESETN_HOST1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, HRESETN_HOST_ARB0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, HRESETN_HOST0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, ARESETN_USB3OTG1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, ARESETN_USB3OTG0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, HRESETN_USB_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, ARESETN_USB_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON43 = 0x0AAC ; Internal clock reset register 43
> 2, 1, RESETN_HOST_UTMI1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, RESETN_HOST_UTMI0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, CRESETN_USB2P0_HOST1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON44 = 0x0AB0 ; Internal clock reset register 44
> 15, 1, HRESETN_JPEG_ENCODER2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, ARESETN_JPEG_ENCODER2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, HRESETN_JPEG_ENCODER1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, ARESETN_JPEG_ENCODER1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, HRESETN_JPEG_ENCODER0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, ARESETN_JPEG_ENCODER0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, HRESETN_VPU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, ARESETN_VPU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, ARESETN_JPEG_DECODER_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, HRESETN_VDPU_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, ARESETN_VDPU_LOW_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, ARESETN_VDPU_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON45 = 0x0AB4 ; Internal clock reset register 45
> 12, 1, RESETN_RGA3_0_CORE ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, ARESETN_RGA3_0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, HRESETN_RGA3_0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, RESETN_RGA2_CORE ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, ARESETN_RGA2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, HRESETN_RGA2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, RESETN_IEP2P0_CORE ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, ARESETN_IEP2P0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, HRESETN_IEP2P0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, HRESETN_JPEG_DECODER ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, ARESETN_JPEG_DECODER ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, HRESETN_JPEG_ENCODER3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, ARESETN_JPEG_ENCODER3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON47 = 0x0ABC ; Internal clock reset register 47
> 6, 1, RESETN_RKVENC0_CORE ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, ARESETN_RKVENC0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, HRESETN_RKVENC0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, ARESETN_RKVENC0_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, HRESETN_RKVENC0_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON48 = 0x0AC0 ; Internal clock reset register 48
> 6, 1, RESETN_RKVENC1_CORE ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, ARESETN_RKVENC1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, HRESETN_RKVENC1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, ARESETN_RKVENC1_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, HRESETN_RKVENC1_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON49 = 0x0AC4 ; Internal clock reset register 49
> 11, 1, RESETN_ISP0_VICAP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, RESETN_ISP0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, HRESETN_VICAP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, ARESETN_VICAP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, DRESETN_VICAP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, PRESETN_VI_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, HRESETN_VI_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, ARESETN_VI_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON50 = 0x0AC8 ; Internal clock reset register 50
> 9, 1, PRESETN_CSI_HOST_5 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, PRESETN_CSI_HOST_4 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, PRESETN_CSI_HOST_3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, PRESETN_CSI_HOST_2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, PRESETN_CSI_HOST_1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, PRESETN_CSI_HOST_0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, RESETN_FISHEYE1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, RESETN_FISHEYE0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON51 = 0x0ACC ; Internal clock reset register 51
> 13, 1, RESETN_CIFIN ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, RESETN_CSIHOST5_VICAP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, RESETN_CSIHOST4_VICAP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, RESETN_CSIHOST3_VICAP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, RESETN_CSIHOST2_VICAP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, RESETN_CSIHOST1_VICAP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, RESETN_CSIHOST0_VICAP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON52 = 0x0AD0 ; Internal clock reset register 52
> 15, 1, DRESETN_VP2HDMI_BRIDGE1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, DRESETN_VP2HDMI_BRIDGE0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, DRESETN_VP0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, ARESETN_VOP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, HRESETN_VOP ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, PRESETN_VOP_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, HRESETN_VOP_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, ARESETN_VOP_LOW_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, ARESETN_VOP_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON53 = 0x0AD4 ; Internal clock reset register 53
> 9, 1, PRESETN_VOP_CHANNEL_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, RESETN_VOP_PMU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, RESETN_DSIHOST1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, RESETN_DSIHOST0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, PRESETN_DSIHOST1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, PRESETN_DSIHOST0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, PRESETN_VOPGRF ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, DRESETN_VP3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, DRESETN_VP2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, DRESETN_VP1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON55 = 0x0ADC ; Internal clock reset register 55
> 15, 1, RESETN_HDCP0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, HRESETN_HDCP0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, ARESETN_HDCP0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, HRESETN_HDCP_KEY0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, PRESETN_VO0GRF ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, ARESETN_HDCP0_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, PRESETN_VO0_S_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, PRESETN_VO0_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, HRESETN_VO0_S_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, HRESETN_VO0_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON56 = 0x0AE0 ; Internal clock reset register 56
> 14, 1, HRESETN_I2S8_8CH ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, MRESETN_I2S4_8CH_TX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, HRESETN_I2S4_8CH ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, RESETN_DP1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, RESETN_DP0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, PRESETN_TRNG0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON57 = 0x0AE4 ; Internal clock reset register 57
> 11, 1, MRESETN_SPDIF5_DP1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, HRESETN_SPDIF5_DP1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, MRESETN_SPDIF2_DP0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, HRESETN_SPDIF2_DP0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, MRESETN_I2S8_8CH_TX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON59 = 0x0AEC ; Internal clock reset register 59
> 13, 1, PRESETN_VO1_S_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, PRESETN_VO1GRF ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, DOC_BUG1_HRESETN_VO1_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, HRESETN_VO1_S_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, DOC_BUG0_HRESETN_VO1_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, ARESETN_VO1_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, ARESETN_HDCP1_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON60 = 0x0AF0 ; Internal clock reset register 60
> 11, 1, PRESETN_HDMITX0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, PRESETN_TRNG1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, RESETN_HDCP1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, HRESETN_HDCP1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, ARESETN_HDCP1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, HRESETN_HDCP_KEY1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, MRESETN_I2S7_8CH_RX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, HRESETN_I2S7_8CH ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON61 = 0x0AF4 ; Internal clock reset register 61
> 11, 1, RESETN_HDMIRX_REF ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, PRESETN_HDMIRX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, ARESETN_HDMIRX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, RESETN_HDMITX1_REF ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, PRESETN_HDMITX1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, RESETN_HDMITX0_REF ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON62 = 0x0AF8 ; Internal clock reset register 62
> 15, 1, MRESETN_I2S6_8CH_TX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, HRESETN_I2S5_8CH ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, MRESETN_I2S5_8CH_TX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, RESETN_EDP1_24M ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, PRESETN_EDP1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, RESETN_EDP0_24M ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, PRESETN_EDP0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON63 = 0x0AFC ; Internal clock reset register 63
> 15, 1, MRESETN_SPDIFRX1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, HRESETN_SPDIFRX1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, MRESETN_SPDIFRX0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, HRESETN_SPDIFRX0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, MRESETN_SPDIF4 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, HRESETN_SPDIF4 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, MRESETN_SPDIF3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, HRESETN_SPDIF3 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, HRESETN_I2S6_8CH ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, MRESETN_I2S6_8CH_RX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON64 = 0x0B00 ; Internal clock reset register 64
> 15, 1, RESETN_VO1_BRIDGE1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, RESETN_VO1_BRIDGE0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, RESETN_LINKSYM_HDMITXPHY1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, RESETN_LINKSYM_HDMITXPHY0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, MRESETN_SPDIFRX2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, HRESETN_SPDIFRX2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON65 = 0x0B04 ; Internal clock reset register 65
> 8, 1, PRESETN_S_HDMIRX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, MRESETN_I2S10_8CH_RX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, HRESETN_I2S10_8CH ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, MRESETN_I2S9_8CH_RX ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, HRESETN_I2S9_8CH ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON66 = 0x0B08 ; Internal clock reset register 66
> 15, 1, PRESETN_PVTM2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 14, 1, PRESETN_GPU_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, ARESETN_M3_GPU_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, ARESETN_M2_GPU_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, ARESETN_M1_GPU_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, ARESETN_M0_GPU_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, ARESETN_S_GPU_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, SYSRESETN_GPU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, RESETN_GPU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON67 = 0x0B0C ; Internal clock reset register 67
> 4, 1, PORESETN_GPU_JTAG ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, RESETN_GPU_PVTPLL ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, PRESETN_GPU_GRF ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, RESETN_PVTM2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON68 = 0x0B10 ; Internal clock reset register 68
> 5, 1, PRESETN_AV1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, PRESETN_AV1_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, ARESETN_AV1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, ARESETN_AV1_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON69 = 0x0B14 ; Internal clock reset register 69
> 14, 1, FRESETN_DDR_CM0_CORE ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 13, 1, HRESETN_CENTER_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, HRESETN_AHB2APB ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, ARESETN_CENTER_S400_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, ARESETN_CENTER_S200_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, ARESETN_DDR_SHAREMEM_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, ARESETN_DDR_SHAREMEM ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, ARESETN_DMA2DDR ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, ARESETN_DDR_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON70 = 0x0B18 ; Internal clock reset register 70
> 12, 1, PRESETN_CENTER_CHANNEL_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 11, 1, PRESETN_CENTER_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, PRESETN_SHAREMEM ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, PRESETN_DMA2DDR ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, PRESETN_TIMER ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, PRESETN_WDT ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, PRESETN_AHB2APB ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, PRESETN_CENTER_GRF ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, TRESETN_DDR_CM0_JTAG ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, TRESETN_WDT_DDR ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, RESETN_DDR_TIMER1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 0, 1, RESETN_DDR_TIMER0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON72 = 0x0B20 ; Internal clock reset register 72
> 11, 1, PRESETN_USB2PHY_U2_1_GRF0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 10, 1, PRESETN_USB2PHY_U2_0_GRF0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 9, 1, PRESETN_USB2PHY_U3_1_GRF0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 8, 1, PRESETN_USB2PHY_U3_0_GRF0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, PRESETN_APB2ASB_SLV_BOT_RIGHT ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, PRESETN_HDPTX1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, PRESETN_HDPTX0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, PRESETN_USBDPPHY1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, PRESETN_USBDPGRF1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, PRESETN_USBDPPHY0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, PRESETN_USBDPGRF0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON73 = 0x0B24 ; Internal clock reset register 73
> 13, 1, RESETN_HDMIHDP1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 12, 1, RESETN_HDMIHDP0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON74 = 0x0B28 ; Internal clock reset register 74
> 3, 1, HRESETN_VO1USB_TOP_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, ARESETN_VO1USB_TOP_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON75 = 0x0B2C ; Internal clock reset register 75
> 3, 1, RESETN_SDIO ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, HRESETN_SDIO ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 1, 1, HRESETN_SDIO_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON76 = 0x0B30 ; Internal clock reset register 76
> 6, 1, RESETN_RGA3_1_CORE ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 5, 1, ARESETN_RGA3_1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 4, 1, HRESETN_RGA3_1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 3, 1, ARESETN_RGA3_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 2, 1, HRESETN_RGA3_BIU ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

SOFTRST_CON77 = 0x0B34 ; Internal clock reset register 77
> 8, 1, RESETN_REF_PIPE_PHY2 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 7, 1, RESETN_REF_PIPE_PHY1 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

> 6, 1, RESETN_REF_PIPE_PHY0 ; When high, reset relative logic
= 1, ASSERT
= 0, DEASSERT

GLB_CNT_TH = 0x0C00 ; System control register
> 0, 10, GLOBAL_RESET_COUNTER_THRESHOLD ; global_reset_counter_threshold Global soft reset, wdt reset or tsadc_shut reset asserted time counter threshold. Measured in OSC clock cycles

GLBRST_ST = 0x0C04 ; System control register
> 15, 1, GLBRST_WDT4_RST ; glbrst_wdt4_rst If High, global reset by WDT4.
> 14, 1, GLBRST_WDT3_RST ; glbrst_wdt3_rst If High, global reset by WDT3.
> 13, 1, GLBRST_WDT2_RST ; glbrst_wdt2_rst If High, global reset by WDT2.
> 12, 1, GLBRST_WDT1_RST ; glbrst_wdt1_rst If High, global reset by WDT1.
> 11, 1, GLBRST_WDT0_RST ; glbrst_wdt0_rst If High, global reset by WDT0.
> 10, 1, GLBRST_SGRF_CRC_CHK_RST ; glbrst_sgrf_crc_chk_rst If High, global reset by SGRF_CRC check.
> 9, 1, GLBRST_DSUSGRF_CRC_CHK_RST ; glbrst_dsusgrf_crc_chk_rst If High, global reset by DSUSGRF_CRC check.
> 8, 1, GLBRST_PMUSGRF_CRC_CHK_RST ; glbrst_pmusgrf_crc_chk_rst If High, global reset by PMUSGRF_CRC check.
> 7, 1, GLBRST_OSC_CHK_RST ; glbrst_osc_chk_rst If High, global reset by OSC check.
> 6, 1, GLBRST_WDT_RST ; glbrst_wdt_rst If High, global reset by WDT. Check CRU_GLBRST_ST[15:11] for detail.
> 5, 1, SECOND_GLBRST_WDT_RST ; second_glbrst_wdt_rst If High, second global reset by WDT.
> 4, 1, FIRST_GLBRST_WDT_RST ; first_glbrst_wdt_rst If High, first global reset by WDT.
> 3, 1, SECOND_GLBRST_TSADC_RST ; second_glbrst_tsadc_rst If High, second global reset by TSADC.
> 2, 1, FIRST_GLBRST_TSADC_RST ; first_glbrst_tsadc_rst If High, first global reset by TSADC.
> 1, 1, SECOND_GLBRST_REGISTER_RST ; second_glbrst_register_rst If High, second global reset by register.
> 0, 1, FIRST_GLBRST_REGISTER_RST ; first_glbrst_register_rst If High, first global reset by register.

GLB_SRST_FST_VALUE = 0x0C08 ; System control register
> 0, 16, GLB_SRSC_FIRST_VALUE ; GLB_SRST_FST The first global software reset configuration value. Set 0xfdb9 enable.
= 0xFDB9, ENABLE

GLB_SRST_SND_VALUE = 0x0C0C ; System control register
> 0, 16, GLB_SRSC_SECOND_VALUE ; GLB_SRST_SND The second global software reset configuration value. Set 0xeca8 enable.
= 0xECA8, ENABLE

GLB_RST_CON = 0x0C10 ; System control register
> 15, 1, CRC_SGRF_CHK_TRIG_GLBRST_SEL ; crc_sgrf_chk_trig_glbrst_sel
= 1, FIRST; CRC_SGRF check trigger first global reset.
= 0, SECOND ; CRC_SGRF check trigger second global reset.

> 14, 1, CRC_DSUSGRF_CHK_TRIG_GLBRST_SEL ; crc_dsusgrf_chk_trig_glbrst_sel
= 1, FIRST; CRC_DSUSGRF check trigger first global reset.
= 0, SECOND ; CRC_DSUSGRF check trigger second global reset.

> 13, 1, CRC_PMUSGRF_CHK_TRIG_GLBRST_SEL ; crc_pmusgrf_chk_trig_glbrst_sel
= 1, FIRST; CRC_PMUSGRF check trigger first global reset.
= 0, SECOND ; CRC_PMUSGRF check trigger second global reset.

> 12, 1, OSC_CHK_TRIG_GLBRST_SEL ; osc_chk_trig_glbrst_sel
= 1, FIRST; OSC check trigger first global reset.
= 0, SECOND ; OSC check trigger second global reset.

> 11, 1, WDT_TRIG_GLBRST_SEL ; wdt_trig_glbrst_sel
= 1, FIRST; WDT trigger first global reset.
= 0, SECOND ; WDT trigger second global reset.

> 10, 1, CRC_SGRF_CHK_TRIG_GLBRST_EN ; crc_sgrf_chk_trig_glbrst_en
= 1, ENABLE ; Enable CRC_SGRF check trigger global reset.
= 0, DISABLE ; Disable CRC_SGRF check trigger global reset.

> 9, 1, CRC_DSUSGRF_CHK_TRIG_GLBRST_EN ; crc_dsusgrf_chk_trig_glbrst_en
= 1, ENABLE ; Enable CRC_DSUSGRF check trigger global reset.
= 0, DISABLE ; Disable CRC_DSUSGRF check trigger global reset.

> 8, 1, CRC_PMUSGRF_CHK_TRIG_GLBRST_EN ; crc_pmusgrf_chk_trig_glbrst_en
= 1, ENABLE ; Enable CRC_PMUSGRF check trigger global reset.
= 0, DISABLE ; Disable CRC_PMUSGRF check trigger global reset.

> 7, 1, OSC_CHK_TRIG_GLBRST_EN ; osc_chk_trig_glbrst_en
= 1, ENABLE ; Enable OSC check trigger global reset.
= 0, DISABLE ; Disable OSC check trigger global reset.

> 6, 1, WDT_TRIG_GLBRST_EN ; wdt_trig_glbrst_en
= 1, ENABLE ; Enable WDT trigger global reset.
= 0, DISABLE ; Disable WDT trigger global reset.

> 4, 1, WDT_TRIG_PMU_EN ; wdt_trig_pmu_en
= 1, ENABLE ; Enable wdt reset trigger pmu reset.
= 0, DISABLE ; Disable wdt reset trigger pmu reset.

> 3, 1, GLBRST_TRIG_PMU_EN ; glbrst_trig_pmu_en
= 1, ENABLE ; Enable global reset trigger pmu reset.
= 0, DISABLE ; Disable global reset trigger pmu reset.

> 2, 1, GLBRST_TRIG_PMU_SEL ; glbrst_trig_pmu_sel
= 1, FIRST ; First global reset trigger pmu reset.
= 0, SECOND ; Second global reset trigger pmu reset.

> 1, 1, TSADC_TRIG_GLBRST_EN ; tsadc_trig_glbrst_en
= 1, ENABLE ; Enable tsadc trigger global reset.
= 0, DISABLE ; Disable tsadc trigger global reset.

> 0, 1, TSADC_TRIG_GLBRST_SEL ; tsadc_trig_glbrst_sel
= 1, FIRST; tsadc trigger first global reset.
= 0, SECOND ; tsadc trigger second global reset.

SDIO_CON0 = 0x0C24 ; System control register
> 11, 1, DRV_SEL ; Selection for drive clock
= 0, PHASE ; Select clock delayed by phase shift
= 1, PHASE_AND_DELAY ; Select clock delayed by phase shift and delay line It can be modified when init_state=1 and should be stable when init_state=0.

> 3, 8, DRV_DELAYNUM ; Delay element number configuration for drive clock. It can be modified when init_state=1 and should be stable when init_state=0.

> 1, 2, DRV_DEGREE ; Phase selection for drive clock. It can be modified when init_state=1 and should be stable when init_state=0.
= 0, DEGREE_0
= 1, DEGREE_90
= 2, DEGREE_180
= 3, DEGREE_270

> 0, 1, INIT_STATE ; Enable initialization for clock source. When init_state=1, the host clocks including drive clock and sample clock are inactive.
= 0, DISABLE
= 1, ENABLE

SDIO_CON1 = 0x0C28 ; System control register
> 11, 1, SAMPLE_SEL ; Selection for sample clock. It can be modified when init_state=1 and should be stable when init_state=0.
= 0, PHASE ; Select clock delayed by phase shift
= 1, PHASE_AND_DELAY ; Select clock delayed by phase shift and delay line

> 3, 8, SAMPLE_DELAYNUM ; Delay element number configuration for sample clock. It can be modified when init_state=1 and should be stable when init_state=0.

> 1, 2, SAMPLE_DEGREE ; Phase selection for sample clock. It can be modified when init_state=1 and should be stable when init_state=0.
= 0, DEGREE_0
= 1, DEGREE_90
= 2, DEGREE_180
= 3, DEGREE_270

SDMMC_CON0 = 0x0C30 ; System control register
> 11, 1, DRV_SEL ;Selection for drive clock. It can be modified when init_state=1 and should be stable when init_state=0.
= 0, PHASE ; Select clock delayed by phase shift
= 1, PHASE_AND_DELAY ; Select clock delayed by phase shift and delay line

> 3, 8, DRV_DELAYNUM ;Delay element number configuration for drive clock. It can be modified when init_state=1 and should be stable when init_state=0.

> 1, 2, DRV_DEGREE ; Phase selection for drive clock. It can be modified when init_state=1 and should be stable when init_state=0.
= 0, DEGREE_0
= 1, DEGREE_90
= 2, DEGREE_180
= 3, DEGREE_270

> 0, 1, INIT_STATE ; Enable initialization for clock source. When init_state=1, the host clocks including drive clock and sample clock are inactive.
= 0, DISABLE
= 1, ENABLE

SDMMC_CON1 = 0x0C34 ; System control register
> 11, 1, SAMPLE_SEL ; Selection for sample clock. It can be modified when init_state=1 and should be stable when init_state=0.
= 0, PHASE ; Select clock delayed by phase shift
= 1, PHASE_AND_DELAY ; Select clock delayed by phase shift and delay line

> 3, 8, SAMPLE_DELAYNUM ; Delay element number configuration for sample clock. It can be modified when init_state=1 and should be stable when init_state=0.

> 1, 2, SAMPLE_DEGREE ; Phase selection for sample clock. It can be modified when init_state=1 and should be stable when init_state=0.
= 0, DEGREE_0
= 1, DEGREE_90
= 2, DEGREE_180
= 3, DEGREE_270

PHYREF_ALT_GATE_CON = 0x0C38 ; System control register
> 3, 1, PHY1_REF_ALT_CLK_M_EN ; phy1_ref_alt_clk_m clock gating control. When high, disable clock.
= 1, DISABLE
= 0, ENABLE

> 2, 1, PHY1_REF_ALT_CLK_P_EN ; phy1_ref_alt_clk_p clock gating control. When high, disable clock.
= 1, DISABLE
= 0, ENABLE

> 1, 1, PHY0_REF_ALT_CLK_M_EN ; phy0_ref_alt_clk_m clock gating control. When high, disable clock.
= 1, DISABLE
= 0, ENABLE

> 0, 1, PHY0_REF_ALT_CLK_P_EN ; phy0_ref_alt_clk_p clock gating control. When high, disable clock.
= 1, DISABLE
= 0, ENABLE

CM0_GATEMASK_CON = 0x0C3C ; System control register
> 5, 1, DDRCM0_SCLK_CM0S_EN ; ddrcm0_sclk_cm0s clock gating control. When high, disable clock.
= 1, DISABLE
= 0, ENABLE

> 4, 1, DDRCM0_HCLK_CM0S_EN ; ddrcm0_hclk_cm0s clock gating control. When high, disable clock.
= 1, DISABLE
= 0, ENABLE

> 3, 1, DDRCM0_DCLK_CM0S_EN ; ddrcm0_dclk_cm0s clock gating control. When high, disable clock.
= 1, DISABLE
= 0, ENABLE

> 2, 1, NPUCM0_SCLK_CM0S_EN ; npucm0_sclk_cm0s clock gating control. When high, disable clock.
= 1, DISABLE
= 0, ENABLE

> 1, 1, NPUCM0_HCLK_CM0S_EN ; npucm0_hclk_cm0s clock gating control. When high, disable clock.
= 1, DISABLE
= 0, ENABLE

> 0, 1, NPUCM0_DCLK_CM0S_EN ; npucm0_dclk_cm0s clock gating control. When high, disable clock.
= 1, DISABLE
= 0, ENABLE

QCHANNEL_CON01 = 0x0CA4 ; Qchannel control register 1
> 7, 1, CLK_GPU_QC_GATE_EN ; qc_gate_en
= 1, DOC_BUG_ENABLE ; Enable clk_gpu qchannel gate function.
= 0, DOC_BUG_DISABLE ; Disable clk_gpu qchannel gate function.

> 6, 1, CLK_GPU_QC_EN ; qc_en
= 1, DOC_BUG_ENABLE ; Enable clk_gpu qchannel.
= 0, DOC_BUG_DISABLE ; Disable clk_gpu qchannel.

> 5, 1, ACLK_PHP_GIC_ITS_QC_GATE_EN ; qc_gate_en
= 1, DOC_BUG_ENABLE ; Enable aclk_php_gic_its qchannel gate function.
= 0, DOC_BUG_DISABLE ; Disable aclk_php_gic_its qchannel gate function.

> 4, 1, ACLK_PHP_GIC_ITS_QC_EN ; qc_en
= 1, DOC_BUG_ENABLE ; Enable aclk_php_gic_its qchannel.
= 0, DOC_BUG_DISABLE ; Disable aclk_php_gic_its qchannel.

> 3, 1, ACLK_GICADB_GIC2CORE_BUS_QC_GATE_EN ; qc_gate_en
= 1, DOC_BUG_ENABLE ; Enable aclk_gicadb_gic2core_bus qchannel gate function.
= 0, DOC_BUG_DISABLE ; Disable aclk_gicadb_gic2core_bus qchannel gate function.

> 2, 1, ACLK_GICADB_GIC2CORE_BUS_QC_EN ; qc_en
= 1, DOC_BUG_ENABLE ; Enable aclk_gicadb_gic2core_bus qchannel.
= 0, DOC_BUG_DISABLE ; Disable aclk_gicadb_gic2core_bus qchannel.

> 1, 1, ACLK_GIC_QC_GATE_EN ; qc_gate_en
= 1, DOC_BUG_ENABLE ; Enable aclk_gic qchannel gate function.
= 0, DOC_BUG_DISABLE ; Disable aclk_gic qchannel gate function.

> 0, 1, ACLK_GIC_QC_EN ; qc_en
= 1, DOC_BUG_ENABLE ; Enable aclk_gic qchannel.
= 0, DOC_BUG_DISABLE ; Disable aclk_gic qchannel.

SMOTH_DIVFREE_CON08 = 0x0CC0 ; Smoothdiv control register
> 16, 16, ACLK_M0_GPU_FREQ_KEEP ; freq_keep Cycles to keep every step.

> 15, 1, ACLK_M0_GPU_BYPASS ; bypass Division signal bypass.
= 1, BYPASS
= 0, USE ; Use Smoothdiv to control clock division.

> 14, 1, ACLK_M0_GPU_GATE_SMTH_EN ; gate_smth_en If trigger smoothdiv function when clk been gated.
= 1, ENABLE
= 0, DISABLE

> 13, 1, ACLK_M0_GPU_SMDIV_CLK_OFF ; smdiv_clk_off Turn off smoothdiv module clk.
= 1, TURN_OFF
= 0, TURN_ON

> 0, 5, ACLK_M0_GPU_STEP ; step Step of div from 0x1f to setting configuration.

SMOTH_DIVFREE_CON09 = 0x0CC4 ; Smoothdiv control register
> 16, 16, ACLK_M1_GPU_FREQ_KEEP ; freq_keep Cycles to keep every step.

> 15, 1, ACLK_M1_GPU_BYPASS ; bypass Division signal bypass.
= 1, BYPASS
= 0, USE ; Use Smoothdiv to control clock division.

> 14, 1, ACLK_M1_GPU_GATE_SMTH_EN ; gate_smth_en If trigger smoothdiv function when clk been gated.
= 1, ENABLE
= 0, DISABLE

> 13, 1, ACLK_M1_GPU_SMDIV_CLK_OFF ; smdiv_clk_off Turn off smoothdiv module clk.
= 1, TURN_OFF
= 0, TURN_ON

> 0, 5, ACLK_M1_GPU_STEP ; step Step of div from 0x1f to setting configuration.

SMOTH_DIVFREE_CON10 = 0x0CC8 ; Smoothdiv control register
> 16, 16, ACLK_M2_GPU_FREQ_KEEP ; freq_keep Cycles to keep every step.

> 15, 1, ACLK_M2_GPU_BYPASS ; bypass Division signal bypass.
= 1, BYPASS
= 0, USE ; Use Smoothdiv to control clock division.

> 14, 1, ACLK_M2_GPU_GATE_SMTH_EN ; gate_smth_en If trigger smoothdiv function when clk been gated.
= 1, ENABLE
= 0, DISABLE

> 13, 1, ACLK_M2_GPU_SMDIV_CLK_OFF ; smdiv_clk_off Turn off smoothdiv module clk.
= 1, TURN_OFF
= 0, TURN_ON

> 0, 5, ACLK_M2_GPU_STEP ; step Step of div from 0x1f to setting configuration.

SMOTH_DIVFREE_CON11 = 0x0CCC ; Smoothdiv control register
> 16, 16, ACLK_M3_GPU_FREQ_KEEP ; freq_keep Cycles to keep every step.

> 15, 1, ACLK_M3_GPU_BYPASS ; bypass Division signal bypass.
= 1, BYPASS
= 0, USE ; Use Smoothdiv to control clock division.

> 14, 1, ACLK_M3_GPU_GATE_SMTH_EN ; gate_smth_en If trigger smoothdiv function when clk been gated.
= 1, ENABLE
= 0, DISABLE

> 13, 1, ACLK_M3_GPU_SMDIV_CLK_OFF ; smdiv_clk_off Turn off smoothdiv module clk.
= 1, TURN_OFF
= 0, TURN_ON

> 0, 5, ACLK_M3_GPU_STEP ; step Step of div from 0x1f to setting configuration.

SMOTH_DIVFREE_CON12 = 0x0CD0 ; Smoothdiv control register
> 16, 16, CLK_RKNN_DSU0_SRC_FREQ_KEEP ; freq_keep Cycles to keep every step.

> 15, 1, CLK_RKNN_DSU0_SRC_BYPASS ; bypass Division signal bypass.
= 1, BYPASS
= 0, USE ; Use Smoothdiv to control clock division.

> 14, 1, CLK_RKNN_DSU0_SRC_GATE_SMTH_EN ; gate_smth_en If trigger smoothdiv function when clk been gated.
= 1, ENABLE
= 0, DISABLE

> 13, 1, CLK_RKNN_DSU0_SRC_SMDIV_CLK_OFF ; smdiv_clk_off Turn off smoothdiv module clk.
= 1, TURN_OFF
= 0, TURN_ON

> 0, 5, CLK_RKNN_DSU0_SRC_STEP ; step Step of div from 0x1f to setting configuration.

AUTOCS_ACLK_TOP_ROOT_CON0 = 0x0D00 ; Auto clock switch control register 0
> 16, 16, ACLK_TOP_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_TOP_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_TOP_ROOT_CON1 = 0x0D04 ; Auto clock switch control register 1
> 14, 2, ACLK_TOP_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_TOP_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_top_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_TOP_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_top_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_TOP_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_top_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_LO_TOP_ROOT_CON0 = 0x0D08 ; Auto clock switch control register 0
> 16, 16, ACLK_LOW_TOP_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_LOW_TOP_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_LO_TOP_ROOT_CON1 = 0x0D0C ; Auto clock switch control register 1
> 14, 2, ACLK_LOW_TOP_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_LOW_TOP_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_low_top_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_LOW_TOP_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_low_top_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_LOW_TOP_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_low_top_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_TOP_M400_ROOT_CON0 = 0x0D10 ; Auto clock switch control register 0
> 16, 16, ACLK_TOP_M400_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_TOP_M400_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_TOP_M400_ROOT_CON1 = 0x0D14 ; Auto clock switch control register 1
> 14, 2, ACLK_TOP_M400_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_TOP_M400_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_top_m400_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_TOP_M400_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_top_m400_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_TOP_M400_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_top_m400_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_TOP_S400_ROOT_CON0 = 0x0D18 ; Auto clock switch control register 0
> 16, 16, ACLK_TOP_S400_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_TOP_S400_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_TOP_S400_ROOT_CON1 = 0x0D1C ; Auto clock switch control register 1
> 14, 2, ACLK_TOP_S400_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_TOP_S400_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_top_s400_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_TOP_S400_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_top_s400_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_TOP_S400_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_top_s400_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_BUS_ROOT_CON0 = 0x0D20 ; Auto clock switch control register 0
> 16, 16, ACLK_BUS_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_BUS_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_BUS_ROOT_CON1 = 0x0D24 ; Auto clock switch control register 1
> 14, 2, ACLK_BUS_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_BUS_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_bus_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_BUS_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_bus_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_BUS_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_bus_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_ISP1_ROOT_CON0 = 0x0D28 ; Auto clock switch control register 0
> 16, 16, ACLK_ISP1_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_ISP1_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_ISP1_ROOT_CON1 = 0x0D2C ; Auto clock switch control register 1
> 14, 2, ACLK_ISP1_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_ISP1_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_isp1_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_ISP1_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_isp1_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_ISP1_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_isp1_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_CLK_RKNN_DSU0_CON0 = 0x0D30 ; Auto clock switch control register 0
> 16, 16, CLK_RKNN_DSU0_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, CLK_RKNN_DSU0_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_CLK_RKNN_DSU0_CON1 = 0x0D34 ; Auto clock switch control register 1
> 14, 2, CLK_RKNN_DSU0_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, CLK_RKNN_DSU0_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable clk_rknn_dsu0 switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, CLK_RKNN_DSU0_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable clk_rknn_dsu0 switch to lower frequency.
= 0, DISABLE

> 0, 12, CLK_RKNN_DSU0_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable clk_rknn_dsu0 switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_RKNN_ROOT_CON0 = 0x0D38 ; Auto clock switch control register 0
> 16, 16, HCLK_RKNN_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_RKNN_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_RKNN_ROOT_CON1 = 0x0D3C ; Auto clock switch control register 1
> 14, 2, HCLK_RKNN_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_RKNN_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_rknn_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_RKNN_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_rknn_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_RKNN_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_rknn_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_NVM_ROOT_CON0 = 0x0D40 ; Auto clock switch control register 0
> 16, 16, ACLK_NVM_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_NVM_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_NVM_ROOT_CON1 = 0x0D44 ; Auto clock switch control register 1
> 14, 2, ACLK_NVM_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_NVM_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_nvm_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_NVM_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_nvm_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_NVM_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_nvm_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_PHP_ROOT_CON0 = 0x0D48 ; Auto clock switch control register 0
> 16, 16, ACLK_PHP_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_PHP_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_PHP_ROOT_CON1 = 0x0D4C ; Auto clock switch control register 1
> 14, 2, ACLK_PHP_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_PHP_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_php_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_PHP_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_php_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_PHP_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_php_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_RKVDEC0_ROOT_CON0 = 0x0D50 ; Auto clock switch control register 0
> 16, 16, ACLK_RKVDEC0_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_RKVDEC0_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_RKVDEC0_ROOT_CON1 = 0x0D54 ; Auto clock switch control register 1
> 14, 2, ACLK_RKVDEC0_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_RKVDEC0_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_rkvdec0_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_RKVDEC0_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_rkvdec0_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_RKVDEC0_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_rkvdec0_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_RKVDEC_CCU_CON0 = 0x0D58 ; Auto clock switch control register 0
> 16, 16, ACLK_RKVDEC_CCU_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_RKVDEC_CCU_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_RKVDEC_CCU_CON1 = 0x0D5C ; Auto clock switch control register 1
> 14, 2, ACLK_RKVDEC_CCU_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_RKVDEC_CCU_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_rkvdec_ccu switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_RKVDEC_CCU_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_rkvdec_ccu switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_RKVDEC_CCU_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_rkvdec_ccu switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_RKVDEC1_ROOT_CON0 = 0x0D60 ; Auto clock switch control register 0
> 16, 16, ACLK_RKVDEC1_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_RKVDEC1_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_RKVDEC1_ROOT_CON1 = 0x0D64 ; Auto clock switch control register 1
> 14, 2, ACLK_RKVDEC1_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_RKVDEC1_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_rkvdec1_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_RKVDEC1_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_rkvdec1_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_RKVDEC1_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_rkvdec1_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_USB_ROOT_CON0 = 0x0D68 ; Auto clock switch control register 0
> 16, 16, ACLK_USB_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_USB_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_USB_ROOT_CON1 = 0x0D6C ; Auto clock switch control register 1
> 14, 2, ACLK_USB_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_USB_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_usb_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_USB_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_usb_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_USB_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_usb_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_VDPU_ROOT_CON0 = 0x0D70 ; Auto clock switch control register 0
> 16, 16, ACLK_VDPU_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_VDPU_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_VDPU_ROOT_CON1 = 0x0D74 ; Auto clock switch control register 1
> 14, 2, ACLK_VDPU_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_VDPU_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_vdpu_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_VDPU_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_vdpu_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_VDPU_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_vdpu_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_VDPU_LOW_ROOT_CON0 = 0x0D78 ; Auto clock switch control register 0
> 16, 16, ACLK_VDPU_LOW_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_VDPU_LOW_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_VDPU_LOW_ROOT_CON1 = 0x0D7C ; Auto clock switch control register 1
> 14, 2, ACLK_VDPU_LOW_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_VDPU_LOW_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_vdpu_low_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_VDPU_LOW_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_vdpu_low_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_VDPU_LOW_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_vdpu_low_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_JPEG_DECODER_ROOT_CON0 = 0x0D80 ; Auto clock switch control register 0
> 16, 16, ACLK_JPEG_DECODER_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_JPEG_DECODER_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_JPEG_DECODER_ROOT_CON1 = 0x0D84 ; Auto clock switch control register 1
> 14, 2, ACLK_JPEG_DECODER_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_JPEG_DECODER_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_jpeg_decoder_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_JPEG_DECODER_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_jpeg_decoder_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_JPEG_DECODER_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_jpeg_decoder_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_RKVENC0_ROOT_CON0 = 0x0D88 ; Auto clock switch control register 0
> 16, 16, ACLK_RKVENC0_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_RKVENC0_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_RKVENC0_ROOT_CON1 = 0x0D8C ; Auto clock switch control register 1
> 14, 2, ACLK_RKVENC0_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_RKVENC0_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_rkvenc0_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_RKVENC0_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_rkvenc0_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_RKVENC0_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_rkvenc0_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_RKVENC1_ROOT_CON0 = 0x0D90 ; Auto clock switch control register 0
> 16, 16, ACLK_RKVENC1_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_RKVENC1_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_RKVENC1_ROOT_CON1 = 0x0D94 ; Auto clock switch control register 1
> 14, 2, ACLK_RKVENC1_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_RKVENC1_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_rkvenc1_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_RKVENC1_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_rkvenc1_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_RKVENC1_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_rkvenc1_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_VI_ROOT_CON0 = 0x0D98 ; Auto clock switch control register 0
> 16, 16, ACLK_VI_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_VI_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_VI_ROOT_CON1 = 0x0D9C ; Auto clock switch control register 1
> 14, 2, ACLK_VI_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_VI_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_vi_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_VI_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_vi_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_VI_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_vi_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_VOP_ROOT_CON0 = 0x0DA0 ; Auto clock switch control register 0
> 16, 16, ACLK_VOP_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_VOP_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_VOP_ROOT_CON1 = 0x0DA4 ; Auto clock switch control register 1
> 14, 2, ACLK_VOP_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_VOP_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_vop_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_VOP_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_vop_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_VOP_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_vop_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_VO0_ROOT_CON0 = 0x0DA8 ; Auto clock switch control register 0
> 16, 16, ACLK_VO0_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_VO0_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_VO0_ROOT_CON1 = 0x0DAC ; Auto clock switch control register 1
> 14, 2, ACLK_VO0_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_VO0_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_vo0_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_VO0_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_vo0_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_VO0_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_vo0_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_HDCP1_ROOT_CON0 = 0x0DB0 ; Auto clock switch control register 0
> 16, 16, ACLK_HDCP1_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_HDCP1_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_HDCP1_ROOT_CON1 = 0x0DB4 ; Auto clock switch control register 1
> 14, 2, ACLK_HDCP1_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_HDCP1_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_hdcp1_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_HDCP1_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_hdcp1_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_HDCP1_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_hdcp1_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_HDMIRX_ROOT_CON0 = 0x0DB8 ; Auto clock switch control register 0
> 16, 16, ACLK_HDMIRX_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_HDMIRX_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_HDMIRX_ROOT_CON1 = 0x0DBC ; Auto clock switch control register 1
> 14, 2, ACLK_HDMIRX_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_HDMIRX_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_hdmirx_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_HDMIRX_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_hdmirx_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_HDMIRX_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_hdmirx_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_CLK_GPU_COREGROUP_CON0 = 0x0DC0 ; Auto clock switch control register 0
> 16, 16, CLK_GPU_COREGROUP_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, CLK_GPU_COREGROUP_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_CLK_GPU_COREGROUP_CON1 = 0x0DC4 ; Auto clock switch control register 1
> 14, 2, CLK_GPU_COREGROUP_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, CLK_GPU_COREGROUP_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable clk_gpu_coregroup switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, CLK_GPU_COREGROUP_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable clk_gpu_coregroup switch to lower frequency.
= 0, DISABLE

> 0, 12, CLK_GPU_COREGROUP_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable clk_gpu_coregroup switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_AV1_ROOT_CON0 = 0x0DE0 ; Auto clock switch control register 0
> 16, 16, ACLK_AV1_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_AV1_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_AV1_ROOT_CON1 = 0x0DE4 ; Auto clock switch control register 1
> 14, 2, ACLK_AV1_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_AV1_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_av1_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_AV1_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_av1_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_AV1_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_av1_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_CENTER_ROOT_CON0 = 0x0DE8 ; Auto clock switch control register 0
> 16, 16, ACLK_CENTER_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_CENTER_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_CENTER_ROOT_CON1 = 0x0DEC ; Auto clock switch control register 1
> 14, 2, ACLK_CENTER_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_CENTER_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_center_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_CENTER_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_center_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_CENTER_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_center_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_CENTER_LOW_ROOT_CON0 = 0x0DF0 ; Auto clock switch control register 0
> 16, 16, ACLK_CENTER_LOW_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_CENTER_LOW_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_CENTER_LOW_ROOT_CON1 = 0x0DF4 ; Auto clock switch control register 1
> 14, 2, ACLK_CENTER_LOW_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_CENTER_LOW_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_center_low_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_CENTER_LOW_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_center_low_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_CENTER_LOW_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_center_low_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_CENTER_S400_ROOT_CON0 = 0x0DF8 ; Auto clock switch control register 0
> 16, 16, ACLK_CENTER_S400_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_CENTER_S400_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_CENTER_S400_ROOT_CON1 = 0x0DFC ; Auto clock switch control register 1
> 14, 2, ACLK_CENTER_S400_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_CENTER_S400_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_center_s400_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_CENTER_S400_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_center_s400_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_CENTER_S400_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_center_s400_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_VO1USB_TOP_ROOT_CON0 = 0x0E00 ; Auto clock switch control register 0
> 16, 16, ACLK_VO1USB_TOP_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_VO1USB_TOP_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_VO1USB_TOP_ROOT_CON1 = 0x0E04 ; Auto clock switch control register 1
> 14, 2, ACLK_VO1USB_TOP_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_VO1USB_TOP_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_vo1usb_top_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_VO1USB_TOP_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_vo1usb_top_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_VO1USB_TOP_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_vo1usb_top_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_RGA3_ROOT_CON0 = 0x0E08 ; Auto clock switch control register 0
> 16, 16, ACLK_RGA3_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_RGA3_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_RGA3_ROOT_CON1 = 0x0E0C ; Auto clock switch control register 1
> 14, 2, ACLK_RGA3_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_RGA3_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_rga3_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_RGA3_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_rga3_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_RGA3_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_rga3_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_PCLK_AV1_ROOT_CON0 = 0x0E10 ; Auto clock switch control register 0
> 16, 16, PCLK_AV1_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, PCLK_AV1_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_PCLK_AV1_ROOT_CON1 = 0x0E14 ; Auto clock switch control register 1
> 14, 2, PCLK_AV1_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, PCLK_AV1_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable pclk_av1_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, PCLK_AV1_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable pclk_av1_root switch to lower frequency.
= 0, DISABLE

> 0, 12, PCLK_AV1_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable pclk_av1_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_ISP1_ROOT_CON0 = 0x0E18 ; Auto clock switch control register 0
> 16, 16, HCLK_ISP1_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_ISP1_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_ISP1_ROOT_CON1 = 0x0E1C ; Auto clock switch control register 1
> 14, 2, HCLK_ISP1_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_ISP1_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_isp1_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_ISP1_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_isp1_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_ISP1_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_isp1_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_PCLK_NPUTOP_ROOT_CON0 = 0x0E20 ; Auto clock switch control register 0
> 16, 16, PCLK_NPUTOP_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, PCLK_NPUTOP_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_PCLK_NPUTOP_ROOT_CON1 = 0x0E24 ; Auto clock switch control register 1
> 14, 2, PCLK_NPUTOP_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, PCLK_NPUTOP_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable pclk_nputop_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, PCLK_NPUTOP_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable pclk_nputop_root switch to lower frequency.
= 0, DISABLE

> 0, 12, PCLK_NPUTOP_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable pclk_nputop_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_NPU_CM0_ROOT_CON0 = 0x0E28 ; Auto clock switch control register 0
> 16, 16, HCLK_NPU_CM0_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_NPU_CM0_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_NPU_CM0_ROOT_CON1 = 0x0E2C ; Auto clock switch control register 1
> 14, 2, HCLK_NPU_CM0_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_NPU_CM0_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_npu_cm0_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_NPU_CM0_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_npu_cm0_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_NPU_CM0_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_npu_cm0_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_NVM_ROOT_CON0 = 0x0E30 ; Auto clock switch control register 0
> 16, 16, HCLK_NVM_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_NVM_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_NVM_ROOT_CON1 = 0x0E34 ; Auto clock switch control register 1
> 14, 2, HCLK_NVM_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_NVM_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_nvm_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_NVM_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_nvm_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_NVM_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_nvm_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_PCLK_PHP_ROOT_CON0 = 0x0E38 ; Auto clock switch control register 0
> 16, 16, PCLK_PHP_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, PCLK_PHP_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_PCLK_PHP_ROOT_CON1 = 0x0E3C ; Auto clock switch control register 1
> 14, 2, PCLK_PHP_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, PCLK_PHP_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable pclk_php_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, PCLK_PHP_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable pclk_php_root switch to lower frequency.
= 0, DISABLE

> 0, 12, PCLK_PHP_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable pclk_php_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_PCIE_ROOT_CON0 = 0x0E40 ; Auto clock switch control register 0
> 16, 16, ACLK_PCIE_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_PCIE_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_PCIE_ROOT_CON1 = 0x0E44 ; Auto clock switch control register 1
> 14, 2, ACLK_PCIE_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_PCIE_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_pcie_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_PCIE_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_pcie_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_PCIE_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_pcie_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_RKVDEC0_ROOT_CON0 = 0x0E48 ; Auto clock switch control register 0CLK_PCIE_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
> 16, 16, HCLK_RKVDEC0_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_RKVDEC0_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_RKVDEC0_ROOT_CON1 = 0x0E4C ; Auto clock switch control register 1
> 14, 2, HCLK_RKVDEC0_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_RKVDEC0_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_rkvdec0_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_RKVDEC0_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_rkvdec0_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_RKVDEC0_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_rkvdec0_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_RKVDEC1_ROOT_CON0 = 0x0E50 ; Auto clock switch control register 0
> 16, 16, HCLK_RKVDEC1_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_RKVDEC1_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_RKVDEC1_ROOT_CON1 = 0x0E54 ; Auto clock switch control register 1
> 14, 2, HCLK_RKVDEC1_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_RKVDEC1_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_rkvdec1_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_RKVDEC1_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_rkvdec1_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_RKVDEC1_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_rkvdec1_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_PCLK_TOP_ROOT_CON0 = 0x0E58 ; Auto clock switch control register 0
> 16, 16, PCLK_TOP_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, PCLK_TOP_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_PCLK_TOP_ROOT_CON1 = 0x0E5C ; Auto clock switch control register 1
> 14, 2, PCLK_TOP_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, PCLK_TOP_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable pclk_top_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, PCLK_TOP_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable pclk_top_root switch to lower frequency.
= 0, DISABLE

> 0, 12, PCLK_TOP_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable pclk_top_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_TOP_M500_ROOT_CON0 = 0x0E60 ; Auto clock switch control register 0
> 16, 16, ACLK_TOP_M500_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_TOP_M500_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_TOP_M500_ROOT_CON1 = 0x0E64 ; Auto clock switch control register 1
> 14, 2, ACLK_TOP_M500_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_TOP_M500_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_top_m500_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_TOP_M500_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_top_m500_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_TOP_M500_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_top_m500_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_TOP_S200_ROOT_CON0 = 0x0E68 ; Auto clock switch control register 0
> 16, 16, ACLK_TOP_S200_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_TOP_S200_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_TOP_S200_ROOT_CON1 = 0x0E6C ; Auto clock switch control register 1
> 14, 2, ACLK_TOP_S200_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_TOP_S200_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_top_s200_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_TOP_S200_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_top_s200_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_TOP_S200_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_top_s200_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_USB_ROOT_CON0 = 0x0E70 ; Auto clock switch control register 0
> 16, 16, HCLK_USB_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_USB_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_USB_ROOT_CON1 = 0x0E74 ; Auto clock switch control register 1
> 14, 2, HCLK_USB_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_USB_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_usb_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_USB_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_usb_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_USB_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_usb_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_VDPU_ROOT_CON0 = 0x0E78 ; Auto clock switch control register 0
> 16, 16, HCLK_VDPU_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_VDPU_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_VDPU_ROOT_CON1 = 0x0E7C ; Auto clock switch control register 1
> 14, 2, HCLK_VDPU_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_VDPU_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_vdpu_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_VDPU_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_vdpu_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_VDPU_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_vdpu_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_RKVENC0_ROOT_CON0 = 0x0E80 ; Auto clock switch control register 0
> 16, 16, HCLK_RKVENC0_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_RKVENC0_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_RKVENC0_ROOT_CON1 = 0x0E84 ; Auto clock switch control register 1
> 14, 2, HCLK_RKVENC0_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_RKVENC0_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_rkvenc0_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_RKVENC0_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_rkvenc0_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_RKVENC0_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_rkvenc0_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_RKVENC1_ROOT_CON0 = 0x0E88 ; Auto clock switch control register 0
> 16, 16, HCLK_RKVENC1_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_RKVENC1_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_RKVENC1_ROOT_CON1 = 0x0E8C ; Auto clock switch control register 1
> 14, 2, HCLK_RKVENC1_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_RKVENC1_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_rkvenc1_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_RKVENC1_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_rkvenc1_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_RKVENC1_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_rkvenc1_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_VI_ROOT_CON0 = 0x0E90 ; Auto clock switch control register 0
> 16, 16, HCLK_VI_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_VI_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_VI_ROOT_CON1 = 0x0E94 ; Auto clock switch control register 1
> 14, 2, HCLK_VI_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_VI_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_vi_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_VI_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_vi_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_VI_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_vi_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_PCLK_VI_ROOT_CON0 = 0x0E98 ; Auto clock switch control register 0
> 16, 16, PCLK_VI_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, PCLK_VI_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_PCLK_VI_ROOT_CON1 = 0x0E9C ; Auto clock switch control register 1
> 14, 2, PCLK_VI_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, PCLK_VI_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable pclk_vi_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, PCLK_VI_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable pclk_vi_root switch to lower frequency.
= 0, DISABLE

> 0, 12, PCLK_VI_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable pclk_vi_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_VOP_LOW_ROOT_CON0 = 0x0EA0 ; Auto clock switch control register 0
> 16, 16, ACLK_VOP_LOW_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_VOP_LOW_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_VOP_LOW_ROOT_CON1 = 0x0EA4 ; Auto clock switch control register 1
> 14, 2, ACLK_VOP_LOW_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_VOP_LOW_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_vop_low_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_VOP_LOW_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_vop_low_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_VOP_LOW_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_vop_low_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_VOP_ROOT_CON0 = 0x0EA8 ; Auto clock switch control register 0
> 16, 16, HCLK_VOP_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_VOP_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_VOP_ROOT_CON1 = 0x0EAC ; Auto clock switch control register 1
> 14, 2, HCLK_VOP_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_VOP_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_vop_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_VOP_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_vop_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_VOP_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_vop_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_PCLK_VOP_ROOT_CON0 = 0x0EB0 ; Auto clock switch control register 0
> 16, 16, PCLK_VOP_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, PCLK_VOP_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_PCLK_VOP_ROOT_CON1 = 0x0EB4 ; Auto clock switch control register 1
> 14, 2, PCLK_VOP_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, PCLK_VOP_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable pclk_vop_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, PCLK_VOP_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable pclk_vop_root switch to lower frequency.
= 0, DISABLE

> 0, 12, PCLK_VOP_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable pclk_vop_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_VO0_ROOT_CON0 = 0x0EB8 ; Auto clock switch control register 0
> 16, 16, HCLK_VO0_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_VO0_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_VO0_ROOT_CON1 = 0x0EBC ; Auto clock switch control register 1
> 14, 2, HCLK_VO0_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_VO0_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_vo0_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_VO0_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_vo0_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_VO0_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_vo0_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_VO0_S_ROOT_CON0 = 0x0EC0 ; Auto clock switch control register 0
> 16, 16, HCLK_VO0_S_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_VO0_S_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_VO0_S_ROOT_CON1 = 0x0EC4 ; Auto clock switch control register 1
> 14, 2, HCLK_VO0_S_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_VO0_S_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_vo0_s_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_VO0_S_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_vo0_s_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_VO0_S_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_vo0_s_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_PCLK_VO0_ROOT_CON0 = 0x0EC8 ; Auto clock switch control register 0
> 16, 16, PCLK_VO0_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, PCLK_VO0_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_PCLK_VO0_ROOT_CON1 = 0x0ECC ; Auto clock switch control register 1
> 14, 2, PCLK_VO0_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, PCLK_VO0_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable pclk_vo0_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, PCLK_VO0_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable pclk_vo0_root switch to lower frequency.
= 0, DISABLE

> 0, 12, PCLK_VO0_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable pclk_vo0_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_PCLK_VO0_S_ROOT_CON0 = 0x0ED0 ; Auto clock switch control register 0
> 16, 16, PCLK_VO0_S_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, PCLK_VO0_S_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_PCLK_VO0_S_ROOT_CON1 = 0x0ED4 ; Auto clock switch control register 1
> 14, 2, PCLK_VO0_S_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, PCLK_VO0_S_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable pclk_vo0_s_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, PCLK_VO0_S_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable pclk_vo0_s_root switch to lower frequency.
= 0, DISABLE

> 0, 12, PCLK_VO0_S_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable pclk_vo0_s_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_VO1_ROOT_CON0 = 0x0ED8 ; Auto clock switch control register 0
> 16, 16, HCLK_VO1_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_VO1_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_VO1_ROOT_CON1 = 0x0EDC ; Auto clock switch control register 1
> 14, 2, HCLK_VO1_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_VO1_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_vo1_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_VO1_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_vo1_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_VO1_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_vo1_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_VO1_S_ROOT_CON0 = 0x0EE0 ; Auto clock switch control register 0
> 16, 16, HCLK_VO1_S_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_VO1_S_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_VO1_S_ROOT_CON1 = 0x0EE4 ; Auto clock switch control register 1
> 14, 2, HCLK_VO1_S_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_VO1_S_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_vo1_s_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_VO1_S_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_vo1_s_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_VO1_S_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_vo1_s_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_PCLK_VO1_ROOT_CON0 = 0x0EE8 ; Auto clock switch control register 0
> 16, 16, PCLK_VO1_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, PCLK_VO1_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_PCLK_VO1_ROOT_CON1 = 0x0EEC ; Auto clock switch control register 1
> 14, 2, PCLK_VO1_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, PCLK_VO1_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable pclk_vo1_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, PCLK_VO1_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable pclk_vo1_root switch to lower frequency.
= 0, DISABLE

> 0, 12, PCLK_VO1_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable pclk_vo1_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_PCLK_VO1_S_ROOT_CON0 = 0x0EF0 ; Auto clock switch control register 0
> 16, 16, PCLK_VO1_S_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, PCLK_VO1_S_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_PCLK_VO1_S_ROOT_CON1 = 0x0EF4 ; Auto clock switch control register 1
> 14, 2, PCLK_VO1_S_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, PCLK_VO1_S_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable pclk_vo1_s_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, PCLK_VO1_S_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable pclk_vo1_s_root switch to lower frequency.
= 0, DISABLE

> 0, 12, PCLK_VO1_S_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable pclk_vo1_s_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_PCLK_GPU_ROOT_CON0 = 0x0EF8 ; Auto clock switch control register 0
> 16, 16, PCLK_GPU_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, PCLK_GPU_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_PCLK_GPU_ROOT_CON1 = 0x0EFC ; Auto clock switch control register 1
> 14, 2, PCLK_GPU_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, PCLK_GPU_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable pclk_gpu_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, PCLK_GPU_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable pclk_gpu_root switch to lower frequency.
= 0, DISABLE

> 0, 12, PCLK_GPU_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable pclk_gpu_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_CENTER_ROOT_CON0 = 0x0F00 ; Auto clock switch control register 0
> 16, 16, HCLK_CENTER_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_CENTER_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_CENTER_ROOT_CON1 = 0x0F04 ; Auto clock switch control register 1
> 14, 2, HCLK_CENTER_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_CENTER_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_center_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_CENTER_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_center_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_CENTER_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_center_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_PCLK_CENTER_ROOT_CON0 = 0x0F08 ; Auto clock switch control register 0
> 16, 16, PCLK_CENTER_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, PCLK_CENTER_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_PCLK_CENTER_ROOT_CON1 = 0x0F0C ; Auto clock switch control register 1
> 14, 2, PCLK_CENTER_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, PCLK_CENTER_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable pclk_center_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, PCLK_CENTER_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable pclk_center_root switch to lower frequency.
= 0, DISABLE

> 0, 12, PCLK_CENTER_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable pclk_center_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_CENTER_S200_ROOT_CON0 = 0x0F10 ; Auto clock switch control register 0
> 16, 16, ACLK_CENTER_S200_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_CENTER_S200_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_CENTER_S200_ROOT_CON1 = 0x0F14 ; Auto clock switch control register 1
> 14, 2, ACLK_CENTER_S200_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_CENTER_S200_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_center_s200_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_CENTER_S200_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_center_s200_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_CENTER_S200_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_center_s200_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_SDIO_ROOT_CON0 = 0x0F18 ; Auto clock switch control register 0
> 16, 16, HCLK_SDIO_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_SDIO_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_SDIO_ROOT_CON1 = 0x0F1C ; Auto clock switch control register 1
> 14, 2, HCLK_SDIO_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_SDIO_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_sdio_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_SDIO_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_sdio_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_SDIO_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_sdio_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_RGA3_ROOT_CON0 = 0x0F20 ; Auto clock switch control register 0
> 16, 16, HCLK_RGA3_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_RGA3_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_RGA3_ROOT_CON1 = 0x0F24 ; Auto clock switch control register 1
> 14, 2, HCLK_RGA3_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_RGA3_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_rga3_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_RGA3_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_rga3_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_RGA3_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_rga3_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_VO1USB_TOP_ROOT_CON0 = 0x0F28 ; Auto clock switch control register 0
> 16, 16, HCLK_VO1USB_TOP_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_VO1USB_TOP_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_VO1USB_TOP_ROOT_CON1 = 0x0F2C ; Auto clock switch control register 1
> 14, 2, HCLK_VO1USB_TOP_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_VO1USB_TOP_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_vo1usb_top_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_VO1USB_TOP_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_vo1usb_top_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_VO1USB_TOP_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_vo1usb_top_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_ACLK_TOP_M300_ROOT_CON0 = 0x0F30 ; Auto clock switch control register 0
> 16, 16, ACLK_TOP_M300_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, ACLK_TOP_M300_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_ACLK_TOP_M300_ROOT_CON1 = 0x0F34 ; Auto clock switch control register 1
> 14, 2, ACLK_TOP_M300_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, ACLK_TOP_M300_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable aclk_top_m300_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, ACLK_TOP_M300_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable aclk_top_m300_root switch to lower frequency.
= 0, DISABLE

> 0, 12, ACLK_TOP_M300_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable aclk_top_m300_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_CLK_RKNN_DSU0_SRC_T_CON0 = 0x0F38 ; Auto clock switch control register 0
> 16, 16, CLK_RKNN_DSU0_SRC_T_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, CLK_RKNN_DSU0_SRC_T_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_CLK_RKNN_DSU0_SRC_T_CON1 = 0x0F3C ; Auto clock switch control register 1
> 14, 2, CLK_RKNN_DSU0_SRC_T_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, CLK_RKNN_DSU0_SRC_T_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable clk_rknn_dsu0_src_t switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, CLK_RKNN_DSU0_SRC_T_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable clk_rknn_dsu0_src_t switch to lower frequency.
= 0, DISABLE

> 0, 12, CLK_RKNN_DSU0_SRC_T_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable clk_rknn_dsu0_src_t switch to lower frequency.
= 0x000, DISABLE

AUTOCS_HCLK_AUDIO_ROOT_CON0 = 0x0F40 ; Auto clock switch control register 0
> 16, 16, HCLK_AUDIO_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, HCLK_AUDIO_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_HCLK_AUDIO_ROOT_CON1 = 0x0F44 ; Auto clock switch control register 1
> 14, 2, HCLK_AUDIO_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, HCLK_AUDIO_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable hclk_audio_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, HCLK_AUDIO_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable hclk_audio_root switch to lower frequency.
= 0, DISABLE

> 0, 12, HCLK_AUDIO_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable hclk_audio_root switch to lower frequency.
= 0x000, DISABLE

AUTOCS_PCLK_AUDIO_ROOT_CON0 = 0x0F48 ; Auto clock switch control register 0
> 16, 16, PCLK_AUDIO_ROOT_WAIT_TH ; wait_th. Wait time threshold, measured by original clk.
> 0, 16, PCLK_AUDIO_ROOT_IDLE_TH ; idle_th. Idle time threshold, measured by original clk.

AUTOCS_PCLK_AUDIO_ROOT_CON1 = 0x0F4C ; Auto clock switch control register 1
> 14, 2, PCLK_AUDIO_ROOT_CLKSEL_CFG ; clksel_cfg Auto switch clock selection.
= 0, ORIGINAL_CLK
= 1, XIN_OSC0_FUNC_DIV
= 2, CLK_RTC_32K

> 13, 1, PCLK_AUDIO_ROOT_SWITCH_EN ; switch_en
= 1, ENABLE ; Enable pclk_audio_root switched to lower frequency when module is inactive.
= 0, DISABLE ; Disable auto switch function.

> 12, 1, PCLK_AUDIO_ROOT_AUTOCS_EN ; autocs_en
= 1, ENABLE ; Enable pclk_audio_root switch to lower frequency.
= 0, DISABLE

> 0, 12, PCLK_AUDIO_ROOT_AUTOCS_CTRL ; autocs_ctrl.
= 0xFFF, ENABLE ; Enable pclk_audio_root switch to lower frequency.
= 0x000, DISABLE

