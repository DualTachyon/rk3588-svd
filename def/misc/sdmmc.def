[SDMMC]
@ = 0x0FE2C0000, 0x00010000

CTRL = 0x0000 ; Control register
> 25, 1, USE_INTERNAL_DMAC ; Present only for the Internal DMAC configuration; else, it is reserved.
= 0, HOST_XFER ; The host performs data transfers through the slave interface
= 1, INTERNAL_DMAC ; Internal DMAC used for data transfer

> 11, 1, CEATA_DEVICE_INTERRUPT_STATUS ; Software should appropriately write to this bit after power-on reset or any other reset to CE-ATA device. After reset, usually CE-ATA device interrupt is disabled. If the host enables CE-ATA device interrupt, then software should set this bit.
= 0, NOT_ENABLED ; Interrupts not enabled in CE-ATA device
= 1, ENABLED ; Interrupts are enabled in CE-ATA device

> 10, 1, SEND_AUTO_STOP_CCSD ; NOTE: Always set send_auto_stop_ccsd and send_ccsd bits together send_auto_stop_ccsd should not be set independent of send_ccsd. When set, the Host Controller automatically sends internally- generated STOP command (CMD12) to CE-ATA device. After sending internally-generated STOP command, Auto Command Done (ACD) bit in SDMMC_RINTSTS is set and generates interrupt to host if Auto Command Done interrupt is not masked. After sending the CCSD, the Host Controller automatically clears send_auto_stop_ccsd bit.
= 0, CLEAR_BIT ; Clear bit if Host Controller does not reset the bit
= 1, SEND_STOP ; Send internally generated STOP after sending CCSD to CE- ATA device

> 9, 1, SEND_CCSD ; When set, the Host Controller sends CCSD to CE-ATA device. Software sets this bit only if current command is expecting CCS (that is, RW_BLK) and interrupts are enabled in CE-ATA device. Once the CCSD pattern is sent to device, the Host Controller automatically clears send_ccsd bit. It also sets Command Done (CD) bit in SDMMC_RINTSTS register and generates interrupt to host if Command Done interrupt is not masked. NOTE: Once send_ccsd bit is set, it takes two card clock cycles to drive the CCSD on the CMD line. Due to this, during the boundary conditions it may happen that CCSD is sent to the CE- ATA device, even if the device signalled CCS.
= 0, CLEAR_BIT ; Clear bit if Host Controller does not reset the bit
= 1, SEND_STOP ; Send Command Completion Signal Disable (CCSD) to CE- ATA device

> 8, 1, ABORT_READ_DATA ;
= 0, NO_CHANGE
= 1, TODO_FIX_NAME ; After suspend command is issued during read-transfer, software polls card to find when suspend happened. Once suspend occurs, software sets bit to reset data state-machine, which is waiting for next block of data. Bit automatically clears once data state machine resets to idle. Used in SDIO card suspend sequence.

> 7, 1, SEND_IRQ_RESPONSE ; Bit automatically clears once response is sent. To wait for MMC card interrupts, software issues CMD40, and the Host Controller waits for interrupt response from MMC card. In meantime, if software wants the Controller to exit waiting for interrupt state, it can set this bit, at which time the Host Controller command state-machine sends CMD40 response on bus and returns to idle state.
= 0, NO_CHANGE
= 1, SEND_AUTO_IRQ

> 6, 1, READ_WAIT ; For sending read-wait to SDIO cards.
= 0, CLEAR ; Clear read wait
= 1, ASSERT ; Assert read wait

> 5, 1, DMA_ENABLE ; Even when DMA mode is enabled, host can still push/pop data into or from FIFO; this should not happen during the normal operation. If there is simultaneous FIFO access from host/DMA, the data coherency is lost. Also, there is no arbitration inside the controller to prioritize simultaneous host/DMA access.
= 0, DISABLE ; Disable DMA transfer mode
= 1, ENABLE ; Enable DMA transfer mode

> 4, 1, INT_ENABLE ; Global interrupt enable/disable bit. The int port is 1 only when this bit is 1 and one or more unmasked interrupts are set.
= 0, DISABLE ; Disable interrupts
= 1, ENABLE ; Enable interrupts

> 2, 1, DMA_RESET, WO ; To reset DMA interface, firmware should set bit to 1. This bit is auto-cleared after two AHB clocks.
= 0, NO_CHANGE
= 1, RESET ; Reset internal DMA interface control logic

> 1, 1, FIFO_RESET, WO ; To reset FIFO, firmware should set bit to 1. This bit is auto-cleared after completion of reset operation.
= 0, NO_CHANGE
= 1, RESET ; Reset to data FIFO to reset FIFO pointers

> 0, 1, CONTROLLER_RESET, WO ; To reset Host Controller, firmware should set bit to 1. This bit is auto-cleared after two AHB and two cclk_in clock cycles. This resets: a. BIU/CIU interface b. CIU and state machines c. abort_read_data, send_irq_response, and read_wait bits of SDMMC_CTRL register d. start_cmd bit of SDMMC_CMD register Does not affect any registers or DMA interface, or FIFO or controller interrupts.
= 0, NO_CHANGE
= 1, RESET ; Reset Host Controller

PWREN = 0x0004 ; Power enable register
> 0, 1, POWER_ENABLE ; Power on/off switch for the card. Once power is turned on, firmware should wait for regulator/switch ramp-up time before trying to initialize card. Bit values output to card_power_en port.
= 0, POWER_OFF
= 1, POWER_ON

CLKDIV = 0x0008 ; Clock divider register
> 0, 8, CLK_DIVIDER0 ; Clock divider-0 value. Clock division is 2*n. For example, value of 0 means divide by 2*0 = 0 (no division, bypass), value of 1 means divide by 2*1 = 2, and so on. The recommended value is 0 or 1.

CLKSRC = 0x000C ; SD clock source register
> 0, 2, CLK_SOURCE ; Clock divider source.
= 0, DIV0 ; Clock divider 0. The cclk_out is always from clock divider 0, and this register is not implemented.

CLKENA = 0x0010 ; Clock enable register
> 16, 1, CCLK_LOW_POWER ; Low-power control for SD card clock and MMC card clock supported.
= 0, NON_LOW_POWER
= 1, LOW_POWER ; Stop clock when card in IDLE (should be normally set to only MMC and SD memory cards; for SDIO cards, if interrupts must be detected, clock should not be stopped).

> 0, 1, CCLK_ENABLE ; Clock-enable control for SD card clock and MMC card clock supported.
= 0, DISABLED
= 1, ENABLED

TMOUT = 0x0014 ; Timeout register
> 8, 24, DATA_TIMEOUT ; Value for card data read timeout; same value also used for data starvation by host timeout. Value is in number of card output clock. Note: The software timer should be used if the timeout value is in the order of 100 ms. In this case, read data timeout interrupt needs to be disabled.

> 0, 8, RESPONSE_TIMEOUT ; Response timeout value. Value is in number of card output clock cclk_out.

CTYPE = 0x0018 ; Card type register
> 16, 1, CARD_WIDTH_8 ; Indicates if card is 8-bit.
= 0, NON_8BIT
= 1, 8BIT

> 0, 1, CARD_WIDTH ; Indicates if card is 1-bit or 4-bit.
= 0, 1BIT
= 1, 4BIT

BLKSIZ = 0x001C ; Block size register
> 0, 16, BLOCK_SIZE ; Block size

BYTCNT = 0x0020 ; Byte count register
> 0, 32, BYTE_COUNT ; Number of bytes to be transferred; should be integer multiple of block size for block transfers. For undefined number of byte transfers, byte count should be set to 0. When byte count is set to 0, it is responsibility of host to explicitly send stop/abort command to terminate data transfer.

INTMASK = 0x0024 ; Interrupt mask register
> 24, 1, SDIO_INT_MASK
= 0, NOT_MASKED
= 1, MASKED

> 16, 1, DATA_NOBUSY_INT_MASK
= 0, NOT_MASKED
= 1, MASKED

> 15, 1, INT_MASK_EBE ; End-bit error (read)/Write no CRC
= 0, MASKED
= 1, UNMASKED

> 14, 1, INT_MASK_ACD ; Auto command done
= 0, MASKED
= 1, UNMASKED

> 13, 1, INT_MASK_SBE ; Start-bit error
= 0, MASKED
= 1, UNMASKED

> 12, 1, INT_MASK_HLE ; Hardware locked write error
= 0, MASKED
= 1, UNMASKED

> 11, 1, INT_MASK_FRUN ; FIFO underrun/overrun error
= 0, MASKED
= 1, UNMASKED

> 10, 1, INT_MASK_HTO ; Data starvation-by-host timeout /Volt_switch_int
= 0, MASKED
= 1, UNMASKED

> 9, 1, INT_MASK_DRTO ; Data read timeout
= 0, MASKED
= 1, UNMASKED

> 8, 1, INT_MASK_RTO ; Response timeout
= 0, MASKED
= 1, UNMASKED

> 7, 1, INT_MASK_DCRC ; Data CRC error
= 0, MASKED
= 1, UNMASKED

> 6, 1, INT_MASK_RCRC ; Response CRC error
= 0, MASKED
= 1, UNMASKED

> 5, 1, INT_MASK_RXDR ; Receive FIFO data request
= 0, MASKED
= 1, UNMASKED

> 4, 1, INT_MASK_TXDR ; Transmit FIFO data request
= 0, MASKED
= 1, UNMASKED

> 3, 1, INT_MASK_DTO ; Data transfer over
= 0, MASKED
= 1, UNMASKED

> 2, 1, INT_MASK_CDONE ; Command done
= 0, MASKED
= 1, UNMASKED

> 1, 1, INT_MASK_RE ; Response error
= 0, MASKED
= 1, UNMASKED

> 0, 1, INT_MASK_CD ; Card detect
= 0, MASKED
= 1, UNMASKED

CMDARG = 0x0028 ; Command argument register
> 0, 32, CMD_ARG ; Value indicates command argument to be passed to card.

CMD = 0x002C ; Command register
> 31, 1, START_CMD ; Start command. Once command is taken by CIU, bit is cleared. When bit is set, host should not attempt to write to any command registers. If write is attempted, hardware lock error is set in raw interrupt register. Once command is sent and response is received from SD/MMC cards, Command Done bit is set in raw interrupt register.
= 1, START

> 29, 1, USE_HOLD_REG ; Use hold register.
= 0, BYPASS ; CMD and DATA sent to card bypassing hold register
= 1, THROUGH ; CMD and DATA sent to card through the hold register

> 28, 1, VOLT_SWITCH ; Voltage switch bit.
= 0, NO_SWITCH ; No voltage switching
= 1, SWITCH ; Voltage switching enabled; must be set for CMD11 only.

> 27, 1, BOOT_MODE ; Boot mode selection.
= 0, MANDATORY ; Mandatory boot operation
= 1, ALTERNATE ; Alternate boot operation

> 26, 1, DISABLE_BOOT ; Disable boot. When software sets this bit along with start_cmd, CIU terminates the boot operation. Do not set disable_boot and enable_boot together.
= 1, DISABLE

> 25, 1, EXPECT_BOOT_ACK ; Expect boot acknowledge. When software sets this bit along with enable_boot, CIU expects a boot acknowledge start pattern of 0-1-0 from the selected card.

> 24, 1, ENABLE_BOOT ; Enable boot. This bit should be set only for mandatory boot mode. When Software sets this bit along with start_cmd, CIU starts the boot sequence for the corresponding card by asserting the CMD line low. Do not set disable_boot and enable_boot together.
= 1, ENABLE

> 23, 1, CCS_EXPECTED ; If the command expects command completion signal (CCS) from the CE-ATA device, the software should set this control bit. The Host Controller sets data transfer over (DTO) bit in SDMMC_RINTSTS register and generates interrupt to host if data transfer over interrupt is not masked.
= 0, NOT_ENABLED ; Interrupts are not enabled in CE-ATA device or command does not expect CCS from device
= 1, ENABLED ; Interrupts are enabled in CE-ATA device and RW_BLK command expects command completion signal from CE-ATA device

> 22, 1, READ_CEATA_DEVICE ; Software should set this bit to indicate that CE-ATA device is being accessed for read transfer. This bit is used to disable read data timeout indication while performing CE-ATA read transfers. Maximum value of I/O transmission delay can be no less than 10 seconds. The Host Controller should not indicate read data timeout while waiting for data from CE-ATA device.
= 0, NOT_PERFORMING ; Host is not performing read access towards CE-ATA device
= 1, PERFORMING ; Host is performing read access towards CE-ATA device

> 21, 1, UPDATE_CLOCK_REGS_ONLY ; Following register values transferred into card clock domain: SDMMC_CLKDIV, SDMMC_CLRSRC, SDMMC_CLKENA. Changes card clocks (change frequency, truncate off or on, and set low-frequency mode); provided in order to change clock frequency or stop clock without having to send command to cards. During normal command sequence, when update_clock_regs_only = 0, following control registers are transferred from BIU to CIU: SDMMC_CMD, SDMMC_CMDARG, SDMMC_TMOUT, SDMMC_CTYPE, SDMMC_BLKSIZ, SDMMC_BYTCNT. CIU uses new register values for new command sequence to card. When bit is set, there are no Command Done interrupts because no command is sent to SD_MMC_CEATA cards.
= 0, NORMAL_SEQ ; Normal command sequence
= 1, UPDATE_CLK_ONLY ; Do not send commands, just update clock register value into card clock domain.

> 15, 1, SEND_INITIALIZATION ; After power on, 80 clocks must be sent to card for initialization before sending any commands to card. Bit should be set while sending first command to card so that controller will initialize clocks before sending command to card. This bit should not be set for either of the boot modes (alternate or mandatory).
= 0, DONT_SEND ; Do not send initialization sequence (80 clocks of 1) before sending this command
= 1, SEND ; Send initialization sequence before sending this command

> 14, 1, STOP_ABORT_CMD ;
= 0, DONT_STOP_OR_ABORT ; Neither stop nor abort command to stop current data transfer in progress. If abort is sent to function-number currently selected or not in data-transfer mode, then bit should be set to 0.
= 1, STOP_OR_ABORT ; Stop or abort command intended to stop current data transfer in progress. When open-ended or predefined data transfer is in progress, and host issues stop or abort command to stop data transfer, bit should be set so that command/data state-machines of CIU can return correctly to idle state. This is also applicable for Boot mode transfers. To Abort boot mode, this bit should be set along with SDMMC_CMD[26]=disable_boot.

> 13, 1, WAIT_PRVDATA_COMPLETE ; The wait_prvdata_complete=0 option typically used to query status of card during data transfer or to stop current data transfer; card_number should be same as in previous command.
= 0, IMMEDIATELY ; Send command at once, even if previous data transfer has not completed
= 1, WAIT ; Wait for previous data transfer completion before sending command

> 12, 1, SEND_AUTO_STOP ;
= 0, NO_STOP ; No stop command sent at end of data transfer
= 1, AUTO_STOP ; Send stop command at end of data transfer When set, the Host Controller sends stop command to card at end of data transfer. a. When send_auto_stop bit should be set, since some data transfers do not need explicit stop commands b. Open-ended transfers that software should explicitly send to stop command Additionally, when "resume" is sent to resume-suspended memory access of SD-Combo card, bit should be set correctly if suspended data transfer needs send_auto_stop. Don't care if no data expected from card.

> 11, 1, TRANSFER_MODE ; Don't care if no data expected.
= 0, BLOCK ; Block data transfer command
= 1, STREAM ; Stream data transfer command

> 10, 1, WR ; Don't care if no data expected from card.
= 0, READ ; Read from card
= 1, WRITE ; Write to card

> 9, 1, DATA_EXPECTED
= 0, NOT_EXPECTED ; No data transfer expected (read/write)
= 1, EXPECTED ; Data transfer expected (read/write)

> 8, 1, CHECK_RESPONSE_CRC ; Software should disable CRC checks for those commands in order to disable CRC checking by controller.
= 0, DONT_CHECK ; Do not check response CRC
= 1, CHECK ; Check response CRC Some of command responses do not return valid CRC bits.

> 7, 1, RESPONSE_LENGTH ;
= 0, SHORT ; Short response expected from card
= 1, LONG ; Long response expected from card

> 6, 1, RESPONSE_EXPECT ;
= 0, NO_RESPONSE ; No response expected from card
= 1, RESPONSE ; Response expected from card

> 0, 6, CMD_INDEX ; Command index

RESP0 = 0x0030, RO ; Response register 0
> 0, 32, RESPONSE0 ; Bit[31:0] of response

RESP1 = 0x0034, RO ; Response register 1
> 0, 32, RESPONSE1 ; Register represents bit[63:32] of long response. When CIU sends auto-stop command, then response is saved in register. Response for previous command sent by host is still preserved in response 0 register. Additional auto-stop issued only for data transfer commands, and response type is always "short" for them.

RESP2 = 0x0038, RO ; Response register 2
> 0, 32, RESPONSE2 ; Bit[95:64] of long response.

RESP3 = 0x003C, RO ; Response register 3
> 0, 32, RESPONSE3 ; Bit[127:96] of long response.

MINTSTS = 0x0040, RO ; Masked interrupt status register
> 24, 1, SDIO_INTERRUPT ; SDIO interrupt status when sdio_int_mask is set.
> 16, 1, DATA_NOBUSY_INT_STATUS ; Data no busy interrupt status when data_nobusy_int_mask is set
> 15, 1, INT_STATUS_EBE ; End-bit error (read)/Write no CRC
> 14, 1, INT_STATUS_ACD ; Auto command done
> 13, 1, INT_STATUS_SBE ; Start-bit error
> 12, 1, INT_STATUS_HLE ; Hardware locked write error
> 11, 1, INT_STATUS_FRUN ; FIFO underrun/overrun error
> 10, 1, INT_STATUS_HTO ; Data starvation-by-host timeout /Volt_switch_int
> 9, 1, INT_STATUS_DRTO ; Data read timeout
> 8, 1, INT_STATUS_RTO ; Response timeout
> 7, 1, INT_STATUS_DCRC ; Data CRC error
> 6, 1, INT_STATUS_RCRC ; Response CRC error
> 5, 1, INT_STATUS_RXDR ; Receive FIFO data request
> 4, 1, INT_STATUS_TXDR ; Transmit FIFO data request
> 3, 1, INT_STATUS_DTO ; Data transfer over
> 2, 1, INT_STATUS_CDONE ; Command done
> 1, 1, INT_STATUS_RE ; Response error
> 0, 1, INT_STATUS_CD ; Card detect

RINTSTS = 0x0044, WO, W1C ; Raw interrupt status register
> 24, 1, SDIO_INTERRUPT ; Raw SDIO interrupt status. Write value of 1 clears this bit, and value of 0 leaves bit intact.
> 16, 1, DATA_NOBUSY_INT_STATUS ; Raw data no busy interrupt status. Write value of 1 clears this bit, and value of 0 leaves bit intact.
> 15, 1, INT_STATUS_EBE ; End-bit error (read)/Write no CRC
> 14, 1, INT_STATUS_ACD ; Auto command done
> 13, 1, INT_STATUS_SBE ; Start-bit error
> 12, 1, INT_STATUS_HLE ; Hardware locked write error
> 11, 1, INT_STATUS_FRUN ; FIFO underrun/overrun error
> 10, 1, INT_STATUS_HTO ; Data starvation-by-host timeout /Volt_switch_int
> 9, 1, INT_STATUS_DRTO ; Data read timeout
> 8, 1, INT_STATUS_RTO ; Response timeout
> 7, 1, INT_STATUS_DCRC ; Data CRC error
> 6, 1, INT_STATUS_RCRC ; Response CRC error
> 5, 1, INT_STATUS_RXDR ; Receive FIFO data request
> 4, 1, INT_STATUS_TXDR ; Transmit FIFO data request
> 3, 1, INT_STATUS_DTO ; Data transfer over
> 2, 1, INT_STATUS_CDONE ; Command done
> 1, 1, INT_STATUS_RE ; Response error
> 0, 1, INT_STATUS_CD ; Card detect

STATUS = 0x0048, RO ; Status register
> 31, 1, DMA_REQ ; DMA request signal state

> 30, 1, DMA_ACK ; DMA acknowledge signal state

> 17, 13, FIFO_COUNT ; Number of filled locations in FIFO

> 11, 6, RESPONSE_INDEX ; Index of previous response, including any auto-stop sent by core.

> 10, 1, DATA_STATE_MC_BUSY ; Data transmit or receive state-machine is busy.

> 9, 1, DATA_BUSY ; Inverted version of raw selected card_data[0].
= 0, NOT_BUSY
= 1, BUSY

> 8, 1, DATA_3_STATUS ; Raw selected card_data[3]; checks whether card is present.
= 0, NOT_PRESENT
= 1, PRESENT

> 4, 4, COMMAND_FSM_STATES ; Command FSM states. The command FSM state is represented using 19 bits. The SDMMC_STATUS register[7:4] has 4 bits to represent the command FSM states. Using these 4 bits, only 16 states can be represented. Thus three states cannot be represented in the SDMMC_STATUS[7:4] register. The three states that are not represented in the SDMMC_STATUS register[7:4] are: Bit 16: Wait for CCS Bit 17: Send CCSD Bit 18: Boot Mode Due to this, while command FSM is in "Wait for CCS state" or "Send CCSD" or "Boot Mode", the SDMMC_STATUS register indicates status as 0 for the bit field [7:4].
= 0, IDLE
= 1, SEND_INIT_SEQUENCE
= 2, TX_CMD_START_BIT
= 3, TX_CMD_TX_BIT
= 4, TX_CMD_INDEX_ARG
= 5, TX_CMD_CRC7
= 6, TX_CMD_END_BIT
= 7, TX_RESP_START_BIT
= 8, RX_RESP_IRQ_RESPONSE
= 9, RX_RESP_TX_BIT
= 10, RX_RESP_CMD_IDX
= 11, RX_RESP_DATA
= 12, RX_RESP_CRC7
= 13, RX_RESP_END_BIT
= 14, CMD_PATH_WAIT_NCC
= 15, WAIT ; CMD-to-response turnaround

> 3, 1, FIFO_FULL ; FIFO is full status
= 1, FULL
= 0, NOT_FULL

> 2, 1, FIFO_EMPTY ; FIFO is empty status
= 1, EMPTY
= 0, NOT_EMPTY

> 1, 1, FIFO_TX_WATERMARK ; FIFO reached Transmit watermark level; not qualified with data transfer.

> 0, 1, FIFO_RX_WATERMARK ; FIFO reached Receive watermark level; not qualified with data transfer.

FIFOTH = 0x004C ; FIFO threshold register
> 28, 3, DMA_MUTIPLE_TRANSACTION_SIZE ; Burst size of multiple transaction; should be programmed same as DMA controller multiple-transaction-size SRC/DEST_MSIZE. The unit for transfer is 32bits.
= 0, 1_XFERS
= 1, 4_XFERS
= 2, 8_XFERS
= 3, 16_XFERS
= 4, 32_XFERS
= 5, 64_XFERS
= 6, 128_XFERS
= 7, 256_XFERS

> 16, 12, RX_WMARK ; FIFO threshold watermark level when receiving data to card. When FIFO data count reaches greater than this number, DMA/FIFO request is raised. During end of packet, request is generated regardless of threshold programming in order to complete any remaining data. In non-DMA mode, when receiver FIFO threshold (RXDR) interrupt is enabled, then interrupt is generated instead of DMA request. During end of packet, interrupt is not generated if threshold programming is larger than any remaining data. It is responsibility of host to read remaining bytes on seeing Data Transfer Done interrupt. In DMA mode, at end of packet, even if remaining bytes are less than threshold, DMA request does single transfers to flush out any remaining bytes before Data Transfer Done interrupt is set. 12 bits-1 bit less than FIFO-count of status register, which is 13 bits. Limitation: rx_wmark <= FIFO_DEPTH-2 Recommended: (FIFO_DEPTH/2) - 1; (means greater than (FIFO_DEPTH/2) - 1) NOTE: In DMA mode during CCS time-out, the DMA does not generate the request at the end of packet, even if remaining bytes are less than threshold. In this case, there will be some data left in the FIFO. It is the responsibility of the application to reset the FIFO after the CCS timeout.

> 0, 12, TX_WMARK ; FIFO threshold watermark level when transmitting data to card. When FIFO data count is less than or equal to this number, DMA/FIFO request is raised. If Interrupt is enabled, then interrupt occurs. During end of packet, request or interrupt is generated, regardless of threshold programming. In non-DMA mode, when transmit FIFO threshold (TXDR) interrupt is enabled, then interrupt is generated instead of DMA request. During end of packet, on last interrupt, host is responsible for filling FIFO with only required remaining bytes (not before FIFO is full or after CIU completes data transfers, because FIFO may not be empty). In DMA mode, at end of packet, if last transfer is less than burst size, DMA controller does single cycles until required bytes are transferred. 12 bits -1 bit less than FIFO-count of status register, which is 13 bits. Limitation: tx_wmark >= 1; Recommended: FIFO_DEPTH/2; (means less than or equal to FIFO_DEPTH/2)

CDETECT = 0x0050, RO ; Card detect register
> 0, 1, CARD_DETECT_N ; Value on card_detect_n input port.
= 0, PRESENT ; Represents presence of card
= 1, ABSENT ; Represents absence of card

WRTPRT = 0x0054 ; Write protect register
> 0, 1, WRITE_PROTECT ; Value on card_write_prt input port. 1 represents write protection.
= 1, WRITE_PROTECT
= 0, WRITE_ENABLE

TCBCNT = 0x005C, RO ; Transferred card byte count register
> 0, 32, TRANS_CARD_BYTE_COUNT ; Number of bytes transferred by CIU unit to card.

TBBCNT = 0x0060, RO ; Transferred host to FIFO byte count register
> 0, 32, TRANS_FIFO_BYTE_COUNT ; Number of bytes transferred between host/DMA memory and BIU FIFO.

DEBNCE = 0x0064 ; Debounce count register
> 0, 24, DEBOUNCE_COUNT ; Number of host clock used by debounce filter logic; typical debounce time is 5-25 ms.

USRID = 0x0068 ; User ID register
> 0, 32, USRID ; User identification register

VERID = 0x006C ; Version ID register
> 0, 32, VERID, RO ; Version identification register

HCON = 0x0070, RO ; Hardware configuration register
> 26, 1, AREA_OPTIMIZED
= 0, DISABLED ; No area optimization
= 1, ENABLED ; Area optimization

> 24, 2, NUM_CLK_DIV ; divider number-1.

> 23, 1, SET_CLK_FALSE_PATH
= 0, NO_FALSE_PATH
= 1, FALSE_PATH_SET

> 22, 1, IMPL_HOLD_REG
= 0, ABSENT ; No hold register
= 1, PRESENT ; Hold register

> 21, 1, FIFO_RAM_INSIDE
= 0, OUTSIDE
= 1, INSIDE

> 18, 3, GE_DMA_DATA_WIDTH
= 0, 16BITS
= 1, 32BITS
= 2, 64BITS

> 16, 2, DMA_INTERFACE
= 0, NONE
= 1, INT_DMA
= 2, GENERIC_DMA
= 3, NON_INT_DMA

> 10, 6, H_ADDR_WIDTH
= 8, 9BITS
= 9, 10BITS
= 10, 11BITS
= 11, 12BITS
= 12, 13BITS
= 13, 14BITS
= 14, 15BITS
= 15, 16BITS
= 16, 17BITS
= 17, 18BITS
= 18, 19BITS
= 19, 20BITS
= 20, 21BITS
= 21, 22BITS
= 22, 23BITS
= 23, 24BITS
= 24, 25BITS
= 25, 26BITS
= 26, 27BITS
= 27, 28BITS
= 28, 29BITS
= 29, 30BITS
= 30, 31BITS
= 31, 32BITS

> 7, 3, H_DATA_WIDTH
= 0, 16BITS
= 1, 32BITS
= 2, 64BITS

> 6, 1, H_BUS_TYPE
= 0, APB
= 1, AHB

> 1, 5, CARD_NUM ; Card number - 1.

> 0, 1, CARD_TYPE ; Card type.
= 0, MMC_ONLY
= 1, SD_MMC

UHSREG = 0x0074 ; UHS-1 control register
> 16, 1, DDR_REG ; DDR mode. These bits indicate DDR mode of operation to the core for the data transfer.
= 0, NON_DDR
= 1, DDR

RSTN = 0x0078 ; Hardware reset register
> 0, 1, CARD_RESET ; Hardware reset. These bits cause the cards to enter pre-idle state, which requires them to be re-initialized.
= 0, ACTIVE ; Active mode
= 1, RESET

BMOD = 0x0080 ; Bus mode register
> 8, 3, PBL, RO ; Programmable burst length. These bits indicate the maximum number of beats to be performed in one IDMAC transaction. The IDMAC will always attempt to burst as specified in PBL each time it starts a Burst transfer on the host bus. The permissible values are 1, 4, 8, 16, 32, 64, 128 and 256. This value is the mirror of MSIZE of SDMMC_FIFOTH register. In order to change this value, write the required value to SDMMC_FIFOTH register. This is an encode value as follows. Transfer unit is 32 bits. PBL is a read-only value and is applicable only for data access; it does not apply to descriptor accesses.
= 0, 1XFERS
= 1, 4XFERS
= 2, 8XFERS
= 3, 16XFERS
= 4, 32XFERS
= 5, 64XFERS
= 6, 128XFERS
= 7, 256XFERS

> 7, 1, DE ; IDMAC enable. When set, the IDMAC is enabled.
= 1, ENABLE
= 0, DISABLE

> 2, 5, DSL ; Descriptor skip length. Specifies the number of word to skip between two unchained descriptors. This is applicable only for dual buffer structure.

> 1, 1, FB ; Fixed burst. Controls whether the AHB Master interface performs fixed burst transfers or not. When set, the AHB will use only SINGLE, INCR4, INCR8 or INCR16 during start of normal burst transfers. When reset, the AHB will use SINGLE and INCR burst transfer operations.

> 0, 1, SWR ; Software reset. When set, the DMA Controller resets all its internal registers. It is automatically cleared after 1 clock cycle.
= 1, RESET

PLDMND = 0x0084, WO ; Poll demand register
> 0, 32, PD ; Poll demand. If the OWN bit of a descriptor is not set, the FSM goes to the suspend state. The host needs to write any value into this register for the IDMAC FSM to resume normal descriptor fetch operation.

DBADDR = 0x0088 ; Descriptor list base address register
> 0, 32, SBL ; Start of descriptor list. Contains the base address of the first descriptor. The LSB bits[1:0] are ignored and taken as all-zero by the IDMAC internally. Hence these LSB bits are read-only.

IDSTS = 0x008C ; Internal DMAC status register
> 13, 4, FSM, RO ; DMAC FSM present state.
= 0, DMA_IDLE
= 1, DMA_SUSPEND
= 2, DESC_RD
= 3, DESC_CHK
= 4, DMA_RD_REQ_WAI
= 5, DMA_WR_REQ_WAI
= 6, DMA_RD
= 7, DMA_WR
= 8, DESC_CLOSE

> 10, 3, EB, RO ; Error bits. Indicates the type of error that caused a bus error. Valid only with fatal bus.
= 1, ABORT_BY_TX ; Host abort received during transmission
= 2, ABORT_BY_RX ; Host abort received during reception

> 9, 1, AIS, W1C ; Abnormal interrupt summary. Logical OR of the following: SDMMC_IDSTS[2] fatal bus interrupt SDMMC_IDSTS[4] du bit interrupt Only unmasked bits affect this bit. This is a sticky bit and must be cleared each time a corresponding bit that causes ais to be set is cleared.
> 8, 1, NIS, W1C ; Normal interrupt summary. Logical OR of the following: SDMMC_IDSTS[0] transmit interrupt SDMMC_IDSTS[1] receive interrupt Only unmasked bits affect this bit. This is a sticky bit and must be cleared each time a corresponding bit that causes nis to be set is cleared.
> 5, 1, CES, W1C ; Card error summary. Indicates the status of the transaction to/from the card; also present in SDMMC_RINTSTS. Indicates the logical OR of the following bits: EBE: End Bit Error RTO: Response Timeout/Boot Ack Timeout RCRC: Response CRC SBE: Start Bit Error DRTO: Data Read Timeout/BDS timeout DCRC: Data CRC for Receive RE: Response Error. The abort condition of the IDMAC depends on the setting of this CES bit. If the CES bit is enabled, then the IDMAC aborts on a "response error"; however, it will not abort if the CES bit is cleared.
> 4, 1, DUI, W1C ; Descriptor unavailable interrupt. This bit is set when the descriptor is unavailable due to OWN bit = 0 (DES0[31] =0).
> 2, 1, FBE, W1C ; Fatal bus error interrupt. Indicates that a bus error occurred (SDMMC_IDSTS[12:10]). When this bit is set, the DMA disables all its bus accesses.
> 1, 1, RI, W1C ; Receive interrupt. Indicates the completion of data reception for a descriptor.
> 0, 1, TI, W1C ; Transmit interrupt. Indicates that data transmission is finished for a descriptor.

IDINTEN = 0x0090 ; Internal DMAC interrupt enable register
> 9, 1, AI ; Abnormal interrupt summary enable. When set, an abnormal interrupt is enabled. This bit enables the following bits: SDMMC_IDINTEN[2] fatal bus error interrupt SDMMC_IDINTEN[4] du interrupt
= 1, ENABLE
= 0, DISABLE

> 8, 1, NI ; Normal interrupt summary enable. When set, a normal interrupt is enabled. When reset, a normal interrupt is disabled. This bit enables the following bits: SDMMC_IDINTEN[0] transmit interrupt SDMMC_IDINTEN[1] receive interrupt
= 1, ENABLE
= 0, DISABLE

> 5, 1, CES ; Card error summary interrupt enable. When set, it enables the card interrupt summary.
= 1, ENABLE
= 0, DISABLE

> 4, 1, DU ; Descriptor unavailable interrupt. When set along with abnormal interrupt summary enable, the du interrupt is enabled.
= 1, ENABLE
= 0, DISABLE

> 2, 1, FBE ; Fatal bus error enable. When set with abnormal interrupt summary enable, the fatal bus error interrupt is enabled. When reset, fatal bus error enable interrupt is disabled.
= 1, ENABLE
= 0, DISABLE

> 1, 1, RI ; Receive interrupt enable. When set with normal interrupt summary enable, receive interrupt is enabled. When reset, receive interrupt is disabled.
= 1, ENABLE
= 0, DISABLE

> 0, 1, TI ; Transmit interrupt enable. When set with normal interrupt summary enable, transmit interrupt is enabled. When reset, transmit interrupt is disabled.
= 1, ENABLE
= 0, DISABLE

DSCADDR = 0x0094 ; Current host descriptor address register
> 0, 32, HDA ; Host descriptor address pointer. This register points to the start address of the current descriptor read by the IDMAC. Cleared on reset. Pointer updated by IDMAC during operation.

BUFADDR = 0x0098 ; Current buffer descriptor address register
> 0, 32, HBA ; Host buffer address pointer. This register points to the current data buffer address being accessed by the IDMAC. Cleared on Reset. Pointer updated by IDMAC during operation.

CARDTHRCTL = 0x0100 ; Card threshold control register
> 16, 12, CARD_RD_THRES ; Card read threshold size

> 1, 1, BUSY_CLR_INT_EN ; Busy clear interrupt. Note: The application can disable this feature if it does not want to wait for a busy clear interrupt. For example, in a multi-card scenario, the application can switch to the other card without waiting for a busy to be completed. In such cases, the application can use the polling method to determine the status of busy. By default this feature is disabled and backward- compatible to the legacy drivers where polling is used.
= 0, DISABLED ; Busy clear interrupt disabled
= 1, ENABLED ; Busy clear interrupt enabled

> 0, 1, CARD_RD_THRES_EN ; Card read threshold enable. The host initiates read transfer only if zcard_rd_thres amount of space is available in receive FIFO.
= 0, DISABLED ; Card read threshold disabled
= 1, ENABLED ; Card read threshold enabled

BACKEND_POWER = 0x0104 ; Back-end power register
> 0, 1, BACK_END_POWER ; Back end power.
= 0, OFF ; Reset
= 1, ON ; Back-end power supplied to card application

EMMCDDR_REG = 0x010C ; eMMC4.5 DDR start bit detection control register
> 0, 1, HALF_START_BIT ; Control for start bit detection mechanism inside Host Controller based on duration of start bit. Set half_start_bit=1 for eMMC 4.5 and above; set to 0 for SD applications.
= 0, FULL_CYCLE ; Full cycle (half_start_bit=0)
= 1, LESS_THAN_FULL_CYCLE ; Less than one full cycle (half_start_bit=1)

RDYINT_GEN = 0x0120 ; Card ready interrupt generation control register
> 24, 1, RDYINT_CNT_FINISH, RO ; Counter finish indication. When high, it indicates that the rdyint counter is finished.

> 16, 8, RDYINT_CNT_STATUS, RO ; Couner status, reflect internal counter value.

> 8, 1, RDYINT_GEN_WORKING ; Working indication for rdyint generator. When high, Host Controller start to count and generate one rdyint trigger. After the rdyint trigger is generated, this bit will be set to 0 by Host Controller. So software should set it to 1 before detecting next interrupt.

> 0, 8, RDYINT_GEN_MAXVAL ; Max counter value to detect cdata_in0 high value for generating rdyint, based on internal clock frequency.

FIFO_BASE = 0x0200 ; FIFO base address register
> 0, 32, FIFO_BASE_ADDR ; FIFO base address

